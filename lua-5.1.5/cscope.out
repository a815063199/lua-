cscope 15 $HOME/Desktop/work/lua-5.1.5 -q 0000002500 0000380470
	@etc/all.c

5 
	#luØŒ_c


	)

7 
	~"œpi.c
"

8 
	~"lcode.c
"

9 
	~"ldebug.c
"

10 
	~"ldo.c
"

11 
	~"ldump.c
"

12 
	~"lfunc.c
"

13 
	~"lgc.c
"

14 
	~"Œex.c
"

15 
	~"lmem.c
"

16 
	~"lobje˘.c
"

17 
	~"l›codes.c
"

18 
	~"Õ¨£r.c
"

19 
	~"l°©e.c
"

20 
	~"l°rög.c
"

21 
	~"…abÀ.c
"

22 
	~"…m.c
"

23 
	~"lundump.c
"

24 
	~"lvm.c
"

25 
	~"lzio.c
"

27 
	~"œuxlib.c
"

28 
	~"lba£lib.c
"

29 
	~"ldblib.c
"

30 
	~"liﬁib.c
"

31 
	~"löô.c
"

32 
	~"lm©hlib.c
"

33 
	~"lﬂdlib.c
"

34 
	~"lo¶ib.c
"

35 
	~"l°æib.c
"

36 
	~"…ablib.c
"

38 
	~"lua.c
"

	@etc/lua.hpp

6 
	~"lua.h
"

7 
	~"luÆib.h
"

8 
	~"œuxlib.h
"

	@etc/min.c

7 
	~<°dio.h
>

9 
	~"lua.h
"

10 
	~"œuxlib.h
"

12 
	$¥öt
(
lua_Sèã
 *
L
)

14 
n
=
	`lua_gët›
(
L
);

15 
i
;

16 
i
=1; i<=
n
; i++)

18 i‡(
i
>1Ë
	`¥ötf
("\t");

19 i‡(
	`lua_is°rög
(
L
,
i
))

20 
	`¥ötf
("%s",
	`lua_to°rög
(
L
,
i
));

21 i‡(
	`lua_i¢û
(
L
,
i
))

22 
	`¥ötf
("%s","nil");

23 i‡(
	`lua_isboﬁón
(
L
,
i
))

24 
	`¥ötf
("%s",
	`lua_toboﬁón
(
L
,
i
) ? "true" : "false");

26 
	`¥ötf
("%s:%p",
	`luaL_ty≥«me
(
L
,
i
),
	`lua_t›oöãr
(L,i));

28 
	`¥ötf
("\n");

30 
	}
}

32 
	$maö
()

34 
lua_Sèã
 *
L
=
	`lua_›í
();

35 
	`lua_ªgi°î
(
L
,"¥öt",
¥öt
);

36 i‡(
	`luaL_dofûe
(
L
,
NULL
)!=0Ë
	`Ârötf
(
°dîr
,"%s\n",
	`lua_to°rög
(L,-1));

37 
	`lua_˛o£
(
L
);

39 
	}
}

	@etc/noparser.c

15 
	#LUA_CORE


	)

17 
	~"Œex.h
"

18 
	~"Õ¨£r.h
"

19 
	~"lzio.h
"

21 
LUAI_FUNC
 
	$luaX_öô
 (
lua_Sèã
 *
L
) {

22 
	`UNUSED
(
L
);

23 
	}
}

25 
LUAI_FUNC
 
PrŸo
 *
	$luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
, c⁄° *
«me
) {

26 
	`UNUSED
(
z
);

27 
	`UNUSED
(
buff
);

28 
	`UNUSED
(
«me
);

29 
	`lua_pushlôîÆ
(
L
,"parserÇotÜoaded");

30 
	`lua_îr‹
(
L
);

31  
NULL
;

32 
	}
}

34 #ifde‡
NODUMP


35 
	~"lundump.h
"

37 
LUAI_FUNC
 
	$luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
, * 
d©a
, 
°rù
) {

38 
	`UNUSED
(
f
);

39 
	`UNUSED
(
w
);

40 
	`UNUSED
(
d©a
);

41 
	`UNUSED
(
°rù
);

43 
	`UNUSED
(
L
);

46 
	`lua_pushlôîÆ
(
L
,"dumperÇotÜoaded");

47 
	`lua_îr‹
(
L
);

49 
	}
}

	@src/lapi.c

8 
	~<as£π.h
>

9 
	~<m©h.h
>

10 
	~<°d¨g.h
>

11 
	~<°rög.h
>

13 
	#œpi_c


	)

14 
	#LUA_CORE


	)

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"ldebug.h
"

20 
	~"ldo.h
"

21 
	~"lfunc.h
"

22 
	~"lgc.h
"

23 
	~"lmem.h
"

24 
	~"lobje˘.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lundump.h
"

30 
	~"lvm.h
"

34 c⁄° 
	glua_idít
[] =

35 "$Lua: " 
LUA_RELEASE
 " " 
LUA_COPYRIGHT
 " $\n"

36 "$Auth‹s: " 
LUA_AUTHORS
 " $\n"

43 
	#≠i_check√Àms
(
L
, 
n
Ë
	`≠i_check
(L, (nË<(L->
t›
 - L->
ba£
)Ë

	)

45 
	#≠i_checkvÆidödex
(
L
, 
i
Ë
	`≠i_check
(L, (iË!
luaO_nûobje˘
Ë

	)

47 
	#≠i_ö¸_t›
(
L
Ë{
	`≠i_check
(L, L->
t›
 < L->
ci
->t›); L->t›++;}

	)

56 
TVÆue
 *
	$ödex2adr
 (
lua_Sèã
 *
L
, 
idx
) {

57 i‡(
idx
 > 0) {

58 
TVÆue
 *
o
 = 
L
->
ba£
 + (
idx
 - 1);

59 
	`≠i_check
(
L
, 
idx
 <L->
ci
->
t›
 - L->
ba£
);

60 i‡(
o
 >
L
->
t›
Ë 
	`ˇ°
(
TVÆue
 *, 
luaO_nûobje˘
);

61  
o
;

63 i‡(
idx
 > 
LUA_REGISTRYINDEX
) {

64 
	`≠i_check
(
L
, 
idx
 !0 && -idx <L->
t›
 - L->
ba£
);

65  
L
->
t›
 + 
idx
;

67 
idx
) {

68 
LUA_REGISTRYINDEX
:  
	`ªgi°ry
(
L
);

69 
LUA_ENVIRONINDEX
: {

70 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

71 
	`£thvÆue
(
L
, &L->
ív
, 
func
->
c
.env);

72  &
L
->
ív
;

74 
LUA_GLOBALSINDEX
:  
	`gt
(
L
);

76 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

77 
idx
 = 
LUA_GLOBALSINDEX
 - idx;

78  (
idx
 <
func
->
c
.
nupvÆues
)

79 ? &
func
->
c
.
upvÆue
[
idx
-1]

80 : 
	`ˇ°
(
TVÆue
 *, 
luaO_nûobje˘
);

83 
	}
}

89 
TabÀ
 *
	$gëcuºív
 (
lua_Sèã
 *
L
) {

90 i‡(
L
->
ci
 =L->
ba£_ci
)

91  
	`hvÆue
(
	`gt
(
L
));

93 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

94  
func
->
c
.
ív
;

96 
	}
}

99 
	$luaA_pushobje˘
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
) {

100 
	`£tobj2s
(
L
, L->
t›
, 
o
);

101 
	`≠i_ö¸_t›
(
L
);

102 
	}
}

105 
LUA_API
 
	$lua_check°ack
 (
lua_Sèã
 *
L
, 
size
) {

106 
ªs
 = 1;

107 
	`lua_lock
(
L
);

108 i‡(
size
 > 
LUAI_MAXCSTACK
 || (
L
->
t›
 - L->
ba£
 + size) > LUAI_MAXCSTACK)

109 
ªs
 = 0;

110 i‡(
size
 > 0) {

111 
	`luaD_check°ack
(
L
, 
size
);

112 i‡(
L
->
ci
->
t›
 < L->t› + 
size
)

113 
L
->
ci
->
t›
 = L->t› + 
size
;

115 
	`lua_u∆ock
(
L
);

116  
ªs
;

117 
	}
}

120 
LUA_API
 
	$lua_xmove
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
) {

121 
i
;

122 i‡(
‰om
 =
to
) ;

123 
	`lua_lock
(
to
);

124 
	`≠i_check√Àms
(
‰om
, 
n
);

125 
	`≠i_check
(
‰om
, 
	`G
(‰omË=G(
to
));

126 
	`≠i_check
(
‰om
, 
to
->
ci
->
t›
 -Åo->t› >
n
);

127 
‰om
->
t›
 -
n
;

128 
i
 = 0; i < 
n
; i++) {

129 
	`£tobj2s
(
to
,Åo->
t›
++, 
‰om
->t› + 
i
);

131 
	`lua_u∆ock
(
to
);

132 
	}
}

135 
LUA_API
 
	$lua_£éevñ
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
) {

136 
to
->
nCˇŒs
 = 
‰om
->nCcalls;

137 
	}
}

142 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_©∑nic
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
) {

143 
lua_CFun˘i⁄
 
ﬁd
;

144 
	`lua_lock
(
L
);

145 
ﬁd
 = 
	`G
(
L
)->
∑nic
;

146 
	`G
(
L
)->
∑nic
 = 
∑nicf
;

147 
	`lua_u∆ock
(
L
);

148  
ﬁd
;

149 
	}
}

152 
LUA_API
 
lua_Sèã
 *
	$lua_√wthªad
 (
lua_Sèã
 *
L
) {

153 
lua_Sèã
 *
L1
;

154 
	`lua_lock
(
L
);

155 
	`luaC_checkGC
(
L
);

156 
L1
 = 
	`luaE_√wthªad
(
L
);

157 
	`£âhvÆue
(
L
, L->
t›
, 
L1
);

158 
	`≠i_ö¸_t›
(
L
);

159 
	`lua_u∆ock
(
L
);

160 
	`luai_u£r°©ëhªad
(
L
, 
L1
);

161  
L1
;

162 
	}
}

171 
LUA_API
 
	$lua_gët›
 (
lua_Sèã
 *
L
) {

172  
	`ˇ°_öt
(
L
->
t›
 - L->
ba£
);

173 
	}
}

176 
LUA_API
 
	$lua_£â›
 (
lua_Sèã
 *
L
, 
idx
) {

177 
	`lua_lock
(
L
);

178 i‡(
idx
 >= 0) {

179 
	`≠i_check
(
L
, 
idx
 <L->
°ack_œ°
 - L->
ba£
);

180 
L
->
t›
 < L->
ba£
 + 
idx
)

181 
	`£äûvÆue
(
L
->
t›
++);

182 
L
->
t›
 = L->
ba£
 + 
idx
;

185 
	`≠i_check
(
L
, -(
idx
+1Ë<(L->
t›
 - L->
ba£
));

186 
L
->
t›
 +
idx
+1;

188 
	`lua_u∆ock
(
L
);

189 
	}
}

192 
LUA_API
 
	$lua_ªmove
 (
lua_Sèã
 *
L
, 
idx
) {

193 
StkId
 
p
;

194 
	`lua_lock
(
L
);

195 
p
 = 
	`ödex2adr
(
L
, 
idx
);

196 
	`≠i_checkvÆidödex
(
L
, 
p
);

197 ++
p
 < 
L
->
t›
Ë
	`£tobjs2s
(L,Ö-1,Ö);

198 
L
->
t›
--;

199 
	`lua_u∆ock
(
L
);

200 
	}
}

203 
LUA_API
 
	$lua_ö£π
 (
lua_Sèã
 *
L
, 
idx
) {

204 
StkId
 
p
;

205 
StkId
 
q
;

206 
	`lua_lock
(
L
);

207 
p
 = 
	`ödex2adr
(
L
, 
idx
);

208 
	`≠i_checkvÆidödex
(
L
, 
p
);

209 
q
 = 
L
->
t›
; q>
p
; q--Ë
	`£tobjs2s
(L, q, q-1);

210 
	`£tobjs2s
(
L
, 
p
, L->
t›
);

211 
	`lua_u∆ock
(
L
);

212 
	}
}

215 
LUA_API
 
	$lua_ª∂a˚
 (
lua_Sèã
 *
L
, 
idx
) {

216 
StkId
 
o
;

217 
	`lua_lock
(
L
);

219 i‡(
idx
 =
LUA_ENVIRONINDEX
 && 
L
->
ci
 =L->
ba£_ci
)

220 
	`luaG_ru√º‹
(
L
, "no callingÉnvironment");

221 
	`≠i_check√Àms
(
L
, 1);

222 
o
 = 
	`ödex2adr
(
L
, 
idx
);

223 
	`≠i_checkvÆidödex
(
L
, 
o
);

224 i‡(
idx
 =
LUA_ENVIRONINDEX
) {

225 
Closuª
 *
func
 = 
	`cuº_func
(
L
);

226 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1));

227 
func
->
c
.
ív
 = 
	`hvÆue
(
L
->
t›
 - 1);

228 
	`luaC_b¨rõr
(
L
, 
func
, L->
t›
 - 1);

231 
	`£tobj
(
L
, 
o
, L->
t›
 - 1);

232 i‡(
idx
 < 
LUA_GLOBALSINDEX
)

233 
	`luaC_b¨rõr
(
L
, 
	`cuº_func
(L), L->
t›
 - 1);

235 
L
->
t›
--;

236 
	`lua_u∆ock
(
L
);

237 
	}
}

240 
LUA_API
 
	$lua_pushvÆue
 (
lua_Sèã
 *
L
, 
idx
) {

241 
	`lua_lock
(
L
);

242 
	`£tobj2s
(
L
, L->
t›
, 
	`ödex2adr
(L, 
idx
));

243 
	`≠i_ö¸_t›
(
L
);

244 
	`lua_u∆ock
(
L
);

245 
	}
}

254 
LUA_API
 
	$lua_ty≥
 (
lua_Sèã
 *
L
, 
idx
) {

255 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

256  (
o
 =
luaO_nûobje˘
Ë? 
LUA_TNONE
 : 
	`ây≥
(o);

257 
	}
}

260 
LUA_API
 c⁄° *
	$lua_ty≥«me
 (
lua_Sèã
 *
L
, 
t
) {

261 
	`UNUSED
(
L
);

262  (
t
 =
LUA_TNONE
Ë? "nÿvÆue" : 
luaT_ty≥«mes
[t];

263 
	}
}

266 
LUA_API
 
	$lua_iscfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

267 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

268  
	`iscfun˘i⁄
(
o
);

269 
	}
}

272 
LUA_API
 
	$lua_i¢umbî
 (
lua_Sèã
 *
L
, 
idx
) {

273 
TVÆue
 
n
;

274 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

275  
	`t⁄umbî
(
o
, &
n
);

276 
	}
}

279 
LUA_API
 
	$lua_is°rög
 (
lua_Sèã
 *
L
, 
idx
) {

280 
t
 = 
	`lua_ty≥
(
L
, 
idx
);

281  (
t
 =
LUA_TSTRING
 ||Å =
LUA_TNUMBER
);

282 
	}
}

285 
LUA_API
 
	$lua_isu£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

286 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

287  (
	`âisu£rd©a
(
o
Ë|| 
	`âi¶ightu£rd©a
(o));

288 
	}
}

291 
LUA_API
 
	$lua_øwequÆ
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

292 
StkId
 
o1
 = 
	`ödex2adr
(
L
, 
ödex1
);

293 
StkId
 
o2
 = 
	`ödex2adr
(
L
, 
ödex2
);

294  (
o1
 =
luaO_nûobje˘
 || 
o2
 ==ÜuaO_nilobject) ? 0

295 : 
	`luaO_øwequÆObj
(
o1
, 
o2
);

296 
	}
}

299 
LUA_API
 
	$lua_equÆ
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

300 
StkId
 
o1
, 
o2
;

301 
i
;

302 
	`lua_lock
(
L
);

303 
o1
 = 
	`ödex2adr
(
L
, 
ödex1
);

304 
o2
 = 
	`ödex2adr
(
L
, 
ödex2
);

305 
i
 = (
o1
 =
luaO_nûobje˘
 || 
o2
 =luaO_nûobje˘Ë? 0 : 
	`equÆobj
(
L
, o1, o2);

306 
	`lua_u∆ock
(
L
);

307  
i
;

308 
	}
}

311 
LUA_API
 
	$lua_Às°h™
 (
lua_Sèã
 *
L
, 
ödex1
, 
ödex2
) {

312 
StkId
 
o1
, 
o2
;

313 
i
;

314 
	`lua_lock
(
L
);

315 
o1
 = 
	`ödex2adr
(
L
, 
ödex1
);

316 
o2
 = 
	`ödex2adr
(
L
, 
ödex2
);

317 
i
 = (
o1
 =
luaO_nûobje˘
 || 
o2
 ==ÜuaO_nilobject) ? 0

318 : 
	`luaV_Às°h™
(
L
, 
o1
, 
o2
);

319 
	`lua_u∆ock
(
L
);

320  
i
;

321 
	}
}

325 
LUA_API
 
lua_Numbî
 
	$lua_t⁄umbî
 (
lua_Sèã
 *
L
, 
idx
) {

326 
TVÆue
 
n
;

327 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

328 i‡(
	`t⁄umbî
(
o
, &
n
))

329  
	`nvÆue
(
o
);

332 
	}
}

335 
LUA_API
 
lua_I¡egî
 
	$lua_toöãgî
 (
lua_Sèã
 *
L
, 
idx
) {

336 
TVÆue
 
n
;

337 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

338 i‡(
	`t⁄umbî
(
o
, &
n
)) {

339 
lua_I¡egî
 
ªs
;

340 
lua_Numbî
 
num
 = 
	`nvÆue
(
o
);

341 
	`lua_numbî2öãgî
(
ªs
, 
num
);

342  
ªs
;

346 
	}
}

349 
LUA_API
 
	$lua_toboﬁón
 (
lua_Sèã
 *
L
, 
idx
) {

350 c⁄° 
TVÆue
 *
o
 = 
	`ödex2adr
(
L
, 
idx
);

351  !
	`l_isÁl£
(
o
);

352 
	}
}

355 
LUA_API
 c⁄° *
	$lua_tﬁ°rög
 (
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
) {

356 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

357 i‡(!
	`âis°rög
(
o
)) {

358 
	`lua_lock
(
L
);

359 i‡(!
	`luaV_to°rög
(
L
, 
o
)) {

360 i‡(
Àn
 !
NULL
) *len = 0;

361 
	`lua_u∆ock
(
L
);

362  
NULL
;

364 
	`luaC_checkGC
(
L
);

365 
o
 = 
	`ödex2adr
(
L
, 
idx
);

366 
	`lua_u∆ock
(
L
);

368 i‡(
Àn
 !
NULL
Ë*À¿
	`tsvÆue
(
o
)->len;

369  
	`svÆue
(
o
);

370 
	}
}

373 
LUA_API
 
size_t
 
	$lua_objÀn
 (
lua_Sèã
 *
L
, 
idx
) {

374 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

375 
	`ây≥
(
o
)) {

376 
LUA_TSTRING
:  
	`tsvÆue
(
o
)->
Àn
;

377 
LUA_TUSERDATA
:  
	`uvÆue
(
o
)->
Àn
;

378 
LUA_TTABLE
:  
	`luaH_gën
(
	`hvÆue
(
o
));

379 
LUA_TNUMBER
: {

380 
size_t
 
l
;

381 
	`lua_lock
(
L
);

382 
l
 = (
	`luaV_to°rög
(
L
, 
o
Ë? 
	`tsvÆue
(o)->
Àn
 : 0);

383 
	`lua_u∆ock
(
L
);

384  
l
;

388 
	}
}

391 
LUA_API
 
lua_CFun˘i⁄
 
	$lua_tocfun˘i⁄
 (
lua_Sèã
 *
L
, 
idx
) {

392 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

393  (!
	`iscfun˘i⁄
(
o
)Ë? 
NULL
 : 
	`˛vÆue
(o)->
c
.
f
;

394 
	}
}

399 
LUA_API
 *
	$lua_tou£rd©a
 (
lua_Sèã
 *
L
, 
idx
) {

400 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

401 
	`ây≥
(
o
)) {

402 
LUA_TUSERDATA
:  (
	`øwuvÆue
(
o
) + 1);

403 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
o
);

404 :  
NULL
;

406 
	}
}

409 
LUA_API
 
lua_Sèã
 *
	$lua_tŸhªad
 (
lua_Sèã
 *
L
, 
idx
) {

410 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

411  (!
	`âi°hªad
(
o
)Ë? 
NULL
 : 
	`thvÆue
(o);

412 
	}
}

415 
LUA_API
 c⁄° *
	$lua_t›oöãr
 (
lua_Sèã
 *
L
, 
idx
) {

416 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
idx
);

417 
	`ây≥
(
o
)) {

418 
LUA_TTABLE
:  
	`hvÆue
(
o
);

419 
LUA_TFUNCTION
:  
	`˛vÆue
(
o
);

420 
LUA_TTHREAD
:  
	`thvÆue
(
o
);

421 
LUA_TUSERDATA
:

422 
LUA_TLIGHTUSERDATA
:

423  
	`lua_tou£rd©a
(
L
, 
idx
);

424 :  
NULL
;

426 
	}
}

435 
LUA_API
 
	$lua_pushnû
 (
lua_Sèã
 *
L
) {

436 
	`lua_lock
(
L
);

437 
	`£äûvÆue
(
L
->
t›
);

438 
	`≠i_ö¸_t›
(
L
);

439 
	`lua_u∆ock
(
L
);

440 
	}
}

443 
LUA_API
 
	$lua_pushnumbî
 (
lua_Sèã
 *
L
, 
lua_Numbî
 
n
) {

444 
	`lua_lock
(
L
);

445 
	`£ävÆue
(
L
->
t›
, 
n
);

446 
	`≠i_ö¸_t›
(
L
);

447 
	`lua_u∆ock
(
L
);

448 
	}
}

451 
LUA_API
 
	$lua_pushöãgî
 (
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
) {

452 
	`lua_lock
(
L
);

453 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°_num
(
n
));

454 
	`≠i_ö¸_t›
(
L
);

455 
	`lua_u∆ock
(
L
);

456 
	}
}

459 
LUA_API
 
	$lua_pushl°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
Àn
) {

460 
	`lua_lock
(
L
);

461 
	`luaC_checkGC
(
L
);

462 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, 
s
, 
Àn
));

463 
	`≠i_ö¸_t›
(
L
);

464 
	`lua_u∆ock
(
L
);

465 
	}
}

468 
LUA_API
 
	$lua_push°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
) {

469 i‡(
s
 =
NULL
)

470 
	`lua_pushnû
(
L
);

472 
	`lua_pushl°rög
(
L
, 
s
, 
	`°æí
(s));

473 
	}
}

476 
LUA_API
 c⁄° *
	$lua_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

477 
va_li°
 
¨gp
) {

478 c⁄° *
ªt
;

479 
	`lua_lock
(
L
);

480 
	`luaC_checkGC
(
L
);

481 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

482 
	`lua_u∆ock
(
L
);

483  
ªt
;

484 
	}
}

487 
LUA_API
 c⁄° *
	$lua_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

488 c⁄° *
ªt
;

489 
va_li°
 
¨gp
;

490 
	`lua_lock
(
L
);

491 
	`luaC_checkGC
(
L
);

492 
	`va_°¨t
(
¨gp
, 
fmt
);

493 
ªt
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

494 
	`va_íd
(
¨gp
);

495 
	`lua_u∆ock
(
L
);

496  
ªt
;

497 
	}
}

500 
LUA_API
 
	$lua_pushc˛osuª
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
) {

501 
	`¥ötf
("debug: L->t› - L->°ack = %d, L->t› - L->ba£ = %d\n", 
L
->
t›
 - L->
°ack
, L->t› - L->
ba£
);

502 
Closuª
 *
˛
;

503 
	`lua_lock
(
L
);

504 
	`luaC_checkGC
(
L
);

505 
	`≠i_check√Àms
(
L
, 
n
);

506 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 
n
, 
	`gëcuºív
(L));

507 
˛
->
c
.
f
 = 
‚
;

508 
L
->
t›
 -
n
;

509 
n
--)

510 
	`£tobj2n
(
L
, &
˛
->
c
.
upvÆue
[
n
], L->
t›
+n);

511 
	`£t˛vÆue
(
L
, L->
t›
, 
˛
);

512 
	`lua_as£π
(
	`iswhôe
(
	`obj2gco
(
˛
)));

513 
	`≠i_ö¸_t›
(
L
);

514 
	`lua_u∆ock
(
L
);

515 
	}
}

518 
LUA_API
 
	$lua_pushboﬁón
 (
lua_Sèã
 *
L
, 
b
) {

519 
	`lua_lock
(
L
);

520 
	`£tbvÆue
(
L
->
t›
, (
b
 != 0));

521 
	`≠i_ö¸_t›
(
L
);

522 
	`lua_u∆ock
(
L
);

523 
	}
}

526 
LUA_API
 
	$lua_pushlightu£rd©a
 (
lua_Sèã
 *
L
, *
p
) {

527 
	`lua_lock
(
L
);

528 
	`£çvÆue
(
L
->
t›
, 
p
);

529 
	`≠i_ö¸_t›
(
L
);

530 
	`lua_u∆ock
(
L
);

531 
	}
}

534 
LUA_API
 
	$lua_pushthªad
 (
lua_Sèã
 *
L
) {

535 
	`lua_lock
(
L
);

536 
	`£âhvÆue
(
L
, L->
t›
, L);

537 
	`≠i_ö¸_t›
(
L
);

538 
	`lua_u∆ock
(
L
);

539  (
	`G
(
L
)->
maöthªad
 == L);

540 
	}
}

549 
LUA_API
 
	$lua_gëèbÀ
 (
lua_Sèã
 *
L
, 
idx
) {

550 
StkId
 
t
;

551 
	`lua_lock
(
L
);

552 
t
 = 
	`ödex2adr
(
L
, 
idx
);

553 
	`≠i_checkvÆidödex
(
L
, 
t
);

554 
	`luaV_gëèbÀ
(
L
, 
t
, L->
t›
 - 1, L->top - 1);

555 
	`lua_u∆ock
(
L
);

556 
	}
}

562 
LUA_API
 
	$lua_gëfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

563 
StkId
 
t
;

564 
TVÆue
 
key
;

565 
	`lua_lock
(
L
);

566 
t
 = 
	`ödex2adr
(
L
, 
idx
);

567 
	`≠i_checkvÆidödex
(
L
, 
t
);

568 
	`£tsvÆue
(
L
, &
key
, 
	`luaS_√w
(L, 
k
));

569 
	`luaV_gëèbÀ
(
L
, 
t
, &
key
, L->
t›
);

570 
	`≠i_ö¸_t›
(
L
);

571 
	`lua_u∆ock
(
L
);

572 
	}
}

577 
LUA_API
 
	$lua_øwgë
 (
lua_Sèã
 *
L
, 
idx
) {

578 
StkId
 
t
;

579 
	`lua_lock
(
L
);

580 
t
 = 
	`ödex2adr
(
L
, 
idx
);

581 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

582 
	`£tobj2s
(
L
, L->
t›
 - 1, 
	`luaH_gë
(
	`hvÆue
(
t
), L->top - 1));

583 
	`lua_u∆ock
(
L
);

584 
	}
}

587 
LUA_API
 
	$lua_øwgëi
 (
lua_Sèã
 *
L
, 
idx
, 
n
) {

588 
StkId
 
o
;

589 
	`lua_lock
(
L
);

590 
o
 = 
	`ödex2adr
(
L
, 
idx
);

591 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
));

592 
	`£tobj2s
(
L
, L->
t›
, 
	`luaH_gënum
(
	`hvÆue
(
o
), 
n
));

593 
	`≠i_ö¸_t›
(
L
);

594 
	`lua_u∆ock
(
L
);

595 
	}
}

598 
LUA_API
 
	$lua_¸óãèbÀ
 (
lua_Sèã
 *
L
, 
«ºay
, 
ƒec
) {

599 
	`lua_lock
(
L
);

600 
	`luaC_checkGC
(
L
);

601 
	`£thvÆue
(
L
, L->
t›
, 
	`luaH_√w
(L, 
«ºay
, 
ƒec
));

602 
	`≠i_ö¸_t›
(
L
);

603 
	`lua_u∆ock
(
L
);

604 
	}
}

607 
LUA_API
 
	$lua_gëmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

608 c⁄° 
TVÆue
 *
obj
;

609 
TabÀ
 *
mt
 = 
NULL
;

610 
ªs
;

611 
	`lua_lock
(
L
);

612 
obj
 = 
	`ödex2adr
(
L
, 
objödex
);

613 
	`ây≥
(
obj
)) {

614 
LUA_TTABLE
:

615 
mt
 = 
	`hvÆue
(
obj
)->
më©abÀ
;

617 
LUA_TUSERDATA
:

618 
mt
 = 
	`uvÆue
(
obj
)->
më©abÀ
;

621 
mt
 = 
	`G
(
L
)->mt[
	`ây≥
(
obj
)];

624 i‡(
mt
 =
NULL
)

625 
ªs
 = 0;

627 
	`£thvÆue
(
L
, L->
t›
, 
mt
);

628 
	`≠i_ö¸_t›
(
L
);

629 
ªs
 = 1;

631 
	`lua_u∆ock
(
L
);

632  
ªs
;

633 
	}
}

636 
LUA_API
 
	$lua_gë„nv
 (
lua_Sèã
 *
L
, 
idx
) {

637 
StkId
 
o
;

638 
	`lua_lock
(
L
);

639 
o
 = 
	`ödex2adr
(
L
, 
idx
);

640 
	`≠i_checkvÆidödex
(
L
, 
o
);

641 
	`ây≥
(
o
)) {

642 
LUA_TFUNCTION
:

643 
	`£thvÆue
(
L
, L->
t›
, 
	`˛vÆue
(
o
)->
c
.
ív
);

645 
LUA_TUSERDATA
:

646 
	`£thvÆue
(
L
, L->
t›
, 
	`uvÆue
(
o
)->
ív
);

648 
LUA_TTHREAD
:

649 
	`£tobj2s
(
L
, L->
t›
, 
	`gt
(
	`thvÆue
(
o
)));

652 
	`£äûvÆue
(
L
->
t›
);

655 
	`≠i_ö¸_t›
(
L
);

656 
	`lua_u∆ock
(
L
);

657 
	}
}

665 
LUA_API
 
	$lua_£âabÀ
 (
lua_Sèã
 *
L
, 
idx
) {

666 
StkId
 
t
;

667 
	`lua_lock
(
L
);

668 
	`≠i_check√Àms
(
L
, 2);

669 
t
 = 
	`ödex2adr
(
L
, 
idx
);

670 
	`≠i_checkvÆidödex
(
L
, 
t
);

671 
	`luaV_£âabÀ
(
L
, 
t
, L->
t›
 - 2, L->top - 1);

672 
L
->
t›
 -= 2;

673 
	`lua_u∆ock
(
L
);

674 
	}
}

679 
LUA_API
 
	$lua_£tfõld
 (
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
) {

680 
StkId
 
t
;

681 
TVÆue
 
key
;

682 
	`lua_lock
(
L
);

683 
	`≠i_check√Àms
(
L
, 1);

684 
t
 = 
	`ödex2adr
(
L
, 
idx
);

685 
	`≠i_checkvÆidödex
(
L
, 
t
);

686 
	`£tsvÆue
(
L
, &
key
, 
	`luaS_√w
(L, 
k
));

687 
	`luaV_£âabÀ
(
L
, 
t
, &
key
, L->
t›
 - 1);

688 
L
->
t›
--;

689 
	`lua_u∆ock
(
L
);

690 
	}
}

693 
LUA_API
 
	$lua_øw£t
 (
lua_Sèã
 *
L
, 
idx
) {

694 
StkId
 
t
;

695 
	`lua_lock
(
L
);

696 
	`≠i_check√Àms
(
L
, 2);

697 
t
 = 
	`ödex2adr
(
L
, 
idx
);

698 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

699 
	`£tobj2t
(
L
, 
	`luaH_£t
(L, 
	`hvÆue
(
t
), L->
t›
-2), L->top-1);

700 
	`luaC_b¨rõπ
(
L
, 
	`hvÆue
(
t
), L->
t›
-1);

701 
L
->
t›
 -= 2;

702 
	`lua_u∆ock
(
L
);

703 
	}
}

706 
LUA_API
 
	$lua_øw£ti
 (
lua_Sèã
 *
L
, 
idx
, 
n
) {

707 
StkId
 
o
;

708 
	`lua_lock
(
L
);

709 
	`≠i_check√Àms
(
L
, 1);

710 
o
 = 
	`ödex2adr
(
L
, 
idx
);

711 
	`≠i_check
(
L
, 
	`âi°abÀ
(
o
));

712 
	`£tobj2t
(
L
, 
	`luaH_£äum
(L, 
	`hvÆue
(
o
), 
n
), L->
t›
-1);

713 
	`luaC_b¨rõπ
(
L
, 
	`hvÆue
(
o
), L->
t›
-1);

714 
L
->
t›
--;

715 
	`lua_u∆ock
(
L
);

716 
	}
}

721 
LUA_API
 
	$lua_£tmë©abÀ
 (
lua_Sèã
 *
L
, 
objödex
) {

722 
TVÆue
 *
obj
;

723 
TabÀ
 *
mt
;

724 
	`lua_lock
(
L
);

725 
	`≠i_check√Àms
(
L
, 1);

726 
obj
 = 
	`ödex2adr
(
L
, 
objödex
);

727 
	`≠i_checkvÆidödex
(
L
, 
obj
);

728 i‡(
	`âi¢û
(
L
->
t›
 - 1))

729 
mt
 = 
NULL
;

731 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1));

732 
mt
 = 
	`hvÆue
(
L
->
t›
 - 1);

734 
	`ây≥
(
obj
)) {

735 
LUA_TTABLE
: {

736 
	`hvÆue
(
obj
)->
më©abÀ
 = 
mt
;

737 i‡(
mt
)

738 
	`luaC_objb¨rõπ
(
L
, 
	`hvÆue
(
obj
), 
mt
);

741 
LUA_TUSERDATA
: {

742 
	`uvÆue
(
obj
)->
më©abÀ
 = 
mt
;

743 i‡(
mt
)

744 
	`luaC_objb¨rõr
(
L
, 
	`øwuvÆue
(
obj
), 
mt
);

748 
	`G
(
L
)->
mt
[
	`ây≥
(
obj
)] = mt;

752 
L
->
t›
--;

753 
	`lua_u∆ock
(
L
);

755 
	}
}

758 
LUA_API
 
	$lua_£t„nv
 (
lua_Sèã
 *
L
, 
idx
) {

759 
StkId
 
o
;

760 
ªs
 = 1;

761 
	`lua_lock
(
L
);

762 
	`≠i_check√Àms
(
L
, 1);

763 
o
 = 
	`ödex2adr
(
L
, 
idx
);

764 
	`≠i_checkvÆidödex
(
L
, 
o
);

765 
	`≠i_check
(
L
, 
	`âi°abÀ
(L->
t›
 - 1));

766 
	`ây≥
(
o
)) {

767 
LUA_TFUNCTION
:

768 
	`˛vÆue
(
o
)->
c
.
ív
 = 
	`hvÆue
(
L
->
t›
 - 1);

770 
LUA_TUSERDATA
:

771 
	`uvÆue
(
o
)->
ív
 = 
	`hvÆue
(
L
->
t›
 - 1);

773 
LUA_TTHREAD
:

774 
	`£thvÆue
(
L
, 
	`gt
(
	`thvÆue
(
o
)), 
	`hvÆue
(L->
t›
 - 1));

777 
ªs
 = 0;

780 i‡(
ªs
Ë
	`luaC_objb¨rõr
(
L
, 
	`gcvÆue
(
o
), 
	`hvÆue
(L->
t›
 - 1));

781 
L
->
t›
--;

782 
	`lua_u∆ock
(
L
);

783  
ªs
;

784 
	}
}

792 
	#adju°ªsu…s
(
L
,
ƒes
) \

793 { i‡(
ƒes
 =
LUA_MULTRET
 && 
L
->
t›
 >L->
ci
->t›ËL->ci->t› = L->t›; }

	)

796 
	#checkªsu…s
(
L
,
«
,
ƒ
) \

797 
	`≠i_check
(
L
, (
ƒ
Ë=
LUA_MULTRET
 || (L->
ci
->
t›
 - L->t› >“rË- (
«
)))

	)

800 
LUA_API
 
	$lua_ˇŒ
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
) {

801 
StkId
 
func
;

802 
	`lua_lock
(
L
);

803 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

804 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

805 
func
 = 
L
->
t›
 - (
«rgs
+1);

806 
	`luaD_ˇŒ
(
L
, 
func
, 
ƒesu…s
);

807 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

808 
	`lua_u∆ock
(
L
);

809 
	}
}

816 
	sCÆlS
 {

817 
StkId
 
	mfunc
;

818 
	mƒesu…s
;

822 
	$f_ˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

823 
CÆlS
 *
c
 = 
	`ˇ°
(CÆlS *, 
ud
);

824 
	`luaD_ˇŒ
(
L
, 
c
->
func
, c->
ƒesu…s
);

825 
	}
}

829 
LUA_API
 
	$lua_pˇŒ
 (
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
) {

830 
CÆlS
 
c
;

831 
°©us
;

832 
±rdiff_t
 
func
;

833 
	`lua_lock
(
L
);

834 
	`≠i_check√Àms
(
L
, 
«rgs
+1);

835 
	`checkªsu…s
(
L
, 
«rgs
, 
ƒesu…s
);

836 i‡(
îrfunc
 == 0)

837 
func
 = 0;

839 
StkId
 
o
 = 
	`ödex2adr
(
L
, 
îrfunc
);

840 
	`≠i_checkvÆidödex
(
L
, 
o
);

841 
func
 = 
	`ßve°ack
(
L
, 
o
);

843 
c
.
func
 = 
L
->
t›
 - (
«rgs
+1);

844 
c
.
ƒesu…s
 =Çresults;

845 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_ˇŒ
, &
c
, 
	`ßve°ack
(L, c.
func
), func);

846 
	`adju°ªsu…s
(
L
, 
ƒesu…s
);

847 
	`lua_u∆ock
(
L
);

848  
°©us
;

849 
	}
}

856 
	sCCÆlS
 {

857 
lua_CFun˘i⁄
 
	mfunc
;

858 *
	mud
;

866 
	$f_CˇŒ
 (
lua_Sèã
 *
L
, *
ud
) {

867 
	`¥ötf
("debug: in f_Ccall\n");

868 
CCÆlS
 *
c
 = 
	`ˇ°
(CCÆlS *, 
ud
);

869 
Closuª
 *
˛
;

870 
˛
 = 
	`luaF_√wC˛osuª
(
L
, 0, 
	`gëcuºív
(L));

871 
˛
->
c
.
f
 = c->
func
;

878 
	`£t˛vÆue
(
L
, L->
t›
, 
˛
);

879 
	`≠i_ö¸_t›
(
L
);

880 
	`£çvÆue
(
L
->
t›
, 
c
->
ud
);

881 
	`≠i_ö¸_t›
(
L
);

882 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0);

883 
	}
}

893 
LUA_API
 
	$lua_˝ˇŒ
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
func
, *
ud
) {

894 
	`¥ötf
("debug: inÜua_cpcall\n");

895 
CCÆlS
 
c
;

896 
°©us
;

897 
	`lua_lock
(
L
);

898 
c
.
func
 = func;

899 
c
.
ud
 = ud;

900 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_CˇŒ
, &
c
, 
	`ßve°ack
(L, L->
t›
), 0);

901 
	`lua_u∆ock
(
L
);

902  
°©us
;

903 
	}
}

906 
LUA_API
 
	$lua_lﬂd
 (
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
d©a
,

907 c⁄° *
chunk«me
) {

908 
ZIO
 
z
;

909 
°©us
;

910 
	`lua_lock
(
L
);

911 i‡(!
chunk«me
) chunkname = "?";

912 
	`luaZ_öô
(
L
, &
z
, 
ªadî
, 
d©a
);

913 
°©us
 = 
	`luaD_¥Ÿe˘ed∑r£r
(
L
, &
z
, 
chunk«me
);

914 
	`lua_u∆ock
(
L
);

915  
°©us
;

916 
	}
}

919 
LUA_API
 
	$lua_dump
 (
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
) {

920 
°©us
;

921 
TVÆue
 *
o
;

922 
	`lua_lock
(
L
);

923 
	`≠i_check√Àms
(
L
, 1);

924 
o
 = 
L
->
t›
 - 1;

925 i‡(
	`isLfun˘i⁄
(
o
))

926 
°©us
 = 
	`luaU_dump
(
L
, 
	`˛vÆue
(
o
)->
l
.
p
, 
wrôî
, 
d©a
, 0);

928 
°©us
 = 1;

929 
	`lua_u∆ock
(
L
);

930  
°©us
;

931 
	}
}

934 
LUA_API
 
	$lua_°©us
 (
lua_Sèã
 *
L
) {

935  
L
->
°©us
;

936 
	}
}

943 
LUA_API
 
	$lua_gc
 (
lua_Sèã
 *
L
, 
wh©
, 
d©a
) {

944 
ªs
 = 0;

945 
globÆ_Sèã
 *
g
;

946 
	`lua_lock
(
L
);

947 
g
 = 
	`G
(
L
);

948 
wh©
) {

949 
LUA_GCSTOP
: {

950 
g
->
GCthªshﬁd
 = 
MAX_LUMEM
;

953 
LUA_GCRESTART
: {

954 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
;

957 
LUA_GCCOLLECT
: {

958 
	`luaC_fuŒgc
(
L
);

961 
LUA_GCCOUNT
: {

963 
ªs
 = 
	`ˇ°_öt
(
g
->
tŸÆbyãs
 >> 10);

966 
LUA_GCCOUNTB
: {

967 
ªs
 = 
	`ˇ°_öt
(
g
->
tŸÆbyãs
 & 0x3ff);

970 
LUA_GCSTEP
: {

971 
lu_mem
 
a
 = (
	`ˇ°
÷u_mem, 
d©a
) << 10);

972 i‡(
a
 <
g
->
tŸÆbyãs
)

973 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
 - 
a
;

975 
g
->
GCthªshﬁd
 = 0;

976 
g
->
GCthªshﬁd
 <g->
tŸÆbyãs
) {

977 
	`luaC_°ï
(
L
);

978 i‡(
g
->
gc°©e
 =
GCS∑u£
) {

979 
ªs
 = 1;

985 
LUA_GCSETPAUSE
: {

986 
ªs
 = 
g
->
g˝au£
;

987 
g
->
g˝au£
 = 
d©a
;

990 
LUA_GCSETSTEPMUL
: {

991 
ªs
 = 
g
->
gc°ïmul
;

992 
g
->
gc°ïmul
 = 
d©a
;

995 : 
ªs
 = -1;

997 
	`lua_u∆ock
(
L
);

998  
ªs
;

999 
	}
}

1008 
LUA_API
 
	$lua_îr‹
 (
lua_Sèã
 *
L
) {

1009 
	`lua_lock
(
L
);

1010 
	`≠i_check√Àms
(
L
, 1);

1011 
	`luaG_îr‹msg
(
L
);

1012 
	`lua_u∆ock
(
L
);

1014 
	}
}

1017 
LUA_API
 
	$lua_√xt
 (
lua_Sèã
 *
L
, 
idx
) {

1018 
StkId
 
t
;

1019 
m‹e
;

1020 
	`lua_lock
(
L
);

1021 
t
 = 
	`ödex2adr
(
L
, 
idx
);

1022 
	`≠i_check
(
L
, 
	`âi°abÀ
(
t
));

1023 
m‹e
 = 
	`luaH_√xt
(
L
, 
	`hvÆue
(
t
), L->
t›
 - 1);

1024 i‡(
m‹e
) {

1025 
	`≠i_ö¸_t›
(
L
);

1028 
L
->
t›
 -= 1;

1029 
	`lua_u∆ock
(
L
);

1030  
m‹e
;

1031 
	}
}

1034 
LUA_API
 
	$lua_c⁄ˇt
 (
lua_Sèã
 *
L
, 
n
) {

1035 
	`lua_lock
(
L
);

1036 
	`≠i_check√Àms
(
L
, 
n
);

1037 i‡(
n
 >= 2) {

1038 
	`luaC_checkGC
(
L
);

1039 
	`luaV_c⁄ˇt
(
L
, 
n
, 
	`ˇ°_öt
(L->
t›
 - L->
ba£
) - 1);

1040 
L
->
t›
 -(
n
-1);

1042 i‡(
n
 == 0) {

1043 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, "", 0));

1044 
	`≠i_ö¸_t›
(
L
);

1047 
	`lua_u∆ock
(
L
);

1048 
	}
}

1051 
LUA_API
 
lua_AŒoc
 
	$lua_gëÆlocf
 (
lua_Sèã
 *
L
, **
ud
) {

1052 
lua_AŒoc
 
f
;

1053 
	`lua_lock
(
L
);

1054 i‡(
ud
Ë*ud = 
	`G
(
L
)->ud;

1055 
f
 = 
	`G
(
L
)->
‰óŒoc
;

1056 
	`lua_u∆ock
(
L
);

1057  
f
;

1058 
	}
}

1061 
LUA_API
 
	$lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
) {

1062 
	`lua_lock
(
L
);

1063 
	`G
(
L
)->
ud
 = ud;

1064 
	`G
(
L
)->
‰óŒoc
 = 
f
;

1065 
	`lua_u∆ock
(
L
);

1066 
	}
}

1069 
LUA_API
 *
	$lua_√wu£rd©a
 (
lua_Sèã
 *
L
, 
size_t
 
size
) {

1070 
Ud©a
 *
u
;

1071 
	`lua_lock
(
L
);

1072 
	`luaC_checkGC
(
L
);

1073 
u
 = 
	`luaS_√wud©a
(
L
, 
size
, 
	`gëcuºív
(L));

1074 
	`£tuvÆue
(
L
, L->
t›
, 
u
);

1075 
	`≠i_ö¸_t›
(
L
);

1076 
	`lua_u∆ock
(
L
);

1077  
u
 + 1;

1078 
	}
}

1083 c⁄° *
	$aux_upvÆue
 (
StkId
 
fi
, 
n
, 
TVÆue
 **
vÆ
) {

1084 
Closuª
 *
f
;

1085 i‡(!
	`âisfun˘i⁄
(
fi
)Ë 
NULL
;

1086 
f
 = 
	`˛vÆue
(
fi
);

1087 i‡(
f
->
c
.
isC
) {

1088 i‡(!(1 <
n
 &&Ç <
f
->
c
.
nupvÆues
)Ë 
NULL
;

1089 *
vÆ
 = &
f
->
c
.
upvÆue
[
n
-1];

1093 
PrŸo
 *
p
 = 
f
->
l
.p;

1094 i‡(!(1 <
n
 &&Ç <
p
->
sizeupvÆues
)Ë 
NULL
;

1095 *
vÆ
 = 
f
->
l
.
upvÆs
[
n
-1]->
v
;

1096  
	`gë°r
(
p
->
upvÆues
[
n
-1]);

1098 
	}
}

1101 
LUA_API
 c⁄° *
	$lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1102 c⁄° *
«me
;

1103 
TVÆue
 *
vÆ
;

1104 
	`lua_lock
(
L
);

1105 
«me
 = 
	`aux_upvÆue
(
	`ödex2adr
(
L
, 
funcödex
), 
n
, &
vÆ
);

1106 i‡(
«me
) {

1107 
	`£tobj2s
(
L
, L->
t›
, 
vÆ
);

1108 
	`≠i_ö¸_t›
(
L
);

1110 
	`lua_u∆ock
(
L
);

1111  
«me
;

1112 
	}
}

1115 
LUA_API
 c⁄° *
	$lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
) {

1116 c⁄° *
«me
;

1117 
TVÆue
 *
vÆ
;

1118 
StkId
 
fi
;

1119 
	`lua_lock
(
L
);

1120 
fi
 = 
	`ödex2adr
(
L
, 
funcödex
);

1121 
	`≠i_check√Àms
(
L
, 1);

1122 
«me
 = 
	`aux_upvÆue
(
fi
, 
n
, &
vÆ
);

1123 i‡(
«me
) {

1124 
L
->
t›
--;

1125 
	`£tobj
(
L
, 
vÆ
, L->
t›
);

1126 
	`luaC_b¨rõr
(
L
, 
	`˛vÆue
(
fi
), L->
t›
);

1128 
	`lua_u∆ock
(
L
);

1129  
«me
;

1130 
	}
}

	@src/lapi.h

7 #i‚de‡
œpi_h


8 
	#œpi_h


	)

11 
	~"lobje˘.h
"

14 
LUAI_FUNC
 
luaA_pushobje˘
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
);

	@src/lauxlib.c

8 
	~<˘y≥.h
>

9 
	~<î∫o.h
>

10 
	~<°d¨g.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

20 
	#œuxlib_c


	)

21 
	#LUA_LIB


	)

23 
	~"lua.h
"

25 
	~"œuxlib.h
"

28 
	#FREELIST_REF
 0

	)

32 
	#abs_ödex
(
L
, 
i
Ë((iË> 0 || (iË<
LUA_REGISTRYINDEX
 ? (i) : \

33 
	`lua_gët›
(
L
Ë+ (
i
Ë+ 1)

	)

43 
LUALIB_API
 
	$luaL_¨gîr‹
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
exåamsg
) {

44 
lua_Debug
 
¨
;

45 i‡(!
	`lua_gë°ack
(
L
, 0, &
¨
))

46  
	`luaL_îr‹
(
L
, "badárgumíà#%d (%s)", 
«rg
, 
exåamsg
);

47 
	`lua_gëöfo
(
L
, "n", &
¨
);

48 i‡(
	`°rcmp
(
¨
.
«mewh©
, "method") == 0) {

49 
«rg
--;

50 i‡(
«rg
 == 0)

51  
	`luaL_îr‹
(
L
, "ˇŒög " 
LUA_QS
 " on bad self (%s)",

52 
¨
.
«me
, 
exåamsg
);

54 i‡(
¨
.
«me
 =
NULL
)

55 
¨
.
«me
 = "?";

56  
	`luaL_îr‹
(
L
, "badárgumíà#%dÅÿ" 
LUA_QS
 " (%s)",

57 
«rg
, 
¨
.
«me
, 
exåamsg
);

58 
	}
}

61 
LUALIB_API
 
	$luaL_ty≥º‹
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
) {

62 c⁄° *
msg
 = 
	`lua_pushf°rög
(
L
, "%sÉxpected, got %s",

63 
äame
, 
	`luaL_ty≥«me
(
L
, 
«rg
));

64  
	`luaL_¨gîr‹
(
L
, 
«rg
, 
msg
);

65 
	}
}

68 
	$èg_îr‹
 (
lua_Sèã
 *
L
, 
«rg
, 
èg
) {

69 
	`luaL_ty≥º‹
(
L
, 
«rg
, 
	`lua_ty≥«me
(L, 
èg
));

70 
	}
}

73 
LUALIB_API
 
	$luaL_whîe
 (
lua_Sèã
 *
L
, 
Àvñ
) {

74 
lua_Debug
 
¨
;

75 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
)) {

76 
	`lua_gëöfo
(
L
, "Sl", &
¨
);

77 i‡(
¨
.
cuºíéöe
 > 0) {

78 
	`lua_pushf°rög
(
L
, "%s:%d: ", 
¨
.
sh‹t_§c
,ár.
cuºíéöe
);

82 
	`lua_pushlôîÆ
(
L
, "");

83 
	}
}

86 
LUALIB_API
 
	$luaL_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

87 
va_li°
 
¨gp
;

88 
	`va_°¨t
(
¨gp
, 
fmt
);

89 
	`luaL_whîe
(
L
, 1);

90 
	`lua_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

91 
	`va_íd
(
¨gp
);

92 
	`lua_c⁄ˇt
(
L
, 2);

93  
	`lua_îr‹
(
L
);

94 
	}
}

99 
LUALIB_API
 
	$luaL_check›ti⁄
 (
lua_Sèã
 *
L
, 
«rg
, c⁄° *
def
,

100 c⁄° *c⁄° 
l°
[]) {

101 c⁄° *
«me
 = (
def
Ë? 
	`luaL_›t°rög
(
L
, 
«rg
, def) :

102 
	`luaL_check°rög
(
L
, 
«rg
);

103 
i
;

104 
i
=0; 
l°
[i]; i++)

105 i‡(
	`°rcmp
(
l°
[
i
], 
«me
) == 0)

106  
i
;

107  
	`luaL_¨gîr‹
(
L
, 
«rg
,

108 
	`lua_pushf°rög
(
L
, "övÆid o±i⁄ " 
LUA_QS
, 
«me
));

109 
	}
}

112 
LUALIB_API
 
	$luaL_√wmë©abÀ
 (
lua_Sèã
 *
L
, c⁄° *
äame
) {

113 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

114 i‡(!
	`lua_i¢û
(
L
, -1))

116 
	`lua_p›
(
L
, 1);

117 
	`lua_√wèbÀ
(
L
);

118 
	`lua_pushvÆue
(
L
, -1);

119 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

121 
	}
}

124 
LUALIB_API
 *
	$luaL_checkud©a
 (
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
) {

125 *
p
 = 
	`lua_tou£rd©a
(
L
, 
ud
);

126 i‡(
p
 !
NULL
) {

127 i‡(
	`lua_gëmë©abÀ
(
L
, 
ud
)) {

128 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
äame
);

129 i‡(
	`lua_øwequÆ
(
L
, -1, -2)) {

130 
	`lua_p›
(
L
, 2);

131  
p
;

135 
	`luaL_ty≥º‹
(
L
, 
ud
, 
äame
);

136  
NULL
;

137 
	}
}

140 
LUALIB_API
 
	$luaL_check°ack
 (
lua_Sèã
 *
L
, 
•a˚
, c⁄° *
mes
) {

141 i‡(!
	`lua_check°ack
(
L
, 
•a˚
))

142 
	`luaL_îr‹
(
L
, "°ack ovîÊow (%s)", 
mes
);

143 
	}
}

146 
LUALIB_API
 
	$luaL_checkty≥
 (
lua_Sèã
 *
L
, 
«rg
, 
t
) {

147 i‡(
	`lua_ty≥
(
L
, 
«rg
Ë!
t
)

148 
	`èg_îr‹
(
L
, 
«rg
, 
t
);

149 
	}
}

152 
LUALIB_API
 
	$luaL_check™y
 (
lua_Sèã
 *
L
, 
«rg
) {

153 i‡(
	`lua_ty≥
(
L
, 
«rg
Ë=
LUA_TNONE
)

154 
	`luaL_¨gîr‹
(
L
, 
«rg
, "valueÉxpected");

155 
	}
}

158 
LUALIB_API
 c⁄° *
	$luaL_checkl°rög
 (
lua_Sèã
 *
L
, 
«rg
, 
size_t
 *
Àn
) {

159 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
«rg
, 
Àn
);

160 i‡(!
s
Ë
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TSTRING
);

161  
s
;

162 
	}
}

165 
LUALIB_API
 c⁄° *
	$luaL_›é°rög
 (
lua_Sèã
 *
L
, 
«rg
,

166 c⁄° *
def
, 
size_t
 *
Àn
) {

167 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
«rg
)) {

168 i‡(
Àn
)

169 *
Àn
 = (
def
 ? 
	`°æí
(def) : 0);

170  
def
;

172  
	`luaL_checkl°rög
(
L
, 
«rg
, 
Àn
);

173 
	}
}

176 
LUALIB_API
 
lua_Numbî
 
	$luaL_checknumbî
 (
lua_Sèã
 *
L
, 
«rg
) {

177 
lua_Numbî
 
d
 = 
	`lua_t⁄umbî
(
L
, 
«rg
);

178 i‡(
d
 =0 && !
	`lua_i¢umbî
(
L
, 
«rg
))

179 
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TNUMBER
);

180  
d
;

181 
	}
}

184 
LUALIB_API
 
lua_Numbî
 
	$luaL_›äumbî
 (
lua_Sèã
 *
L
, 
«rg
, 
lua_Numbî
 
def
) {

185  
	`luaL_›t
(
L
, 
luaL_checknumbî
, 
«rg
, 
def
);

186 
	}
}

189 
LUALIB_API
 
lua_I¡egî
 
	$luaL_checköãgî
 (
lua_Sèã
 *
L
, 
«rg
) {

190 
lua_I¡egî
 
d
 = 
	`lua_toöãgî
(
L
, 
«rg
);

191 i‡(
d
 =0 && !
	`lua_i¢umbî
(
L
, 
«rg
))

192 
	`èg_îr‹
(
L
, 
«rg
, 
LUA_TNUMBER
);

193  
d
;

194 
	}
}

197 
LUALIB_API
 
lua_I¡egî
 
	$luaL_›töãgî
 (
lua_Sèã
 *
L
, 
«rg
,

198 
lua_I¡egî
 
def
) {

199  
	`luaL_›t
(
L
, 
luaL_checköãgî
, 
«rg
, 
def
);

200 
	}
}

203 
LUALIB_API
 
	$luaL_gëmëafõld
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

204 i‡(!
	`lua_gëmë©abÀ
(
L
, 
obj
))

206 
	`lua_push°rög
(
L
, 
evít
);

207 
	`lua_øwgë
(
L
, -2);

208 i‡(
	`lua_i¢û
(
L
, -1)) {

209 
	`lua_p›
(
L
, 2);

213 
	`lua_ªmove
(
L
, -2);

216 
	}
}

219 
LUALIB_API
 
	$luaL_ˇŒmëa
 (
lua_Sèã
 *
L
, 
obj
, c⁄° *
evít
) {

220 
obj
 = 
	`abs_ödex
(
L
, obj);

221 i‡(!
	`luaL_gëmëafõld
(
L
, 
obj
, 
evít
))

223 
	`lua_pushvÆue
(
L
, 
obj
);

224 
	`lua_ˇŒ
(
L
, 1, 1);

226 
	}
}

229 
LUALIB_API
 (
luaL_ªgi°î
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

230 c⁄° 
luaL_Reg
 *
l
) {

231 
	`luaI_›ílib
(
L
, 
lib«me
, 
l
, 0);

232 
	}
}

235 
	$libsize
 (c⁄° 
luaL_Reg
 *
l
) {

236 
size
 = 0;

237 ; 
l
->
«me
;Ü++Ë
size
++;

238  
size
;

239 
	}
}

291 
LUALIB_API
 
	$luaI_›ílib
 (
lua_Sèã
 *
L
, c⁄° *
lib«me
,

292 c⁄° 
luaL_Reg
 *
l
, 
nup
) {

293 i‡(
lib«me
) {

294 
size
 = 
	`libsize
(
l
);

296 
	`luaL_födèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED", 1);

297 
	`lua_gëfõld
(
L
, -1, 
lib«me
);

298 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

299 
	`lua_p›
(
L
, 1);

301 i‡(
	`luaL_födèbÀ
(
L
, 
LUA_GLOBALSINDEX
, 
lib«me
, 
size
Ë!
NULL
)

302 
	`luaL_îr‹
(
L
, "«mêc⁄Êi˘ f‹ moduÀ " 
LUA_QS
, 
lib«me
);

303 
	`lua_pushvÆue
(
L
, -1);

304 
	`lua_£tfõld
(
L
, -3, 
lib«me
);

306 
	`lua_ªmove
(
L
, -2);

307 
	`lua_ö£π
(
L
, -(
nup
+1));

309 ; 
l
->
«me
;Ü++) {

310 
i
;

311 
i
=0; i<
nup
; i++)

312 
	`lua_pushvÆue
(
L
, -
nup
);

313 
	`lua_pushc˛osuª
(
L
, 
l
->
func
, 
nup
);

314 
	`lua_£tfõld
(
L
, -(
nup
+2), 
l
->
«me
);

316 
	`lua_p›
(
L
, 
nup
);

317 
	}
}

327 #i‡
deföed
(
LUA_COMPAT_GETN
)

329 
	$checköt
 (
lua_Sèã
 *
L
, 
t››
) {

330 
n
 = (
	`lua_ty≥
(
L
, -1Ë=
LUA_TNUMBER
Ë? 
	`lua_toöãgî
(L, -1) : -1;

331 
	`lua_p›
(
L
, 
t››
);

332  
n
;

333 
	}
}

336 
	$gësizes
 (
lua_Sèã
 *
L
) {

337 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_SIZES");

338 i‡(
	`lua_i¢û
(
L
, -1)) {

339 
	`lua_p›
(
L
, 1);

340 
	`lua_√wèbÀ
(
L
);

341 
	`lua_pushvÆue
(
L
, -1);

342 
	`lua_£tmë©abÀ
(
L
, -2);

343 
	`lua_pushlôîÆ
(
L
, "kv");

344 
	`lua_£tfõld
(
L
, -2, "__mode");

345 
	`lua_pushvÆue
(
L
, -1);

346 
	`lua_£tfõld
(
L
, 
LUA_REGISTRYINDEX
, "LUA_SIZES");

348 
	}
}

351 
LUALIB_API
 
	$luaL_£ä
 (
lua_Sèã
 *
L
, 
t
, 
n
) {

352 
t
 = 
	`abs_ödex
(
L
,Å);

353 
	`lua_pushlôîÆ
(
L
, "n");

354 
	`lua_øwgë
(
L
, 
t
);

355 i‡(
	`checköt
(
L
, 1) >= 0) {

356 
	`lua_pushlôîÆ
(
L
, "n");

357 
	`lua_pushöãgî
(
L
, 
n
);

358 
	`lua_øw£t
(
L
, 
t
);

361 
	`gësizes
(
L
);

362 
	`lua_pushvÆue
(
L
, 
t
);

363 
	`lua_pushöãgî
(
L
, 
n
);

364 
	`lua_øw£t
(
L
, -3);

365 
	`lua_p›
(
L
, 1);

367 
	}
}

370 
LUALIB_API
 
	$luaL_gën
 (
lua_Sèã
 *
L
, 
t
) {

371 
n
;

372 
t
 = 
	`abs_ödex
(
L
,Å);

373 
	`lua_pushlôîÆ
(
L
, "n");

374 
	`lua_øwgë
(
L
, 
t
);

375 i‡((
n
 = 
	`checköt
(
L
, 1)) >= 0) Ç;

376 
	`gësizes
(
L
);

377 
	`lua_pushvÆue
(
L
, 
t
);

378 
	`lua_øwgë
(
L
, -2);

379 i‡((
n
 = 
	`checköt
(
L
, 2)) >= 0) Ç;

380  ()
	`lua_objÀn
(
L
, 
t
);

381 
	}
}

389 
LUALIB_API
 c⁄° *
	$luaL_gsub
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

390 c⁄° *
r
) {

391 c⁄° *
wûd
;

392 
size_t
 
l
 = 
	`°æí
(
p
);

393 
luaL_Buf„r
 
b
;

394 
	`luaL_bufföô
(
L
, &
b
);

395 (
wûd
 = 
	`°r°r
(
s
, 
p
)Ë!
NULL
) {

396 
	`luaL_addl°rög
(&
b
, 
s
, 
wûd
 - s);

397 
	`luaL_add°rög
(&
b
, 
r
);

398 
s
 = 
wûd
 + 
l
;

400 
	`luaL_add°rög
(&
b
, 
s
);

401 
	`luaL_pushªsu…
(&
b
);

402  
	`lua_to°rög
(
L
, -1);

403 
	}
}

410 
LUALIB_API
 c⁄° *
	$luaL_födèbÀ
 (
lua_Sèã
 *
L
, 
idx
,

411 c⁄° *
‚ame
, 
szhöt
) {

412 c⁄° *
e
;

413 
	`lua_pushvÆue
(
L
, 
idx
);

415 
e
 = 
	`°rchr
(
‚ame
, '.');

416 i‡(
e
 =
NULL
Ëê
‚ame
 + 
	`°æí
(fname);

417 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

418 
	`lua_øwgë
(
L
, -2);

419 i‡(
	`lua_i¢û
(
L
, -1)) {

420 
	`lua_p›
(
L
, 1);

421 
	`lua_¸óãèbÀ
(
L
, 0, (*
e
 ='.' ? 1 : 
szhöt
));

422 
	`lua_pushl°rög
(
L
, 
‚ame
, 
e
 - fname);

423 
	`lua_pushvÆue
(
L
, -2);

424 
	`lua_£âabÀ
(
L
, -4);

426 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

427 
	`lua_p›
(
L
, 2);

428  
‚ame
;

430 
	`lua_ªmove
(
L
, -2);

431 
‚ame
 = 
e
 + 1;

432 } *
e
 == '.');

433  
NULL
;

434 
	}
}

445 
	#bufÊí
(
B
Ë((B)->
p
 - (B)->
buf„r
)

	)

446 
	#buff‰ì
(
B
Ë((
size_t
)(
LUAL_BUFFERSIZE
 - 
	`bufÊí
(B)))

	)

448 
	#LIMIT
 (
LUA_MINSTACK
/2)

	)

451 
	$em±ybuf„r
 (
luaL_Buf„r
 *
B
) {

452 
size_t
 
l
 = 
	`bufÊí
(
B
);

453 i‡(
l
 == 0)  0;

455 
	`lua_pushl°rög
(
B
->
L
, B->
buf„r
, 
l
);

456 
B
->
p
 = B->
buf„r
;

457 
B
->
lvl
++;

460 
	}
}

463 
	$adju°°ack
 (
luaL_Buf„r
 *
B
) {

464 i‡(
B
->
lvl
 > 1) {

465 
lua_Sèã
 *
L
 = 
B
->L;

466 
togë
 = 1;

467 
size_t
 
t›Àn
 = 
	`lua_°æí
(
L
, -1);

469 
size_t
 
l
 = 
	`lua_°æí
(
L
, -(
togë
+1));

470 i‡(
B
->
lvl
 - 
togë
 + 1 >
LIMIT
 || 
t›Àn
 > 
l
) {

471 
t›Àn
 +
l
;

472 
togë
++;

475 } 
togë
 < 
B
->
lvl
);

476 
	`lua_c⁄ˇt
(
L
, 
togë
);

477 
B
->
lvl
 = B->lv»- 
togë
 + 1;

479 
	}
}

482 
LUALIB_API
 *
	$luaL_¥ïbuf„r
 (
luaL_Buf„r
 *
B
) {

483 i‡(
	`em±ybuf„r
(
B
))

484 
	`adju°°ack
(
B
);

485  
B
->
buf„r
;

486 
	}
}

489 
LUALIB_API
 
	$luaL_addl°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
) {

490 
l
--)

491 
	`luaL_addch¨
(
B
, *
s
++);

492 
	}
}

495 
LUALIB_API
 
	$luaL_add°rög
 (
luaL_Buf„r
 *
B
, c⁄° *
s
) {

496 
	`luaL_addl°rög
(
B
, 
s
, 
	`°æí
(s));

497 
	}
}

500 
LUALIB_API
 
	$luaL_pushªsu…
 (
luaL_Buf„r
 *
B
) {

501 
	`em±ybuf„r
(
B
);

502 
	`lua_c⁄ˇt
(
B
->
L
, B->
lvl
);

503 
B
->
lvl
 = 1;

504 
	}
}

507 
LUALIB_API
 
	$luaL_addvÆue
 (
luaL_Buf„r
 *
B
) {

508 
lua_Sèã
 *
L
 = 
B
->L;

509 
size_t
 
vl
;

510 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, -1, &
vl
);

511 i‡(
vl
 <
	`buff‰ì
(
B
)) {

512 
	`mem˝y
(
B
->
p
, 
s
, 
vl
);

513 
B
->
p
 +
vl
;

514 
	`lua_p›
(
L
, 1);

517 i‡(
	`em±ybuf„r
(
B
))

518 
	`lua_ö£π
(
L
, -2);

519 
B
->
lvl
++;

520 
	`adju°°ack
(
B
);

522 
	}
}

525 
LUALIB_API
 
	$luaL_bufföô
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
) {

526 
B
->
L
 = L;

527 
B
->
p
 = B->
buf„r
;

528 
B
->
lvl
 = 0;

529 
	}
}

534 
LUALIB_API
 
	$luaL_ªf
 (
lua_Sèã
 *
L
, 
t
) {

535 
ªf
;

536 
t
 = 
	`abs_ödex
(
L
,Å);

537 i‡(
	`lua_i¢û
(
L
, -1)) {

538 
	`lua_p›
(
L
, 1);

539  
LUA_REFNIL
;

541 
	`lua_øwgëi
(
L
, 
t
, 
FREELIST_REF
);

542 
ªf
 = ()
	`lua_toöãgî
(
L
, -1);

543 
	`lua_p›
(
L
, 1);

544 i‡(
ªf
 != 0) {

545 
	`lua_øwgëi
(
L
, 
t
, 
ªf
);

546 
	`lua_øw£ti
(
L
, 
t
, 
FREELIST_REF
);

549 
ªf
 = ()
	`lua_objÀn
(
L
, 
t
);

550 
ªf
++;

552 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

553  
ªf
;

554 
	}
}

557 
LUALIB_API
 
	$luaL_uƒef
 (
lua_Sèã
 *
L
, 
t
, 
ªf
) {

558 i‡(
ªf
 >= 0) {

559 
t
 = 
	`abs_ödex
(
L
,Å);

560 
	`lua_øwgëi
(
L
, 
t
, 
FREELIST_REF
);

561 
	`lua_øw£ti
(
L
, 
t
, 
ªf
);

562 
	`lua_pushöãgî
(
L
, 
ªf
);

563 
	`lua_øw£ti
(
L
, 
t
, 
FREELIST_REF
);

565 
	}
}

575 
	sLﬂdF
 {

576 
	mexåÆöe
;

577 
FILE
 *
	mf
;

578 
	mbuff
[
LUAL_BUFFERSIZE
];

579 } 
	tLﬂdF
;

582 c⁄° *
	$gëF
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

583 
LﬂdF
 *
lf
 = (LﬂdF *)
ud
;

584 ()
L
;

585 i‡(
lf
->
exåÆöe
) {

586 
lf
->
exåÆöe
 = 0;

587 *
size
 = 1;

590 i‡(
	`„of
(
lf
->
f
)Ë 
NULL
;

591 *
size
 = 
	`‰ód
(
lf
->
buff
, 1, ÷f->buff),Üf->
f
);

592  (*
size
 > 0Ë? 
lf
->
buff
 : 
NULL
;

593 
	}
}

596 
	$îrfûe
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
‚ameödex
) {

597 c⁄° *
£º
 = 
	`°ªº‹
(
î∫o
);

598 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 
‚ameödex
) + 1;

599 
	`lua_pushf°rög
(
L
, "ˇ¬Ÿ %†%s: %s", 
wh©
, 
fûíame
, 
£º
);

600 
	`lua_ªmove
(
L
, 
‚ameödex
);

601  
LUA_ERRFILE
;

602 
	}
}

615 
LUALIB_API
 
	$luaL_lﬂdfûe
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
) {

616 
	`¥ötf
("debug: i¿luaL_lﬂdfûe, fûíamê=%s\n", 
fûíame
);

617 
LﬂdF
 
lf
;

618 
°©us
, 
ªad°©us
;

619 
c
;

620 
‚ameödex
 = 
	`lua_gët›
(
L
) + 1;

621 
lf
.
exåÆöe
 = 0;

622 i‡(
fûíame
 =
NULL
) {

623 
	`lua_pushlôîÆ
(
L
, "=stdin");

624 
lf
.
f
 = 
°dö
;

627 
	`lua_pushf°rög
(
L
, "@%s", 
fûíame
);

628 
lf
.
f
 = 
	`f›í
(
fûíame
, "r");

629 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "›í", 
‚ameödex
);

631 
c
 = 
	`gëc
(
lf
.
f
);

632 i‡(
c
 == '#') {

633 
lf
.
exåÆöe
 = 1;

634 (
c
 = 
	`gëc
(
lf
.
f
)Ë!
EOF
 && c != '\n') ;

635 i‡(
c
 ='\n'Ë¯
	`gëc
(
lf
.
f
);

637 i‡(
c
 =
LUA_SIGNATURE
[0] && 
fûíame
) {

638 
lf
.
f
 = 
	`‰e›í
(
fûíame
, "rb",Üf.f);

639 i‡(
lf
.
f
 =
NULL
Ë 
	`îrfûe
(
L
, "ª›í", 
‚ameödex
);

641 (
c
 = 
	`gëc
(
lf
.
f
)Ë!
EOF
 && c !
LUA_SIGNATURE
[0]) ;

642 
lf
.
exåÆöe
 = 0;

644 
	`ungëc
(
c
, 
lf
.
f
);

645 
°©us
 = 
	`lua_lﬂd
(
L
, 
gëF
, &
lf
, 
	`lua_to°rög
(L, -1));

646 
ªad°©us
 = 
	`„º‹
(
lf
.
f
);

647 i‡(
fûíame
Ë
	`f˛o£
(
lf
.
f
);

648 i‡(
ªad°©us
) {

649 
	`lua_£â›
(
L
, 
‚ameödex
);

650  
	`îrfûe
(
L
, "ªad", 
‚ameödex
);

652 
	`lua_ªmove
(
L
, 
‚ameödex
);

653  
°©us
;

654 
	}
}

657 
	sLﬂdS
 {

658 c⁄° *
	ms
;

659 
size_t
 
	msize
;

660 } 
	tLﬂdS
;

663 c⁄° *
	$gëS
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

664 
LﬂdS
 *
ls
 = (LﬂdS *)
ud
;

665 ()
L
;

666 i‡(
ls
->
size
 =0Ë 
NULL
;

667 *
size
 = 
ls
->size;

668 
ls
->
size
 = 0;

669  
ls
->
s
;

670 
	}
}

673 
LUALIB_API
 
	$luaL_lﬂdbuf„r
 (
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
size
,

674 c⁄° *
«me
) {

675 
LﬂdS
 
ls
;

676 
ls
.
s
 = 
buff
;

677 
ls
.
size
 = size;

678  
	`lua_lﬂd
(
L
, 
gëS
, &
ls
, 
«me
);

679 
	}
}

682 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
) {

683  
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), s);

684 
	}
}

691 *
	$l_Æloc
 (*
ud
, *
±r
, 
size_t
 
osize
, size_à
nsize
) {

692 ()
ud
;

693 ()
osize
;

694 i‡(
nsize
 == 0) {

695 
	`‰ì
(
±r
);

696  
NULL
;

699  
	`ªÆloc
(
±r
, 
nsize
);

700 
	}
}

703 
	$∑nic
 (
lua_Sèã
 *
L
) {

704 ()
L
;

705 
	`Ârötf
(
°dîr
, "PANIC: unprotectedÉrror in callÅo Lua API (%s)\n",

706 
	`lua_to°rög
(
L
, -1));

708 
	}
}

711 
LUALIB_API
 
lua_Sèã
 *
	$luaL_√w°©e
 () {

712 
lua_Sèã
 *
L
 = 
	`lua_√w°©e
(
l_Æloc
, 
NULL
);

713 i‡(
L
Ë
	`lua_©∑nic
(L, &
∑nic
);

714  
L
;

715 
	}
}

	@src/lauxlib.h

8 #i‚de‡
œuxlib_h


9 
	#œuxlib_h


	)

12 
	~<°ddef.h
>

13 
	~<°dio.h
>

15 
	~"lua.h
"

18 #i‡
deföed
(
LUA_COMPAT_GETN
)

19 
LUALIB_API
 (
luaL_gën
Ë(
lua_Sèã
 *
L
, 
t
);

20 
LUALIB_API
 (
luaL_£ä
Ë(
lua_Sèã
 *
L
, 
t
, 
n
);

22 
	#luaL_gën
(
L
,
i
Ë(()
	`lua_objÀn
(L, i))

	)

23 
	#luaL_£ä
(
L
,
i
,
j
Ë(()0Ë

	)

26 #i‡
	`deföed
(
LUA_COMPAT_OPENLIB
)

27 
	#luaI_›ílib
 
luaL_›ílib


	)

32 
	#LUA_ERRFILE
 (
LUA_ERRERR
+1)

	)

35 
	sluaL_Reg
 {

36 c⁄° *
«me
;

37 
lua_CFun˘i⁄
 
func
;

38 } 
	tluaL_Reg
;

42 
LUALIB_API
 (
luaI_›ílib
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

43 c⁄° 
luaL_Reg
 *
l
, 
nup
);

44 
LUALIB_API
 (
luaL_ªgi°î
Ë(
lua_Sèã
 *
L
, c⁄° *
lib«me
,

45 c⁄° 
luaL_Reg
 *
l
);

46 
LUALIB_API
 (
luaL_gëmëafõld
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

47 
LUALIB_API
 (
luaL_ˇŒmëa
Ë(
lua_Sèã
 *
L
, 
obj
, c⁄° *
e
);

48 
LUALIB_API
 (
luaL_ty≥º‹
Ë(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
äame
);

49 
LUALIB_API
 (
luaL_¨gîr‹
Ë(
lua_Sèã
 *
L
, 
num¨g
, c⁄° *
exåamsg
);

50 
LUALIB_API
 c⁄° *(
luaL_checkl°rög
Ë(
lua_Sèã
 *
L
, 
numArg
,

51 
size_t
 *
l
);

52 
LUALIB_API
 c⁄° *(
luaL_›é°rög
Ë(
lua_Sèã
 *
L
, 
numArg
,

53 c⁄° *
def
, 
size_t
 *
l
);

54 
LUALIB_API
 
	$lua_Numbî
 (
luaL_checknumbî
Ë(
lua_Sèã
 *
L
, 
numArg
);

55 
LUALIB_API
 
	$lua_Numbî
 (
luaL_›äumbî
Ë(
lua_Sèã
 *
L
, 
nArg
, 
lua_Numbî
 
def
);

57 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_checköãgî
Ë(
lua_Sèã
 *
L
, 
numArg
);

58 
LUALIB_API
 
	$lua_I¡egî
 (
luaL_›töãgî
Ë(
lua_Sèã
 *
L
, 
nArg
,

59 
lua_I¡egî
 
def
);

61 
LUALIB_API
 (
luaL_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
, c⁄° *
msg
);

62 
LUALIB_API
 (
luaL_checkty≥
Ë(
lua_Sèã
 *
L
, 
«rg
, 
t
);

63 
LUALIB_API
 (
luaL_check™y
Ë(
lua_Sèã
 *
L
, 
«rg
);

65 
LUALIB_API
 (
luaL_√wmë©abÀ
Ë(
lua_Sèã
 *
L
, c⁄° *
äame
);

66 
LUALIB_API
 *(
luaL_checkud©a
Ë(
lua_Sèã
 *
L
, 
ud
, c⁄° *
äame
);

68 
LUALIB_API
 (
luaL_whîe
Ë(
lua_Sèã
 *
L
, 
lvl
);

69 
LUALIB_API
 (
luaL_îr‹
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

71 
LUALIB_API
 (
luaL_check›ti⁄
Ë(
lua_Sèã
 *
L
, 
«rg
, c⁄° *
def
,

72 c⁄° *c⁄° 
l°
[]);

74 
LUALIB_API
 (
luaL_ªf
Ë(
lua_Sèã
 *
L
, 
t
);

75 
LUALIB_API
 (
luaL_uƒef
Ë(
lua_Sèã
 *
L
, 
t
, 
ªf
);

77 
LUALIB_API
 (
luaL_lﬂdfûe
Ë(
lua_Sèã
 *
L
, c⁄° *
fûíame
);

78 
LUALIB_API
 (
luaL_lﬂdbuf„r
Ë(
lua_Sèã
 *
L
, c⁄° *
buff
, 
size_t
 
sz
,

79 c⁄° *
«me
);

80 
LUALIB_API
 (
luaL_lﬂd°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

82 
LUALIB_API
 
lua_Sèã
 *(
luaL_√w°©e
) ();

85 
LUALIB_API
 c⁄° *(
luaL_gsub
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
p
,

86 c⁄° *
r
);

88 
LUALIB_API
 c⁄° *(
luaL_födèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
,

89 c⁄° *
‚ame
, 
szhöt
);

100 
	#luaL_¨gcheck
(
L
, 
c⁄d
,
num¨g
,
exåamsg
) \

101 (()((
c⁄d
Ë|| 
	`luaL_¨gîr‹
(
L
, (
num¨g
), (
exåamsg
))))

	)

102 
	#luaL_check°rög
(
L
,
n
Ë(
	`luaL_checkl°rög
(L, (n), 
NULL
))

	)

103 
	#luaL_›t°rög
(
L
,
n
,
d
Ë(
	`luaL_›é°rög
(L, (n), (d), 
NULL
))

	)

104 
	#luaL_checköt
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

105 
	#luaL_›töt
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

106 
	#luaL_checkl⁄g
(
L
,
n
Ë(()
	`luaL_checköãgî
(L, (n)))

	)

107 
	#luaL_›é⁄g
(
L
,
n
,
d
Ë(()
	`luaL_›töãgî
(L, (n), (d)))

	)

109 
	#luaL_ty≥«me
(
L
,
i
Ë
	`lua_ty≥«me
(L, 
	`lua_ty≥
(L,(i)))

	)

111 
	#luaL_dofûe
(
L
, 
‚
) \

112 (
	`luaL_lﬂdfûe
(
L
, 
‚
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

114 
	#luaL_do°rög
(
L
, 
s
) \

115 (
	`luaL_lﬂd°rög
(
L
, 
s
Ë|| 
	`lua_pˇŒ
(L, 0, 
LUA_MULTRET
, 0))

	)

117 
	#luaL_gëmë©abÀ
(
L
,
n
Ë(
	`lua_gëfõld
(L, 
LUA_REGISTRYINDEX
, (n)))

	)

119 
	#luaL_›t
(
L
,
f
,
n
,
d
Ë(
	`lua_i¢⁄e‹nû
(L,“)Ë? (dË: 
	`f
(L,“)))

	)

129 
	sluaL_Buf„r
 {

130 *
p
;

131 
lvl
;

132 
lua_Sèã
 *
L
;

133 
buf„r
[
LUAL_BUFFERSIZE
];

134 } 
	tluaL_Buf„r
;

136 
	#luaL_addch¨
(
B
,
c
) \

137 (()((
B
)->
p
 < ((B)->
buf„r
+
LUAL_BUFFERSIZE
Ë|| 
	`luaL_¥ïbuf„r
(B)), \

138 (*(
B
)->
p
++ = ()(
c
)))

	)

141 
	#luaL_putch¨
(
B
,
c
Ë
	`luaL_addch¨
(B,c)

	)

143 
	#luaL_addsize
(
B
,
n
Ë((B)->
p
 +“))

	)

145 
LUALIB_API
 (
luaL_bufföô
Ë(
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
B
);

146 
LUALIB_API
 *(
luaL_¥ïbuf„r
Ë(
luaL_Buf„r
 *
B
);

147 
LUALIB_API
 (
luaL_addl°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
, 
size_t
 
l
);

148 
LUALIB_API
 (
luaL_add°rög
Ë(
luaL_Buf„r
 *
B
, c⁄° *
s
);

149 
LUALIB_API
 (
luaL_addvÆue
Ë(
luaL_Buf„r
 *
B
);

150 
LUALIB_API
 (
luaL_pushªsu…
Ë(
luaL_Buf„r
 *
B
);

159 
	#LUA_NOREF
 (-2)

	)

160 
	#LUA_REFNIL
 (-1)

	)

162 
	#lua_ªf
(
L
,
lock
Ë(÷ockË? 
	`luaL_ªf
(L, 
LUA_REGISTRYINDEX
) : \

163 (
	`lua_push°rög
(
L
, "u∆ockedÑe„ªn˚†¨êobsﬁëe"), 
	`lua_îr‹
(L), 0))

	)

165 
	#lua_uƒef
(
L
,
ªf
Ë
	`luaL_uƒef
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

167 
	#lua_gëªf
(
L
,
ªf
Ë
	`lua_øwgëi
(L, 
LUA_REGISTRYINDEX
, (ªf))

	)

170 
	#luaL_ªg
 
luaL_Reg


	)

	@src/lbaselib.c

9 
	~<˘y≥.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	#lba£lib_c


	)

15 
	#LUA_LIB


	)

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

31 
	$luaB_¥öt
 (
lua_Sèã
 *
L
) {

32 
n
 = 
	`lua_gët›
(
L
);

33 
i
;

34 
	`lua_gëglobÆ
(
L
, "tostring");

35 
i
=1; i<=
n
; i++) {

36 c⁄° *
s
;

37 
	`lua_pushvÆue
(
L
, -1);

38 
	`lua_pushvÆue
(
L
, 
i
);

39 
	`lua_ˇŒ
(
L
, 1, 1);

40 
s
 = 
	`lua_to°rög
(
L
, -1);

41 i‡(
s
 =
NULL
)

42  
	`luaL_îr‹
(
L
, 
	`LUA_QL
("tostring") " mustÑeturná stringÅo "

43 
	`LUA_QL
("print"));

44 i‡(
i
>1Ë
	`Âuts
("\t", 
°dout
);

45 
	`Âuts
(
s
, 
°dout
);

46 
	`lua_p›
(
L
, 1);

48 
	`Âuts
("\n", 
°dout
);

50 
	}
}

53 
	$luaB_t⁄umbî
 (
lua_Sèã
 *
L
) {

54 
ba£
 = 
	`luaL_›töt
(
L
, 2, 10);

55 i‡(
ba£
 == 10) {

56 
	`luaL_check™y
(
L
, 1);

57 i‡(
	`lua_i¢umbî
(
L
, 1)) {

58 
	`lua_pushnumbî
(
L
, 
	`lua_t⁄umbî
(L, 1));

63 c⁄° *
s1
 = 
	`luaL_check°rög
(
L
, 1);

64 *
s2
;

65 
n
;

66 
	`luaL_¨gcheck
(
L
, 2 <
ba£
 && base <= 36, 2, "base out ofÑange");

67 
n
 = 
	`°πoul
(
s1
, &
s2
, 
ba£
);

68 i‡(
s1
 !
s2
) {

69 
	`is•a˚
(()(*
s2
))) s2++;

70 i‡(*
s2
 == '\0') {

71 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
n
);

76 
	`lua_pushnû
(
L
);

78 
	}
}

81 
	$luaB_îr‹
 (
lua_Sèã
 *
L
) {

82 
Àvñ
 = 
	`luaL_›töt
(
L
, 2, 1);

83 
	`lua_£â›
(
L
, 1);

84 i‡(
	`lua_is°rög
(
L
, 1Ë&& 
Àvñ
 > 0) {

85 
	`luaL_whîe
(
L
, 
Àvñ
);

86 
	`lua_pushvÆue
(
L
, 1);

87 
	`lua_c⁄ˇt
(
L
, 2);

89  
	`lua_îr‹
(
L
);

90 
	}
}

93 
	$luaB_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

94 
	`luaL_check™y
(
L
, 1);

95 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

96 
	`lua_pushnû
(
L
);

99 
	`luaL_gëmëafõld
(
L
, 1, "__metatable");

101 
	}
}

104 
	$luaB_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

105 
t
 = 
	`lua_ty≥
(
L
, 2);

106 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

107 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

109 i‡(
	`luaL_gëmëafõld
(
L
, 1, "__metatable"))

110 
	`luaL_îr‹
(
L
, "cannot changeáÖrotected metatable");

111 
	`lua_£â›
(
L
, 2);

112 
	`lua_£tmë©abÀ
(
L
, 1);

114 
	}
}

117 
	$gëfunc
 (
lua_Sèã
 *
L
, 
›t
) {

118 i‡(
	`lua_isfun˘i⁄
(
L
, 1)Ë
	`lua_pushvÆue
(L, 1);

120 
lua_Debug
 
¨
;

121 
Àvñ
 = 
›t
 ? 
	`luaL_›töt
(
L
, 1, 1Ë: 
	`luaL_checköt
(L, 1);

122 
	`luaL_¨gcheck
(
L
, 
Àvñ
 >= 0, 1, "level must beÇon-negative");

123 i‡(
	`lua_gë°ack
(
L
, 
Àvñ
, &
¨
) == 0)

124 
	`luaL_¨gîr‹
(
L
, 1, "invalidÜevel");

125 
	`lua_gëöfo
(
L
, "f", &
¨
);

126 i‡(
	`lua_i¢û
(
L
, -1))

127 
	`luaL_îr‹
(
L
, "no functionÉnvironment forÅail callátÜevel %d",

128 
Àvñ
);

130 
	}
}

133 
	$luaB_gë„nv
 (
lua_Sèã
 *
L
) {

134 
	`gëfunc
(
L
, 1);

135 i‡(
	`lua_iscfun˘i⁄
(
L
, -1))

136 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

138 
	`lua_gë„nv
(
L
, -1);

140 
	}
}

143 
	$luaB_£t„nv
 (
lua_Sèã
 *
L
) {

144 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

145 
	`gëfunc
(
L
, 0);

146 
	`lua_pushvÆue
(
L
, 2);

147 i‡(
	`lua_i¢umbî
(
L
, 1Ë&& 
	`lua_t⁄umbî
(L, 1) == 0) {

149 
	`lua_pushthªad
(
L
);

150 
	`lua_ö£π
(
L
, -2);

151 
	`lua_£t„nv
(
L
, -2);

154 i‡(
	`lua_iscfun˘i⁄
(
L
, -2Ë|| 
	`lua_£t„nv
(L, -2) == 0)

155 
	`luaL_îr‹
(
L
,

156 
	`LUA_QL
("setfenv") " cannot changeÉnvironment of given object");

158 
	}
}

161 
	$luaB_øwequÆ
 (
lua_Sèã
 *
L
) {

162 
	`luaL_check™y
(
L
, 1);

163 
	`luaL_check™y
(
L
, 2);

164 
	`lua_pushboﬁón
(
L
, 
	`lua_øwequÆ
(L, 1, 2));

166 
	}
}

169 
	$luaB_øwgë
 (
lua_Sèã
 *
L
) {

170 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

171 
	`luaL_check™y
(
L
, 2);

172 
	`lua_£â›
(
L
, 2);

173 
	`lua_øwgë
(
L
, 1);

175 
	}
}

177 
	$luaB_øw£t
 (
lua_Sèã
 *
L
) {

178 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

179 
	`luaL_check™y
(
L
, 2);

180 
	`luaL_check™y
(
L
, 3);

181 
	`lua_£â›
(
L
, 3);

182 
	`lua_øw£t
(
L
, 1);

184 
	}
}

187 
	$luaB_gcöfo
 (
lua_Sèã
 *
L
) {

188 
	`lua_pushöãgî
(
L
, 
	`lua_gëgccou¡
(L));

190 
	}
}

193 
	$luaB_cﬁÀ˘g¨bage
 (
lua_Sèã
 *
L
) {

194 c⁄° *c⁄° 
›ts
[] = {"stop", "restart", "collect",

195 "cou¡", "°ï", "£çau£", "£t°ïmul", 
NULL
};

196 c⁄° 
›t¢um
[] = {
LUA_GCSTOP
, 
LUA_GCRESTART
, 
LUA_GCCOLLECT
,

197 
LUA_GCCOUNT
, 
LUA_GCSTEP
, 
LUA_GCSETPAUSE
, 
LUA_GCSETSTEPMUL
};

198 
o
 = 
	`luaL_check›ti⁄
(
L
, 1, "cﬁÀ˘", 
›ts
);

199 
ex
 = 
	`luaL_›töt
(
L
, 2, 0);

200 
ªs
 = 
	`lua_gc
(
L
, 
›t¢um
[
o
], 
ex
);

201 
›t¢um
[
o
]) {

202 
LUA_GCCOUNT
: {

203 
b
 = 
	`lua_gc
(
L
, 
LUA_GCCOUNTB
, 0);

204 
	`lua_pushnumbî
(
L
, 
ªs
 + ((
lua_Numbî
)
b
/1024));

207 
LUA_GCSTEP
: {

208 
	`lua_pushboﬁón
(
L
, 
ªs
);

212 
	`lua_pushnumbî
(
L
, 
ªs
);

216 
	}
}

219 
	$luaB_ty≥
 (
lua_Sèã
 *
L
) {

220 
	`luaL_check™y
(
L
, 1);

221 
	`lua_push°rög
(
L
, 
	`luaL_ty≥«me
(L, 1));

223 
	}
}

226 
	$luaB_√xt
 (
lua_Sèã
 *
L
) {

227 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

228 
	`lua_£â›
(
L
, 2);

229 i‡(
	`lua_√xt
(
L
, 1))

232 
	`lua_pushnû
(
L
);

235 
	}
}

238 
	$luaB_∑ús
 (
lua_Sèã
 *
L
) {

239 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

240 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

241 
	`lua_pushvÆue
(
L
, 1);

242 
	`lua_pushnû
(
L
);

244 
	}
}

247 
	$ùaúßux
 (
lua_Sèã
 *
L
) {

248 
i
 = 
	`luaL_checköt
(
L
, 2);

249 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

250 
i
++;

251 
	`lua_pushöãgî
(
L
, 
i
);

252 
	`lua_øwgëi
(
L
, 1, 
i
);

253  (
	`lua_i¢û
(
L
, -1)) ? 0 : 2;

254 
	}
}

257 
	$luaB_ùaús
 (
lua_Sèã
 *
L
) {

258 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

259 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

260 
	`lua_pushvÆue
(
L
, 1);

261 
	`lua_pushöãgî
(
L
, 0);

263 
	}
}

266 
	$lﬂd_aux
 (
lua_Sèã
 *
L
, 
°©us
) {

267 i‡(
°©us
 == 0)

270 
	`lua_pushnû
(
L
);

271 
	`lua_ö£π
(
L
, -2);

274 
	}
}

277 
	$luaB_lﬂd°rög
 (
lua_Sèã
 *
L
) {

278 
size_t
 
l
;

279 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

280 c⁄° *
chunk«me
 = 
	`luaL_›t°rög
(
L
, 2, 
s
);

281  
	`lﬂd_aux
(
L
, 
	`luaL_lﬂdbuf„r
(L, 
s
, 
l
, 
chunk«me
));

282 
	}
}

285 
	$luaB_lﬂdfûe
 (
lua_Sèã
 *
L
) {

286 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

287  
	`lﬂd_aux
(
L
, 
	`luaL_lﬂdfûe
(L, 
‚ame
));

288 
	}
}

297 c⁄° *
	$gíîic_ªadî
 (
lua_Sèã
 *
L
, *
ud
, 
size_t
 *
size
) {

298 ()
ud
;

299 
	`luaL_check°ack
(
L
, 2, "too manyÇested functions");

300 
	`lua_pushvÆue
(
L
, 1);

301 
	`lua_ˇŒ
(
L
, 0, 1);

302 i‡(
	`lua_i¢û
(
L
, -1)) {

303 *
size
 = 0;

304  
NULL
;

306 i‡(
	`lua_is°rög
(
L
, -1)) {

307 
	`lua_ª∂a˚
(
L
, 3);

308  
	`lua_tﬁ°rög
(
L
, 3, 
size
);

310 
	`luaL_îr‹
(
L
, "reader function mustÑeturná string");

311  
NULL
;

312 
	}
}

315 
	$luaB_lﬂd
 (
lua_Sèã
 *
L
) {

316 
°©us
;

317 c⁄° *
˙ame
 = 
	`luaL_›t°rög
(
L
, 2, "=(load)");

318 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

319 
	`lua_£â›
(
L
, 3);

320 
°©us
 = 
	`lua_lﬂd
(
L
, 
gíîic_ªadî
, 
NULL
, 
˙ame
);

321  
	`lﬂd_aux
(
L
, 
°©us
);

322 
	}
}

325 
	$luaB_dofûe
 (
lua_Sèã
 *
L
) {

326 c⁄° *
‚ame
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

327 
n
 = 
	`lua_gët›
(
L
);

328 i‡(
	`luaL_lﬂdfûe
(
L
, 
‚ame
Ë!0Ë
	`lua_îr‹
(L);

329 
	`lua_ˇŒ
(
L
, 0, 
LUA_MULTRET
);

330  
	`lua_gët›
(
L
Ë- 
n
;

331 
	}
}

334 
	$luaB_as£π
 (
lua_Sèã
 *
L
) {

335 
	`luaL_check™y
(
L
, 1);

336 i‡(!
	`lua_toboﬁón
(
L
, 1))

337  
	`luaL_îr‹
(
L
, "%s", 
	`luaL_›t°rög
(L, 2, "assertion failed!"));

338  
	`lua_gët›
(
L
);

339 
	}
}

342 
	$luaB_u≈ack
 (
lua_Sèã
 *
L
) {

343 
i
, 
e
, 
n
;

344 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

345 
i
 = 
	`luaL_›töt
(
L
, 2, 1);

346 
e
 = 
	`luaL_›t
(
L
, 
luaL_checköt
, 3, 
	`luaL_gën
(L, 1));

347 i‡(
i
 > 
e
)  0;

348 
n
 = 
e
 - 
i
 + 1;

349 i‡(
n
 <0 || !
	`lua_check°ack
(
L
,Ç))

350  
	`luaL_îr‹
(
L
, "too manyÑesultsÅo unpack");

351 
	`lua_øwgëi
(
L
, 1, 
i
);

352 
i
++ < 
e
)

353 
	`lua_øwgëi
(
L
, 1, 
i
);

354  
n
;

355 
	}
}

358 
	$luaB_£À˘
 (
lua_Sèã
 *
L
) {

359 
n
 = 
	`lua_gët›
(
L
);

360 i‡(
	`lua_ty≥
(
L
, 1Ë=
LUA_TSTRING
 && *
	`lua_to°rög
(L, 1) == '#') {

361 
	`lua_pushöãgî
(
L
, 
n
-1);

365 
i
 = 
	`luaL_checköt
(
L
, 1);

366 i‡(
i
 < 0Ëò
n
 + i;

367 i‡(
i
 > 
n
) i =Ç;

368 
	`luaL_¨gcheck
(
L
, 1 <
i
, 1, "index out ofÑange");

369  
n
 - 
i
;

371 
	}
}

374 
	$luaB_pˇŒ
 (
lua_Sèã
 *
L
) {

375 
°©us
;

376 
	`luaL_check™y
(
L
, 1);

377 
°©us
 = 
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(LË- 1, 
LUA_MULTRET
, 0);

378 
	`lua_pushboﬁón
(
L
, (
°©us
 == 0));

379 
	`lua_ö£π
(
L
, 1);

380  
	`lua_gët›
(
L
);

381 
	}
}

384 
	$luaB_xpˇŒ
 (
lua_Sèã
 *
L
) {

385 
°©us
;

386 
	`luaL_check™y
(
L
, 2);

387 
	`lua_£â›
(
L
, 2);

388 
	`lua_ö£π
(
L
, 1);

389 
°©us
 = 
	`lua_pˇŒ
(
L
, 0, 
LUA_MULTRET
, 1);

390 
	`lua_pushboﬁón
(
L
, (
°©us
 == 0));

391 
	`lua_ª∂a˚
(
L
, 1);

392  
	`lua_gët›
(
L
);

393 
	}
}

396 
	$luaB_to°rög
 (
lua_Sèã
 *
L
) {

397 
	`luaL_check™y
(
L
, 1);

398 i‡(
	`luaL_ˇŒmëa
(
L
, 1, "__tostring"))

400 
	`lua_ty≥
(
L
, 1)) {

401 
LUA_TNUMBER
:

402 
	`lua_push°rög
(
L
, 
	`lua_to°rög
(L, 1));

404 
LUA_TSTRING
:

405 
	`lua_pushvÆue
(
L
, 1);

407 
LUA_TBOOLEAN
:

408 
	`lua_push°rög
(
L
, (
	`lua_toboﬁón
(L, 1) ? "true" : "false"));

410 
LUA_TNIL
:

411 
	`lua_pushlôîÆ
(
L
, "nil");

414 
	`lua_pushf°rög
(
L
, "%s: %p", 
	`luaL_ty≥«me
(L, 1), 
	`lua_t›oöãr
(L, 1));

418 
	}
}

421 
	$luaB_√w¥oxy
 (
lua_Sèã
 *
L
) {

422 
	`lua_£â›
(
L
, 1);

423 
	`lua_√wu£rd©a
(
L
, 0);

424 i‡(
	`lua_toboﬁón
(
L
, 1) == 0)

426 i‡(
	`lua_isboﬁón
(
L
, 1)) {

427 
	`lua_√wèbÀ
(
L
);

428 
	`lua_pushvÆue
(
L
, -1);

429 
	`lua_pushboﬁón
(
L
, 1);

430 
	`lua_øw£t
(
L
, 
	`lua_upvÆueödex
(1));

433 
vÆid¥oxy
 = 0;

434 i‡(
	`lua_gëmë©abÀ
(
L
, 1)) {

435 
	`lua_øwgë
(
L
, 
	`lua_upvÆueödex
(1));

436 
vÆid¥oxy
 = 
	`lua_toboﬁón
(
L
, -1);

437 
	`lua_p›
(
L
, 1);

439 
	`luaL_¨gcheck
(
L
, 
vÆid¥oxy
, 1, "boolean orÖroxyÉxpected");

440 
	`lua_gëmë©abÀ
(
L
, 1);

442 
	`lua_£tmë©abÀ
(
L
, 2);

444 
	}
}

447 c⁄° 
luaL_Reg
 
	gba£_funcs
[] = {

448 {"as£π", 
luaB_as£π
},

449 {"cﬁÀ˘g¨bage", 
luaB_cﬁÀ˘g¨bage
},

450 {"dofûe", 
luaB_dofûe
},

451 {"îr‹", 
luaB_îr‹
},

452 {"gcöfo", 
luaB_gcöfo
},

453 {"gë„nv", 
luaB_gë„nv
},

454 {"gëmë©abÀ", 
luaB_gëmë©abÀ
},

455 {"lﬂdfûe", 
luaB_lﬂdfûe
},

456 {"lﬂd", 
luaB_lﬂd
},

457 {"lﬂd°rög", 
luaB_lﬂd°rög
},

458 {"√xt", 
luaB_√xt
},

459 {"pˇŒ", 
luaB_pˇŒ
},

460 {"¥öt", 
luaB_¥öt
},

461 {"øwequÆ", 
luaB_øwequÆ
},

462 {"øwgë", 
luaB_øwgë
},

463 {"øw£t", 
luaB_øw£t
},

464 {"£À˘", 
luaB_£À˘
},

465 {"£t„nv", 
luaB_£t„nv
},

466 {"£tmë©abÀ", 
luaB_£tmë©abÀ
},

467 {"t⁄umbî", 
luaB_t⁄umbî
},

468 {"to°rög", 
luaB_to°rög
},

469 {"ty≥", 
luaB_ty≥
},

470 {"u≈ack", 
luaB_u≈ack
},

471 {"xpˇŒ", 
luaB_xpˇŒ
},

472 {
NULL
, NULL}

482 
	#CO_RUN
 0

	)

483 
	#CO_SUS
 1

	)

484 
	#CO_NOR
 2

	)

485 
	#CO_DEAD
 3

	)

487 c⁄° *c⁄° 
	g°©«mes
[] =

490 
	$co°©us
 (
lua_Sèã
 *
L
,Üua_Sèã *
co
) {

491 i‡(
L
 =
co
Ë 
CO_RUN
;

492 
	`lua_°©us
(
co
)) {

493 
LUA_YIELD
:

494  
CO_SUS
;

496 
lua_Debug
 
¨
;

497 i‡(
	`lua_gë°ack
(
co
, 0, &
¨
) > 0)

498  
CO_NOR
;

499 i‡(
	`lua_gët›
(
co
) == 0)

500  
CO_DEAD
;

502  
CO_SUS
;

505  
CO_DEAD
;

507 
	}
}

510 
	$luaB_co°©us
 (
lua_Sèã
 *
L
) {

511 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

512 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

513 
	`lua_push°rög
(
L
, 
°©«mes
[
	`co°©us
(L, 
co
)]);

515 
	}
}

518 
	$auxªsume
 (
lua_Sèã
 *
L
,Üua_Sèã *
co
, 
«rg
) {

519 
°©us
 = 
	`co°©us
(
L
, 
co
);

520 i‡(!
	`lua_check°ack
(
co
, 
«rg
))

521 
	`luaL_îr‹
(
L
, "too manyárgumentsÅoÑesume");

522 i‡(
°©us
 !
CO_SUS
) {

523 
	`lua_pushf°rög
(
L
, "ˇ¬ŸÑesumê%†c‹outöe", 
°©«mes
[
°©us
]);

526 
	`lua_xmove
(
L
, 
co
, 
«rg
);

527 
	`lua_£éevñ
(
L
, 
co
);

528 
°©us
 = 
	`lua_ªsume
(
co
, 
«rg
);

529 i‡(
°©us
 =0 || sètu†=
LUA_YIELD
) {

530 
ƒes
 = 
	`lua_gët›
(
co
);

531 i‡(!
	`lua_check°ack
(
L
, 
ƒes
 + 1))

532 
	`luaL_îr‹
(
L
, "too manyÑesultsÅoÑesume");

533 
	`lua_xmove
(
co
, 
L
, 
ƒes
);

534  
ƒes
;

537 
	`lua_xmove
(
co
, 
L
, 1);

540 
	}
}

543 
	$luaB_c‹esume
 (
lua_Sèã
 *
L
) {

544 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 1);

545 
r
;

546 
	`luaL_¨gcheck
(
L
, 
co
, 1, "coroutineÉxpected");

547 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L) - 1);

548 i‡(
r
 < 0) {

549 
	`lua_pushboﬁón
(
L
, 0);

550 
	`lua_ö£π
(
L
, -2);

554 
	`lua_pushboﬁón
(
L
, 1);

555 
	`lua_ö£π
(
L
, -(
r
 + 1));

556  
r
 + 1;

558 
	}
}

561 
	$luaB_auxwøp
 (
lua_Sèã
 *
L
) {

562 
lua_Sèã
 *
co
 = 
	`lua_tŸhªad
(
L
, 
	`lua_upvÆueödex
(1));

563 
r
 = 
	`auxªsume
(
L
, 
co
, 
	`lua_gët›
(L));

564 i‡(
r
 < 0) {

565 i‡(
	`lua_is°rög
(
L
, -1)) {

566 
	`luaL_whîe
(
L
, 1);

567 
	`lua_ö£π
(
L
, -2);

568 
	`lua_c⁄ˇt
(
L
, 2);

570 
	`lua_îr‹
(
L
);

572  
r
;

573 
	}
}

576 
	$luaB_co¸óã
 (
lua_Sèã
 *
L
) {

577 
lua_Sèã
 *
NL
 = 
	`lua_√wthªad
(
L
);

578 
	`luaL_¨gcheck
(
L
, 
	`lua_isfun˘i⁄
(L, 1Ë&& !
	`lua_iscfun˘i⁄
(L, 1), 1,

580 
	`lua_pushvÆue
(
L
, 1);

581 
	`lua_xmove
(
L
, 
NL
, 1);

583 
	}
}

586 
	$luaB_cowøp
 (
lua_Sèã
 *
L
) {

587 
	`luaB_co¸óã
(
L
);

588 
	`lua_pushc˛osuª
(
L
, 
luaB_auxwøp
, 1);

590 
	}
}

593 
	$luaB_yõld
 (
lua_Sèã
 *
L
) {

594  
	`lua_yõld
(
L
, 
	`lua_gët›
(L));

595 
	}
}

598 
	$luaB_c‹u¬ög
 (
lua_Sèã
 *
L
) {

599 i‡(
	`lua_pushthªad
(
L
))

600 
	`lua_pushnû
(
L
);

602 
	}
}

605 c⁄° 
luaL_Reg
 
	gco_funcs
[] = {

606 {"¸óã", 
luaB_co¸óã
},

607 {"ªsume", 
luaB_c‹esume
},

608 {"ru¬ög", 
luaB_c‹u¬ög
},

609 {"°©us", 
luaB_co°©us
},

610 {"wøp", 
luaB_cowøp
},

611 {"yõld", 
luaB_yõld
},

612 {
NULL
, NULL}

621 
	$aux›í
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

622 
lua_CFun˘i⁄
 
f
,Üua_CFun˘i⁄ 
u
) {

623 
	`lua_pushcfun˘i⁄
(
L
, 
u
);

624 
	`lua_pushc˛osuª
(
L
, 
f
, 1);

625 
	`lua_£tfõld
(
L
, -2, 
«me
);

626 
	}
}

634 
	$ba£_›í
 (
lua_Sèã
 *
L
) {

636 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

637 
	`lua_£tglobÆ
(
L
, "_G");

639 
	`luaL_ªgi°î
(
L
, "_G", 
ba£_funcs
);

640 
	`lua_pushlôîÆ
(
L
, 
LUA_VERSION
);

641 
	`lua_£tglobÆ
(
L
, "_VERSION");

643 
	`aux›í
(
L
, "ùaús", 
luaB_ùaús
, 
ùaúßux
);

644 
	`aux›í
(
L
, "∑ús", 
luaB_∑ús
, 
luaB_√xt
);

646 
	`lua_¸óãèbÀ
(
L
, 0, 1);

647 
	`lua_pushvÆue
(
L
, -1);

648 
	`lua_£tmë©abÀ
(
L
, -2);

649 
	`lua_pushlôîÆ
(
L
, "kv");

650 
	`lua_£tfõld
(
L
, -2, "__mode");

651 
	`lua_pushc˛osuª
(
L
, 
luaB_√w¥oxy
, 1);

652 
	`lua_£tglobÆ
(
L
, "newproxy");

653 
	}
}

656 
LUALIB_API
 
	$lua›í_ba£
 (
lua_Sèã
 *
L
) {

657 
	`¥ötf
("debug: 1.luaopen_base\n");

658 
	`ba£_›í
(
L
);

659 
	`luaL_ªgi°î
(
L
, 
LUA_COLIBNAME
, 
co_funcs
);

661 
	}
}

	@src/lcode.c

8 
	~<°dlib.h
>

10 
	#lcode_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lcode.h
"

16 
	~"ldebug.h
"

17 
	~"ldo.h
"

18 
	~"lgc.h
"

19 
	~"Œex.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"Õ¨£r.h
"

24 
	~"…abÀ.h
"

27 
	#hasjumps
(
e
Ë(”)->
t
 !”)->
f
)

	)

30 
	$i¢umîÆ
(
expdesc
 *
e
) {

31  (
e
->
k
 =
VKNUM
 &&É->
t
 =
NO_JUMP
 &&É->
f
 == NO_JUMP);

32 
	}
}

35 
	$luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
) {

36 
In°ru˘i⁄
 *
¥evious
;

37 i‡(
fs
->
pc
 > fs->
œ°èrgë
) {

38 i‡(
fs
->
pc
 == 0) {

39 i‡(
‰om
 >
fs
->
«˘v¨
)

43 
¥evious
 = &
fs
->
f
->
code
[fs->
pc
-1];

44 i‡(
	`GET_OPCODE
(*
¥evious
Ë=
OP_LOADNIL
) {

45 
p‰om
 = 
	`GETARG_A
(*
¥evious
);

46 
±o
 = 
	`GETARG_B
(*
¥evious
);

47 i‡(
p‰om
 <
‰om
 && from <
±o
+1) {

48 i‡(
‰om
+
n
-1 > 
±o
)

49 
	`SETARG_B
(*
¥evious
, 
‰om
+
n
-1);

55 
	`luaK_codeABC
(
fs
, 
OP_LOADNIL
, 
‰om
, from+
n
-1, 0);

56 
	}
}

59 
	$luaK_jump
 (
FuncSèã
 *
fs
) {

60 
jpc
 = 
fs
->jpc;

61 
j
;

62 
fs
->
jpc
 = 
NO_JUMP
;

63 
j
 = 
	`luaK_codeAsBx
(
fs
, 
OP_JMP
, 0, 
NO_JUMP
);

64 
	`luaK_c⁄ˇt
(
fs
, &
j
, 
jpc
);

65  
j
;

66 
	}
}

69 
	$luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
) {

70 
	`luaK_codeABC
(
fs
, 
OP_RETURN
, 
fú°
, 
ƒë
+1, 0);

71 
	}
}

74 
	$c⁄djump
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
A
, 
B
, 
C
) {

75 
	`luaK_codeABC
(
fs
, 
›
, 
A
, 
B
, 
C
);

76  
	`luaK_jump
(
fs
);

77 
	}
}

80 
	$fixjump
 (
FuncSèã
 *
fs
, 
pc
, 
de°
) {

81 
In°ru˘i⁄
 *
jmp
 = &
fs
->
f
->
code
[
pc
];

82 
off£t
 = 
de°
-(
pc
+1);

83 
	`lua_as£π
(
de°
 !
NO_JUMP
);

84 i‡(
	`abs
(
off£t
Ë> 
MAXARG_sBx
)

85 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "control structureÅooÜong");

86 
	`SETARG_sBx
(*
jmp
, 
off£t
);

87 
	}
}

94 
	$luaK_gëœbñ
 (
FuncSèã
 *
fs
) {

95 
fs
->
œ°èrgë
 = fs->
pc
;

96  
fs
->
pc
;

97 
	}
}

102 
	$gëjump
 (
FuncSèã
 *
fs
, 
pc
) {

103 
off£t
 = 
	`GETARG_sBx
(
fs
->
f
->
code
[
pc
]);

104 i‡(
off£t
 =
NO_JUMP
)

105  
NO_JUMP
;

107  (
pc
+1)+
off£t
;

108 
	}
}

113 
In°ru˘i⁄
 *
	$gëjumpc⁄åﬁ
 (
FuncSèã
 *
fs
, 
pc
) {

114 
In°ru˘i⁄
 *
pi
 = &
fs
->
f
->
code
[
pc
];

116 i‡(
pc
 >1 && 
	`ã°TMode
(
	`GET_OPCODE
(*(
pi
-1))))

117  
pi
-1;

119  
pi
;

120 
	}
}

127 
	$√ed_vÆue
 (
FuncSèã
 *
fs
, 
li°
) {

128 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist)) {

129 
In°ru˘i⁄
 
i
 = *
	`gëjumpc⁄åﬁ
(
fs
, 
li°
);

130 i‡(
	`GET_OPCODE
(
i
Ë!
OP_TESTSET
)  1;

133 
	}
}

136 
	$∑tchã°ªg
 (
FuncSèã
 *
fs
, 
node
, 
ªg
) {

137 
In°ru˘i⁄
 *
i
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
node
);

138 i‡(
	`GET_OPCODE
(*
i
Ë!
OP_TESTSET
)

140 i‡(
ªg
 !
NO_REG
 &&Ñeg !
	`GETARG_B
(*
i
))

141 
	`SETARG_A
(*
i
, 
ªg
);

143 *
i
 = 
	`CREATE_ABC
(
OP_TEST
, 
	`GETARG_B
(*i), 0, 
	`GETARG_C
(*i));

146 
	}
}

149 
	$ªmovevÆues
 (
FuncSèã
 *
fs
, 
li°
) {

150 ; 
li°
 !
NO_JUMP
;Üi° = 
	`gëjump
(
fs
,Üist))

151 
	`∑tchã°ªg
(
fs
, 
li°
, 
NO_REG
);

152 
	}
}

155 
	$∑tchli°aux
 (
FuncSèã
 *
fs
, 
li°
, 
vèrgë
, 
ªg
,

156 
dèrgë
) {

157 
li°
 !
NO_JUMP
) {

158 
√xt
 = 
	`gëjump
(
fs
, 
li°
);

159 i‡(
	`∑tchã°ªg
(
fs
, 
li°
, 
ªg
))

160 
	`fixjump
(
fs
, 
li°
, 
vèrgë
);

162 
	`fixjump
(
fs
, 
li°
, 
dèrgë
);

163 
li°
 = 
√xt
;

165 
	}
}

168 
	$disch¨gejpc
 (
FuncSèã
 *
fs
) {

169 
	`∑tchli°aux
(
fs
, fs->
jpc
, fs->
pc
, 
NO_REG
, fs->pc);

170 
fs
->
jpc
 = 
NO_JUMP
;

171 
	}
}

174 
	$luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
) {

175 i‡(
èrgë
 =
fs
->
pc
)

176 
	`luaK_∑tchtohîe
(
fs
, 
li°
);

178 
	`lua_as£π
(
èrgë
 < 
fs
->
pc
);

179 
	`∑tchli°aux
(
fs
, 
li°
, 
èrgë
, 
NO_REG
,Åarget);

181 
	}
}

189 
	$luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
) {

190 
	`luaK_gëœbñ
(
fs
);

191 
	`luaK_c⁄ˇt
(
fs
, &fs->
jpc
, 
li°
);

192 
	}
}

195 
	$luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
) {

196 i‡(
l2
 =
NO_JUMP
) ;

197 i‡(*
l1
 =
NO_JUMP
)

198 *
l1
 = 
l2
;

200 
li°
 = *
l1
;

201 
√xt
;

202 (
√xt
 = 
	`gëjump
(
fs
, 
li°
)Ë!
NO_JUMP
)

203 
li°
 = 
√xt
;

204 
	`fixjump
(
fs
, 
li°
, 
l2
);

206 
	}
}

209 
	$luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
) {

211 
√w°ack
 = 
fs
->
‰ìªg
 + 
n
;

212 i‡(
√w°ack
 > 
fs
->
f
->
max°acksize
) {

213 i‡(
√w°ack
 >
MAXSTACK
)

214 
	`luaX_sy¡axîr‹
(
fs
->
ls
, "function orÉxpressionÅoo complex");

215 
fs
->
f
->
max°acksize
 = 
	`ˇ°_byã
(
√w°ack
);

217 
	}
}

220 
	$luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
) {

221 
	`luaK_check°ack
(
fs
, 
n
);

222 
fs
->
‰ìªg
 +
n
;

223 
	}
}

232 
	$‰ìªg
 (
FuncSèã
 *
fs
, 
ªg
) {

233 i‡(!
	`ISK
(
ªg
Ë&&Ñeg >
fs
->
«˘v¨
) {

234 
fs
->
‰ìªg
--;

235 
	`lua_as£π
(
ªg
 =
fs
->
‰ìªg
);

237 
	}
}

240 
	$‰ìexp
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

241 i‡(
e
->
k
 =
VNONRELOC
)

242 
	`‰ìªg
(
fs
, 
e
->
u
.
s
.
öfo
);

243 
	}
}

246 
	$addk
 (
FuncSèã
 *
fs
, 
TVÆue
 *
k
, TVÆuê*
v
) {

247 
lua_Sèã
 *
L
 = 
fs
->L;

248 
TVÆue
 *
idx
 = 
	`luaH_£t
(
L
, 
fs
->
h
, 
k
);

249 
PrŸo
 *
f
 = 
fs
->f;

250 
ﬁdsize
 = 
f
->
sizek
;

252 i‡(
	`âi¢umbî
(
idx
)) {

254 
	`lua_as£π
(
	`luaO_øwequÆObj
(&
fs
->
f
->
k
[
	`ˇ°_öt
(
	`nvÆue
(
idx
))], 
v
));

255  
	`ˇ°_öt
(
	`nvÆue
(
idx
));

258 
	`£ävÆue
(
idx
, 
	`ˇ°_num
(
fs
->
nk
));

259 
	`luaM_growve˘‹
(
L
, 
f
->
k
, 
fs
->
nk
, f->
sizek
, 
TVÆue
,

260 
MAXARG_Bx
, "constantÅable overflow");

261 
ﬁdsize
 < 
f
->
sizek
Ë
	`£äûvÆue
(&f->
k
[oldsize++]);

262 
	`£tobj
(
L
, &
f
->
k
[
fs
->
nk
], 
v
);

263 
	`luaC_b¨rõr
(
L
, 
f
, 
v
);

264  
fs
->
nk
++;

266 
	}
}

269 
	$luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
) {

270 
TVÆue
 
o
;

271 
	`£tsvÆue
(
fs
->
L
, &
o
, 
s
);

272  
	`addk
(
fs
, &
o
, &o);

273 
	}
}

276 
	$luaK_numbîK
 (
FuncSèã
 *
fs
, 
lua_Numbî
 
r
) {

277 
TVÆue
 
o
;

278 
	`£ävÆue
(&
o
, 
r
);

279  
	`addk
(
fs
, &
o
, &o);

280 
	}
}

283 
	$boﬁK
 (
FuncSèã
 *
fs
, 
b
) {

284 
TVÆue
 
o
;

285 
	`£tbvÆue
(&
o
, 
b
);

286  
	`addk
(
fs
, &
o
, &o);

287 
	}
}

290 
	$nûK
 (
FuncSèã
 *
fs
) {

291 
TVÆue
 
k
, 
v
;

292 
	`£äûvÆue
(&
v
);

294 
	`£thvÆue
(
fs
->
L
, &
k
, fs->
h
);

295  
	`addk
(
fs
, &
k
, &
v
);

296 
	}
}

299 
	$luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
) {

300 i‡(
e
->
k
 =
VCALL
) {

301 
	`SETARG_C
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
+1);

303 i‡(
e
->
k
 =
VVARARG
) {

304 
	`SETARG_B
(
	`gëcode
(
fs
, 
e
), 
ƒesu…s
+1);

305 
	`SETARG_A
(
	`gëcode
(
fs
, 
e
), fs->
‰ìªg
);

306 
	`luaK_ª£rvîegs
(
fs
, 1);

308 
	}
}

311 
	$luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

312 i‡(
e
->
k
 =
VCALL
) {

313 
e
->
k
 = 
VNONRELOC
;

314 
e
->
u
.
s
.
öfo
 = 
	`GETARG_A
(
	`gëcode
(
fs
,É));

316 i‡(
e
->
k
 =
VVARARG
) {

317 
	`SETARG_B
(
	`gëcode
(
fs
, 
e
), 2);

318 
e
->
k
 = 
VRELOCABLE
;

320 
	}
}

323 
	$luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

324 
e
->
k
) {

325 
VLOCAL
: {

326 
e
->
k
 = 
VNONRELOC
;

329 
VUPVAL
: {

330 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETUPVAL
, 0,É->u.s.info, 0);

331 
e
->
k
 = 
VRELOCABLE
;

334 
VGLOBAL
: {

335 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABx
(
fs
, 
OP_GETGLOBAL
, 0,É->u.s.info);

336 
e
->
k
 = 
VRELOCABLE
;

339 
VINDEXED
: {

340 
	`‰ìªg
(
fs
, 
e
->
u
.
s
.
aux
);

341 
	`‰ìªg
(
fs
, 
e
->
u
.
s
.
öfo
);

342 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_GETTABLE
, 0,É->u.s.öfo,É->u.s.
aux
);

343 
e
->
k
 = 
VRELOCABLE
;

346 
VVARARG
:

347 
VCALL
: {

348 
	`luaK_£t⁄îë
(
fs
, 
e
);

353 
	}
}

356 
	$code_œbñ
 (
FuncSèã
 *
fs
, 
A
, 
b
, 
jump
) {

357 
	`luaK_gëœbñ
(
fs
);

358  
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
A
, 
b
, 
jump
);

359 
	}
}

364 
	$disch¨ge2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

366 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

367 
e
->
k
) {

368 
VNIL
: {

369 
	`luaK_nû
(
fs
, 
ªg
, 1);

372 
VFALSE
: 
VTRUE
: {

373 
	`luaK_codeABC
(
fs
, 
OP_LOADBOOL
, 
ªg
, 
e
->
k
 =
VTRUE
, 0);

376 
VK
: {

377 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
e
->
u
.
s
.
öfo
);

380 
VKNUM
: {

381 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, 
ªg
, 
	`luaK_numbîK
(fs, 
e
->
u
.
nvÆ
));

384 
VRELOCABLE
: {

386 
In°ru˘i⁄
 *
pc
 = &
	`gëcode
(
fs
, 
e
);

387 
	`SETARG_A
(*
pc
, 
ªg
);

390 
VNONRELOC
: {

391 i‡(
ªg
 !
e
->
u
.
s
.
öfo
)

392 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, 
ªg
, 
e
->
u
.
s
.
öfo
, 0);

396 
	`lua_as£π
(
e
->
k
 =
VVOID
 ||É->k =
VJMP
);

400 
e
->
u
.
s
.
öfo
 = 
ªg
;

401 
e
->
k
 = 
VNONRELOC
;

402 
	}
}

405 
	$disch¨ge2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

406 i‡(
e
->
k
 !
VNONRELOC
) {

407 
	`luaK_ª£rvîegs
(
fs
, 1);

408 
	`disch¨ge2ªg
(
fs
, 
e
, fs->
‰ìªg
-1);

410 
	}
}

415 
	$exp2ªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ªg
) {

416 
	`disch¨ge2ªg
(
fs
, 
e
, 
ªg
);

417 i‡(
e
->
k
 =
VJMP
)

418 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
,É->
u
.
s
.
öfo
);

419 i‡(
	`hasjumps
(
e
)) {

420 
föÆ
;

421 
p_f
 = 
NO_JUMP
;

422 
p_t
 = 
NO_JUMP
;

423 i‡(
	`√ed_vÆue
(
fs
, 
e
->
t
Ë||Çìd_vÆue(fs,É->
f
)) {

424 
fj
 = (
e
->
k
 =
VJMP
Ë? 
NO_JUMP
 : 
	`luaK_jump
(
fs
);

425 
p_f
 = 
	`code_œbñ
(
fs
, 
ªg
, 0, 1);

426 
p_t
 = 
	`code_œbñ
(
fs
, 
ªg
, 1, 0);

427 
	`luaK_∑tchtohîe
(
fs
, 
fj
);

429 
föÆ
 = 
	`luaK_gëœbñ
(
fs
);

430 
	`∑tchli°aux
(
fs
, 
e
->
f
, 
föÆ
, 
ªg
, 
p_f
);

431 
	`∑tchli°aux
(
fs
, 
e
->
t
, 
föÆ
, 
ªg
, 
p_t
);

433 
e
->
f
 =É->
t
 = 
NO_JUMP
;

434 
e
->
u
.
s
.
öfo
 = 
ªg
;

435 
e
->
k
 = 
VNONRELOC
;

436 
	}
}

439 
	$luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

440 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

441 
	`‰ìexp
(
fs
, 
e
);

442 
	`luaK_ª£rvîegs
(
fs
, 1);

443 
	`exp2ªg
(
fs
, 
e
, fs->
‰ìªg
 - 1);

444 
	}
}

447 
	$luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

448 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

449 i‡(
e
->
k
 =
VNONRELOC
) {

450 i‡(!
	`hasjumps
(
e
)ËÉ->
u
.
s
.
öfo
;

451 i‡(
e
->
u
.
s
.
öfo
 >
fs
->
«˘v¨
) {

452 
	`exp2ªg
(
fs
, 
e
,É->
u
.
s
.
öfo
);

453  
e
->
u
.
s
.
öfo
;

456 
	`luaK_exp2√xåeg
(
fs
, 
e
);

457  
e
->
u
.
s
.
öfo
;

458 
	}
}

463 
	$luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

464 i‡(
	`hasjumps
(
e
))

465 
	`luaK_exp2™yªg
(
fs
, 
e
);

467 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

468 
	}
}

471 
	$luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

472 
	`luaK_exp2vÆ
(
fs
, 
e
);

473 
e
->
k
) {

474 
VKNUM
:

475 
VTRUE
:

476 
VFALSE
:

477 
VNIL
: {

478 i‡(
fs
->
nk
 <
MAXINDEXRK
) {

479 
e
->
u
.
s
.
öfo
 = (e->
k
 =
VNIL
Ë? 
	`nûK
(
fs
) :

480 (
e
->
k
 =
VKNUM
Ë? 
	`luaK_numbîK
(
fs
,É->
u
.
nvÆ
) :

481 
	`boﬁK
(
fs
, (
e
->
k
 =
VTRUE
));

482 
e
->
k
 = 
VK
;

483  
	`RKASK
(
e
->
u
.
s
.
öfo
);

487 
VK
: {

488 i‡(
e
->
u
.
s
.
öfo
 <
MAXINDEXRK
)

489  
	`RKASK
(
e
->
u
.
s
.
öfo
);

496  
	`luaK_exp2™yªg
(
fs
, 
e
);

497 
	}
}

500 
	$luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
ex
) {

501 
v¨
->
k
) {

502 
VLOCAL
: {

503 
	`‰ìexp
(
fs
, 
ex
);

504 
	`exp2ªg
(
fs
, 
ex
, 
v¨
->
u
.
s
.
öfo
);

507 
VUPVAL
: {

508 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
ex
);

509 
	`luaK_codeABC
(
fs
, 
OP_SETUPVAL
, 
e
, 
v¨
->
u
.
s
.
öfo
, 0);

512 
VGLOBAL
: {

513 
e
 = 
	`luaK_exp2™yªg
(
fs
, 
ex
);

514 
	`luaK_codeABx
(
fs
, 
OP_SETGLOBAL
, 
e
, 
v¨
->
u
.
s
.
öfo
);

517 
VINDEXED
: {

518 
e
 = 
	`luaK_exp2RK
(
fs
, 
ex
);

519 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
v¨
->
u
.
s
.
öfo
, v¨->u.s.
aux
, 
e
);

523 
	`lua_as£π
(0);

527 
	`‰ìexp
(
fs
, 
ex
);

528 
	}
}

531 
	$luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
) {

532 
func
;

533 
	`luaK_exp2™yªg
(
fs
, 
e
);

534 
	`‰ìexp
(
fs
, 
e
);

535 
func
 = 
fs
->
‰ìªg
;

536 
	`luaK_ª£rvîegs
(
fs
, 2);

537 
	`luaK_codeABC
(
fs
, 
OP_SELF
, 
func
, 
e
->
u
.
s
.
öfo
, 
	`luaK_exp2RK
(fs, 
key
));

538 
	`‰ìexp
(
fs
, 
key
);

539 
e
->
u
.
s
.
öfo
 = 
func
;

540 
e
->
k
 = 
VNONRELOC
;

541 
	}
}

544 
	$övîtjump
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

545 
In°ru˘i⁄
 *
pc
 = 
	`gëjumpc⁄åﬁ
(
fs
, 
e
->
u
.
s
.
öfo
);

546 
	`lua_as£π
(
	`ã°TMode
(
	`GET_OPCODE
(*
pc
)Ë&& GET_OPCODE(*pcË!
OP_TESTSET
 &&

547 
	`GET_OPCODE
(*
pc
Ë!
OP_TEST
);

548 
	`SETARG_A
(*
pc
, !(
	`GETARG_A
(*pc)));

549 
	}
}

552 
	$jump⁄c⁄d
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
c⁄d
) {

553 i‡(
e
->
k
 =
VRELOCABLE
) {

554 
In°ru˘i⁄
 
õ
 = 
	`gëcode
(
fs
, 
e
);

555 i‡(
	`GET_OPCODE
(
õ
Ë=
OP_NOT
) {

556 
fs
->
pc
--;

557  
	`c⁄djump
(
fs
, 
OP_TEST
, 
	`GETARG_B
(
õ
), 0, !
c⁄d
);

561 
	`disch¨ge2™yªg
(
fs
, 
e
);

562 
	`‰ìexp
(
fs
, 
e
);

563  
	`c⁄djump
(
fs
, 
OP_TESTSET
, 
NO_REG
, 
e
->
u
.
s
.
öfo
, 
c⁄d
);

564 
	}
}

567 
	$luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

568 
pc
;

569 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

570 
e
->
k
) {

571 
VK
: 
VKNUM
: 
VTRUE
: {

572 
pc
 = 
NO_JUMP
;

575 
VJMP
: {

576 
	`övîtjump
(
fs
, 
e
);

577 
pc
 = 
e
->
u
.
s
.
öfo
;

581 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 0);

585 
	`luaK_c⁄ˇt
(
fs
, &
e
->
f
, 
pc
);

586 
	`luaK_∑tchtohîe
(
fs
, 
e
->
t
);

587 
e
->
t
 = 
NO_JUMP
;

588 
	}
}

591 
	$luaK_goifÁl£
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

592 
pc
;

593 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

594 
e
->
k
) {

595 
VNIL
: 
VFALSE
: {

596 
pc
 = 
NO_JUMP
;

599 
VJMP
: {

600 
pc
 = 
e
->
u
.
s
.
öfo
;

604 
pc
 = 
	`jump⁄c⁄d
(
fs
, 
e
, 1);

608 
	`luaK_c⁄ˇt
(
fs
, &
e
->
t
, 
pc
);

609 
	`luaK_∑tchtohîe
(
fs
, 
e
->
f
);

610 
e
->
f
 = 
NO_JUMP
;

611 
	}
}

614 
	$codíŸ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
) {

615 
	`luaK_disch¨gev¨s
(
fs
, 
e
);

616 
e
->
k
) {

617 
VNIL
: 
VFALSE
: {

618 
e
->
k
 = 
VTRUE
;

621 
VK
: 
VKNUM
: 
VTRUE
: {

622 
e
->
k
 = 
VFALSE
;

625 
VJMP
: {

626 
	`övîtjump
(
fs
, 
e
);

629 
VRELOCABLE
:

630 
VNONRELOC
: {

631 
	`disch¨ge2™yªg
(
fs
, 
e
);

632 
	`‰ìexp
(
fs
, 
e
);

633 
e
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
OP_NOT
, 0,É->u.s.info, 0);

634 
e
->
k
 = 
VRELOCABLE
;

638 
	`lua_as£π
(0);

643 { 
ãmp
 = 
e
->
f
;É->‡e->
t
;É->t =Åemp; }

644 
	`ªmovevÆues
(
fs
, 
e
->
f
);

645 
	`ªmovevÆues
(
fs
, 
e
->
t
);

646 
	}
}

649 
	$luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
) {

650 
t
->
u
.
s
.
aux
 = 
	`luaK_exp2RK
(
fs
, 
k
);

651 
t
->
k
 = 
VINDEXED
;

652 
	}
}

655 
	$c⁄°fﬁdög
 (
OpCode
 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

656 
lua_Numbî
 
v1
, 
v2
, 
r
;

657 i‡(!
	`i¢umîÆ
(
e1
Ë|| !i¢umîÆ(
e2
))  0;

658 
v1
 = 
e1
->
u
.
nvÆ
;

659 
v2
 = 
e2
->
u
.
nvÆ
;

660 
›
) {

661 
OP_ADD
: 
r
 = 
	`luai_numadd
(
v1
, 
v2
); ;

662 
OP_SUB
: 
r
 = 
	`luai_numsub
(
v1
, 
v2
); ;

663 
OP_MUL
: 
r
 = 
	`luai_nummul
(
v1
, 
v2
); ;

664 
OP_DIV
:

665 i‡(
v2
 == 0)  0;

666 
r
 = 
	`luai_numdiv
(
v1
, 
v2
); ;

667 
OP_MOD
:

668 i‡(
v2
 == 0)  0;

669 
r
 = 
	`luai_nummod
(
v1
, 
v2
); ;

670 
OP_POW
: 
r
 = 
	`luai_numpow
(
v1
, 
v2
); ;

671 
OP_UNM
: 
r
 = 
	`luai_numunm
(
v1
); ;

672 
OP_LEN
:  0;

673 : 
	`lua_as£π
(0); 
r
 = 0; ;

675 i‡(
	`luai_numi¢™
(
r
))  0;

676 
e1
->
u
.
nvÆ
 = 
r
;

678 
	}
}

681 
	$codórôh
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

682 i‡(
	`c⁄°fﬁdög
(
›
, 
e1
, 
e2
))

685 
o2
 = (
›
 !
OP_UNM
 && o∞!
OP_LEN
Ë? 
	`luaK_exp2RK
(
fs
, 
e2
) : 0;

686 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

687 i‡(
o1
 > 
o2
) {

688 
	`‰ìexp
(
fs
, 
e1
);

689 
	`‰ìexp
(
fs
, 
e2
);

692 
	`‰ìexp
(
fs
, 
e2
);

693 
	`‰ìexp
(
fs
, 
e1
);

695 
e1
->
u
.
s
.
öfo
 = 
	`luaK_codeABC
(
fs
, 
›
, 0, 
o1
, 
o2
);

696 
e1
->
k
 = 
VRELOCABLE
;

698 
	}
}

701 
	$codecomp
 (
FuncSèã
 *
fs
, 
OpCode
 
›
, 
c⁄d
, 
expdesc
 *
e1
,

702 
expdesc
 *
e2
) {

703 
o1
 = 
	`luaK_exp2RK
(
fs
, 
e1
);

704 
o2
 = 
	`luaK_exp2RK
(
fs
, 
e2
);

705 
	`‰ìexp
(
fs
, 
e2
);

706 
	`‰ìexp
(
fs
, 
e1
);

707 i‡(
c⁄d
 =0 && 
›
 !
OP_EQ
) {

708 
ãmp
;

709 
ãmp
 = 
o1
; o1 = 
o2
; o2 =Åemp;

710 
c⁄d
 = 1;

712 
e1
->
u
.
s
.
öfo
 = 
	`c⁄djump
(
fs
, 
›
, 
c⁄d
, 
o1
, 
o2
);

713 
e1
->
k
 = 
VJMP
;

714 
	}
}

717 
	$luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
e
) {

718 
expdesc
 
e2
;

719 
e2
.
t
 =É2.
f
 = 
NO_JUMP
;É2.
k
 = 
VKNUM
;É2.
u
.
nvÆ
 = 0;

720 
›
) {

721 
OPR_MINUS
: {

722 i‡(!
	`i¢umîÆ
(
e
))

723 
	`luaK_exp2™yªg
(
fs
, 
e
);

724 
	`codórôh
(
fs
, 
OP_UNM
, 
e
, &
e2
);

727 
OPR_NOT
: 
	`codíŸ
(
fs
, 
e
); ;

728 
OPR_LEN
: {

729 
	`luaK_exp2™yªg
(
fs
, 
e
);

730 
	`codórôh
(
fs
, 
OP_LEN
, 
e
, &
e2
);

733 : 
	`lua_as£π
(0);

735 
	}
}

738 
	$luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
) {

739 
›
) {

740 
OPR_AND
: {

741 
	`luaK_goi·rue
(
fs
, 
v
);

744 
OPR_OR
: {

745 
	`luaK_goifÁl£
(
fs
, 
v
);

748 
OPR_CONCAT
: {

749 
	`luaK_exp2√xåeg
(
fs
, 
v
);

752 
OPR_ADD
: 
OPR_SUB
: 
OPR_MUL
: 
OPR_DIV
:

753 
OPR_MOD
: 
OPR_POW
: {

754 i‡(!
	`i¢umîÆ
(
v
)Ë
	`luaK_exp2RK
(
fs
, v);

758 
	`luaK_exp2RK
(
fs
, 
v
);

762 
	}
}

765 
	$luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
e1
,Éxpdes¯*
e2
) {

766 
›
) {

767 
OPR_AND
: {

768 
	`lua_as£π
(
e1
->
t
 =
NO_JUMP
);

769 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

770 
	`luaK_c⁄ˇt
(
fs
, &
e2
->
f
, 
e1
->f);

771 *
e1
 = *
e2
;

774 
OPR_OR
: {

775 
	`lua_as£π
(
e1
->
f
 =
NO_JUMP
);

776 
	`luaK_disch¨gev¨s
(
fs
, 
e2
);

777 
	`luaK_c⁄ˇt
(
fs
, &
e2
->
t
, 
e1
->t);

778 *
e1
 = *
e2
;

781 
OPR_CONCAT
: {

782 
	`luaK_exp2vÆ
(
fs
, 
e2
);

783 i‡(
e2
->
k
 =
VRELOCABLE
 && 
	`GET_OPCODE
(
	`gëcode
(
fs
,É2)Ë=
OP_CONCAT
) {

784 
	`lua_as£π
(
e1
->
u
.
s
.
öfo
 =
	`GETARG_B
(
	`gëcode
(
fs
, 
e2
))-1);

785 
	`‰ìexp
(
fs
, 
e1
);

786 
	`SETARG_B
(
	`gëcode
(
fs
, 
e2
), 
e1
->
u
.
s
.
öfo
);

787 
e1
->
k
 = 
VRELOCABLE
;É1->
u
.
s
.
öfo
 = 
e2
->u.s.info;

790 
	`luaK_exp2√xåeg
(
fs
, 
e2
);

791 
	`codórôh
(
fs
, 
OP_CONCAT
, 
e1
, 
e2
);

795 
OPR_ADD
: 
	`codórôh
(
fs
, 
OP_ADD
, 
e1
, 
e2
); ;

796 
OPR_SUB
: 
	`codórôh
(
fs
, 
OP_SUB
, 
e1
, 
e2
); ;

797 
OPR_MUL
: 
	`codórôh
(
fs
, 
OP_MUL
, 
e1
, 
e2
); ;

798 
OPR_DIV
: 
	`codórôh
(
fs
, 
OP_DIV
, 
e1
, 
e2
); ;

799 
OPR_MOD
: 
	`codórôh
(
fs
, 
OP_MOD
, 
e1
, 
e2
); ;

800 
OPR_POW
: 
	`codórôh
(
fs
, 
OP_POW
, 
e1
, 
e2
); ;

801 
OPR_EQ
: 
	`codecomp
(
fs
, 
OP_EQ
, 1, 
e1
, 
e2
); ;

802 
OPR_NE
: 
	`codecomp
(
fs
, 
OP_EQ
, 0, 
e1
, 
e2
); ;

803 
OPR_LT
: 
	`codecomp
(
fs
, 
OP_LT
, 1, 
e1
, 
e2
); ;

804 
OPR_LE
: 
	`codecomp
(
fs
, 
OP_LE
, 1, 
e1
, 
e2
); ;

805 
OPR_GT
: 
	`codecomp
(
fs
, 
OP_LT
, 0, 
e1
, 
e2
); ;

806 
OPR_GE
: 
	`codecomp
(
fs
, 
OP_LE
, 0, 
e1
, 
e2
); ;

807 : 
	`lua_as£π
(0);

809 
	}
}

812 
	$luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
) {

813 
fs
->
f
->
löeöfo
[fs->
pc
 - 1] = 
löe
;

814 
	}
}

817 
	$luaK_code
 (
FuncSèã
 *
fs
, 
In°ru˘i⁄
 
i
, 
löe
) {

818 
PrŸo
 *
f
 = 
fs
->f;

819 
	`disch¨gejpc
(
fs
);

821 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
code
, fs->
pc
, f->
sizecode
, 
In°ru˘i⁄
,

822 
MAX_INT
, "code size overflow");

823 
f
->
code
[
fs
->
pc
] = 
i
;

825 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
löeöfo
, fs->
pc
, f->
sizñöeöfo
, ,

826 
MAX_INT
, "code size overflow");

827 
f
->
löeöfo
[
fs
->
pc
] = 
löe
;

828  
fs
->
pc
++;

829 
	}
}

832 
	$luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
b
, 
c
) {

833 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABC
);

834 
	`lua_as£π
(
	`gëBMode
(
o
Ë!
OpArgN
 || 
b
 == 0);

835 
	`lua_as£π
(
	`gëCMode
(
o
Ë!
OpArgN
 || 
c
 == 0);

836  
	`luaK_code
(
fs
, 
	`CREATE_ABC
(
o
, 
a
, 
b
, 
c
), fs->
ls
->
œ°löe
);

837 
	}
}

842 
	$luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
a
, 
bc
) {

843 
	`lua_as£π
(
	`gëOpMode
(
o
Ë=
iABx
 || gëOpMode(oË=
iAsBx
);

844 
	`lua_as£π
(
	`gëCMode
(
o
Ë=
OpArgN
);

845  
	`luaK_code
(
fs
, 
	`CREATE_ABx
(
o
, 
a
, 
bc
), fs->
ls
->
œ°löe
);

846 
	}
}

849 
	$luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
) {

850 
c
 = (
√Àms
 - 1)/
LFIELDS_PER_FLUSH
 + 1;

851 
b
 = (
to°‹e
 =
LUA_MULTRET
) ? 0 :Åostore;

852 
	`lua_as£π
(
to°‹e
 != 0);

853 i‡(
c
 <
MAXARG_C
)

854 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 
c
);

856 
	`luaK_codeABC
(
fs
, 
OP_SETLIST
, 
ba£
, 
b
, 0);

857 
	`luaK_code
(
fs
, 
	`ˇ°
(
In°ru˘i⁄
, 
c
), fs->
ls
->
œ°löe
);

859 
fs
->
‰ìªg
 = 
ba£
 + 1;

860 
	}
}

	@src/lcode.h

7 #i‚de‡
lcode_h


8 
	#lcode_h


	)

10 
	~"Œex.h
"

11 
	~"lobje˘.h
"

12 
	~"l›codes.h
"

13 
	~"Õ¨£r.h
"

20 
	#NO_JUMP
 (-1)

	)

26 
	eBöO¥
 {

27 
	mOPR_ADD
, 
	mOPR_SUB
, 
	mOPR_MUL
, 
	mOPR_DIV
, 
	mOPR_MOD
, 
	mOPR_POW
,

28 
	mOPR_CONCAT
,

29 
	mOPR_NE
, 
	mOPR_EQ
,

30 
	mOPR_LT
, 
	mOPR_LE
, 
	mOPR_GT
, 
	mOPR_GE
,

31 
	mOPR_AND
, 
	mOPR_OR
,

32 
	mOPR_NOBINOPR


33 } 
	tBöO¥
;

36 
	eUnO¥
 { 
	mOPR_MINUS
, 
	mOPR_NOT
, 
	mOPR_LEN
, 
	mOPR_NOUNOPR
 } 
	tUnO¥
;

39 
	#gëcode
(
fs
,
e
Ë((fs)->
f
->
code
[”)->
u
.
s
.
öfo
])

	)

41 
	#luaK_codeAsBx
(
fs
,
o
,
A
,
sBx
Ë
	`luaK_codeABx
(fs,o,A,(sBx)+
MAXARG_sBx
)

	)

43 
	#luaK_£tmu…ªt
(
fs
,
e
Ë
	`luaK_£åëu∫s
(fs,É, 
LUA_MULTRET
)

	)

45 
LUAI_FUNC
 
luaK_codeABx
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
Bx
);

46 
LUAI_FUNC
 
luaK_codeABC
 (
FuncSèã
 *
fs
, 
OpCode
 
o
, 
A
, 
B
, 
C
);

47 
LUAI_FUNC
 
luaK_fixlöe
 (
FuncSèã
 *
fs
, 
löe
);

48 
LUAI_FUNC
 
luaK_nû
 (
FuncSèã
 *
fs
, 
‰om
, 
n
);

49 
LUAI_FUNC
 
luaK_ª£rvîegs
 (
FuncSèã
 *
fs
, 
n
);

50 
LUAI_FUNC
 
luaK_check°ack
 (
FuncSèã
 *
fs
, 
n
);

51 
LUAI_FUNC
 
luaK_°rögK
 (
FuncSèã
 *
fs
, 
TSåög
 *
s
);

52 
LUAI_FUNC
 
luaK_numbîK
 (
FuncSèã
 *
fs
, 
lua_Numbî
 
r
);

53 
LUAI_FUNC
 
luaK_disch¨gev¨s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

54 
LUAI_FUNC
 
luaK_exp2™yªg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

55 
LUAI_FUNC
 
luaK_exp2√xåeg
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

56 
LUAI_FUNC
 
luaK_exp2vÆ
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

57 
LUAI_FUNC
 
luaK_exp2RK
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

58 
LUAI_FUNC
 
luaK_£lf
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
,Éxpdes¯*
key
);

59 
LUAI_FUNC
 
luaK_ödexed
 (
FuncSèã
 *
fs
, 
expdesc
 *
t
,Éxpdes¯*
k
);

60 
LUAI_FUNC
 
luaK_goi·rue
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

61 
LUAI_FUNC
 
luaK_°‹ev¨
 (
FuncSèã
 *
fs
, 
expdesc
 *
v¨
,Éxpdes¯*
e
);

62 
LUAI_FUNC
 
luaK_£åëu∫s
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
, 
ƒesu…s
);

63 
LUAI_FUNC
 
luaK_£t⁄îë
 (
FuncSèã
 *
fs
, 
expdesc
 *
e
);

64 
LUAI_FUNC
 
luaK_jump
 (
FuncSèã
 *
fs
);

65 
LUAI_FUNC
 
luaK_ªt
 (
FuncSèã
 *
fs
, 
fú°
, 
ƒë
);

66 
LUAI_FUNC
 
luaK_∑tchli°
 (
FuncSèã
 *
fs
, 
li°
, 
èrgë
);

67 
LUAI_FUNC
 
luaK_∑tchtohîe
 (
FuncSèã
 *
fs
, 
li°
);

68 
LUAI_FUNC
 
luaK_c⁄ˇt
 (
FuncSèã
 *
fs
, *
l1
, 
l2
);

69 
LUAI_FUNC
 
luaK_gëœbñ
 (
FuncSèã
 *
fs
);

70 
LUAI_FUNC
 
luaK_¥efix
 (
FuncSèã
 *
fs
, 
UnO¥
 
›
, 
expdesc
 *
v
);

71 
LUAI_FUNC
 
luaK_öfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v
);

72 
LUAI_FUNC
 
luaK_posfix
 (
FuncSèã
 *
fs
, 
BöO¥
 
›
, 
expdesc
 *
v1
,Éxpdes¯*
v2
);

73 
LUAI_FUNC
 
luaK_£éi°
 (
FuncSèã
 *
fs
, 
ba£
, 
√Àms
, 
to°‹e
);

	@src/ldblib.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#ldblib_c


	)

13 
	#LUA_LIB


	)

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

22 
	$db_gëªgi°ry
 (
lua_Sèã
 *
L
) {

23 
	`lua_pushvÆue
(
L
, 
LUA_REGISTRYINDEX
);

25 
	}
}

28 
	$db_gëmë©abÀ
 (
lua_Sèã
 *
L
) {

29 
	`luaL_check™y
(
L
, 1);

30 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

31 
	`lua_pushnû
(
L
);

34 
	}
}

37 
	$db_£tmë©abÀ
 (
lua_Sèã
 *
L
) {

38 
t
 = 
	`lua_ty≥
(
L
, 2);

39 
	`luaL_¨gcheck
(
L
, 
t
 =
LUA_TNIL
 ||Å =
LUA_TTABLE
, 2,

41 
	`lua_£â›
(
L
, 2);

42 
	`lua_pushboﬁón
(
L
, 
	`lua_£tmë©abÀ
(L, 1));

44 
	}
}

47 
	$db_gë„nv
 (
lua_Sèã
 *
L
) {

48 
	`luaL_check™y
(
L
, 1);

49 
	`lua_gë„nv
(
L
, 1);

51 
	}
}

54 
	$db_£t„nv
 (
lua_Sèã
 *
L
) {

55 
	`luaL_checkty≥
(
L
, 2, 
LUA_TTABLE
);

56 
	`lua_£â›
(
L
, 2);

57 i‡(
	`lua_£t„nv
(
L
, 1) == 0)

58 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("setfenv")

61 
	}
}

64 
	$£âabss
 (
lua_Sèã
 *
L
, c⁄° *
i
, c⁄° *
v
) {

65 
	`lua_push°rög
(
L
, 
v
);

66 
	`lua_£tfõld
(
L
, -2, 
i
);

67 
	}
}

70 
	$£âabsi
 (
lua_Sèã
 *
L
, c⁄° *
i
, 
v
) {

71 
	`lua_pushöãgî
(
L
, 
v
);

72 
	`lua_£tfõld
(
L
, -2, 
i
);

73 
	}
}

76 
lua_Sèã
 *
	$gëthªad
 (
lua_Sèã
 *
L
, *
¨g
) {

77 i‡(
	`lua_i°hªad
(
L
, 1)) {

78 *
¨g
 = 1;

79  
	`lua_tŸhªad
(
L
, 1);

82 *
¨g
 = 0;

83  
L
;

85 
	}
}

88 
	$åót°ack›ti⁄
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
, c⁄° *
‚ame
) {

89 i‡(
L
 =
L1
) {

90 
	`lua_pushvÆue
(
L
, -2);

91 
	`lua_ªmove
(
L
, -3);

94 
	`lua_xmove
(
L1
, 
L
, 1);

95 
	`lua_£tfõld
(
L
, -2, 
‚ame
);

96 
	}
}

99 
	$db_gëöfo
 (
lua_Sèã
 *
L
) {

100 
lua_Debug
 
¨
;

101 
¨g
;

102 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

103 c⁄° *
›ti⁄s
 = 
	`luaL_›t°rög
(
L
, 
¨g
+2, "flnSu");

104 i‡(
	`lua_i¢umbî
(
L
, 
¨g
+1)) {

105 i‡(!
	`lua_gë°ack
(
L1
, ()
	`lua_toöãgî
(
L
, 
¨g
+1), &
¨
)) {

106 
	`lua_pushnû
(
L
);

110 i‡(
	`lua_isfun˘i⁄
(
L
, 
¨g
+1)) {

111 
	`lua_pushf°rög
(
L
, ">%s", 
›ti⁄s
);

112 
›ti⁄s
 = 
	`lua_to°rög
(
L
, -1);

113 
	`lua_pushvÆue
(
L
, 
¨g
+1);

114 
	`lua_xmove
(
L
, 
L1
, 1);

117  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "function orÜevelÉxpected");

118 i‡(!
	`lua_gëöfo
(
L1
, 
›ti⁄s
, &
¨
))

119  
	`luaL_¨gîr‹
(
L
, 
¨g
+2, "invalid option");

120 
	`lua_¸óãèbÀ
(
L
, 0, 2);

121 i‡(
	`°rchr
(
›ti⁄s
, 'S')) {

122 
	`£âabss
(
L
, "sour˚", 
¨
.
sour˚
);

123 
	`£âabss
(
L
, "sh‹t_§c", 
¨
.
sh‹t_§c
);

124 
	`£âabsi
(
L
, "löedeföed", 
¨
.
löedeföed
);

125 
	`£âabsi
(
L
, "œ°löedeföed", 
¨
.
œ°löedeföed
);

126 
	`£âabss
(
L
, "wh©", 
¨
.
wh©
);

128 i‡(
	`°rchr
(
›ti⁄s
, 'l'))

129 
	`£âabsi
(
L
, "cuºíéöe", 
¨
.
cuºíéöe
);

130 i‡(
	`°rchr
(
›ti⁄s
, 'u'))

131 
	`£âabsi
(
L
, "nups", 
¨
.
nups
);

132 i‡(
	`°rchr
(
›ti⁄s
, 'n')) {

133 
	`£âabss
(
L
, "«me", 
¨
.
«me
);

134 
	`£âabss
(
L
, "«mewh©", 
¨
.
«mewh©
);

136 i‡(
	`°rchr
(
›ti⁄s
, 'L'))

137 
	`åót°ack›ti⁄
(
L
, 
L1
, "activelines");

138 i‡(
	`°rchr
(
›ti⁄s
, 'f'))

139 
	`åót°ack›ti⁄
(
L
, 
L1
, "func");

141 
	}
}

144 
	$db_gëloˇl
 (
lua_Sèã
 *
L
) {

145 
¨g
;

146 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

147 
lua_Debug
 
¨
;

148 c⁄° *
«me
;

149 i‡(!
	`lua_gë°ack
(
L1
, 
	`luaL_checköt
(
L
, 
¨g
+1), &
¨
))

150  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

151 
«me
 = 
	`lua_gëloˇl
(
L1
, &
¨
, 
	`luaL_checköt
(
L
, 
¨g
+2));

152 i‡(
«me
) {

153 
	`lua_xmove
(
L1
, 
L
, 1);

154 
	`lua_push°rög
(
L
, 
«me
);

155 
	`lua_pushvÆue
(
L
, -2);

159 
	`lua_pushnû
(
L
);

162 
	}
}

165 
	$db_£éoˇl
 (
lua_Sèã
 *
L
) {

166 
¨g
;

167 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

168 
lua_Debug
 
¨
;

169 i‡(!
	`lua_gë°ack
(
L1
, 
	`luaL_checköt
(
L
, 
¨g
+1), &
¨
))

170  
	`luaL_¨gîr‹
(
L
, 
¨g
+1, "level out ofÑange");

171 
	`luaL_check™y
(
L
, 
¨g
+3);

172 
	`lua_£â›
(
L
, 
¨g
+3);

173 
	`lua_xmove
(
L
, 
L1
, 1);

174 
	`lua_push°rög
(
L
, 
	`lua_£éoˇl
(
L1
, &
¨
, 
	`luaL_checköt
(L, 
¨g
+2)));

176 
	}
}

179 
	$auxupvÆue
 (
lua_Sèã
 *
L
, 
gë
) {

180 c⁄° *
«me
;

181 
n
 = 
	`luaL_checköt
(
L
, 2);

182 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

183 i‡(
	`lua_iscfun˘i⁄
(
L
, 1))  0;

184 
«me
 = 
gë
 ? 
	`lua_gëupvÆue
(
L
, 1, 
n
Ë: 
	`lua_£tupvÆue
(L, 1,Ç);

185 i‡(
«me
 =
NULL
)  0;

186 
	`lua_push°rög
(
L
, 
«me
);

187 
	`lua_ö£π
(
L
, -(
gë
+1));

188  
gë
 + 1;

189 
	}
}

192 
	$db_gëupvÆue
 (
lua_Sèã
 *
L
) {

193  
	`auxupvÆue
(
L
, 1);

194 
	}
}

197 
	$db_£tupvÆue
 (
lua_Sèã
 *
L
) {

198 
	`luaL_check™y
(
L
, 3);

199  
	`auxupvÆue
(
L
, 0);

200 
	}
}

204 c⁄° 
	gKEY_HOOK
 = 'h';

207 
	$hookf
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

208 c⁄° *c⁄° 
hook«mes
[] =

210 
	`lua_pushlightu£rd©a
(
L
, (*)&
KEY_HOOK
);

211 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

212 
	`lua_pushlightu£rd©a
(
L
, L);

213 
	`lua_øwgë
(
L
, -2);

214 i‡(
	`lua_isfun˘i⁄
(
L
, -1)) {

215 
	`lua_push°rög
(
L
, 
hook«mes
[()
¨
->
evít
]);

216 i‡(
¨
->
cuºíéöe
 >= 0)

217 
	`lua_pushöãgî
(
L
, 
¨
->
cuºíéöe
);

218 
	`lua_pushnû
(
L
);

219 
	`lua_as£π
(
	`lua_gëöfo
(
L
, "lS", 
¨
));

220 
	`lua_ˇŒ
(
L
, 2, 0);

222 
	}
}

225 
	$makemask
 (c⁄° *
smask
, 
cou¡
) {

226 
mask
 = 0;

227 i‡(
	`°rchr
(
smask
, 'c')Ë
mask
 |
LUA_MASKCALL
;

228 i‡(
	`°rchr
(
smask
, 'r')Ë
mask
 |
LUA_MASKRET
;

229 i‡(
	`°rchr
(
smask
, 'l')Ë
mask
 |
LUA_MASKLINE
;

230 i‡(
cou¡
 > 0Ë
mask
 |
LUA_MASKCOUNT
;

231  
mask
;

232 
	}
}

235 *
	$unmakemask
 (
mask
, *
smask
) {

236 
i
 = 0;

237 i‡(
mask
 & 
LUA_MASKCALL
Ë
smask
[
i
++] = 'c';

238 i‡(
mask
 & 
LUA_MASKRET
Ë
smask
[
i
++] = 'r';

239 i‡(
mask
 & 
LUA_MASKLINE
Ë
smask
[
i
++] = 'l';

240 
smask
[
i
] = '\0';

241  
smask
;

242 
	}
}

245 
	$gëhookèbÀ
 (
lua_Sèã
 *
L
) {

246 
	`lua_pushlightu£rd©a
(
L
, (*)&
KEY_HOOK
);

247 
	`lua_øwgë
(
L
, 
LUA_REGISTRYINDEX
);

248 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

249 
	`lua_p›
(
L
, 1);

250 
	`lua_¸óãèbÀ
(
L
, 0, 1);

251 
	`lua_pushlightu£rd©a
(
L
, (*)&
KEY_HOOK
);

252 
	`lua_pushvÆue
(
L
, -2);

253 
	`lua_øw£t
(
L
, 
LUA_REGISTRYINDEX
);

255 
	}
}

258 
	$db_£thook
 (
lua_Sèã
 *
L
) {

259 
¨g
, 
mask
, 
cou¡
;

260 
lua_Hook
 
func
;

261 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

262 i‡(
	`lua_i¢⁄e‹nû
(
L
, 
¨g
+1)) {

263 
	`lua_£â›
(
L
, 
¨g
+1);

264 
func
 = 
NULL
; 
mask
 = 0; 
cou¡
 = 0;

267 c⁄° *
smask
 = 
	`luaL_check°rög
(
L
, 
¨g
+2);

268 
	`luaL_checkty≥
(
L
, 
¨g
+1, 
LUA_TFUNCTION
);

269 
cou¡
 = 
	`luaL_›töt
(
L
, 
¨g
+3, 0);

270 
func
 = 
hookf
; 
mask
 = 
	`makemask
(
smask
, 
cou¡
);

272 
	`gëhookèbÀ
(
L
);

273 
	`lua_pushlightu£rd©a
(
L
, 
L1
);

274 
	`lua_pushvÆue
(
L
, 
¨g
+1);

275 
	`lua_øw£t
(
L
, -3);

276 
	`lua_p›
(
L
, 1);

277 
	`lua_£thook
(
L1
, 
func
, 
mask
, 
cou¡
);

279 
	}
}

282 
	$db_gëhook
 (
lua_Sèã
 *
L
) {

283 
¨g
;

284 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

285 
buff
[5];

286 
mask
 = 
	`lua_gëhookmask
(
L1
);

287 
lua_Hook
 
hook
 = 
	`lua_gëhook
(
L1
);

288 i‡(
hook
 !
NULL
 && hook !
hookf
)

289 
	`lua_pushlôîÆ
(
L
, "external hook");

291 
	`gëhookèbÀ
(
L
);

292 
	`lua_pushlightu£rd©a
(
L
, 
L1
);

293 
	`lua_øwgë
(
L
, -2);

294 
	`lua_ªmove
(
L
, -2);

296 
	`lua_push°rög
(
L
, 
	`unmakemask
(
mask
, 
buff
));

297 
	`lua_pushöãgî
(
L
, 
	`lua_gëhookcou¡
(
L1
));

299 
	}
}

302 
	$db_debug
 (
lua_Sèã
 *
L
) {

304 
buf„r
[250];

305 
	`Âuts
("lua_debug> ", 
°dîr
);

306 i‡(
	`fgës
(
buf„r
, (buf„r), 
°dö
) == 0 ||

307 
	`°rcmp
(
buf„r
, "cont\n") == 0)

309 i‡(
	`luaL_lﬂdbuf„r
(
L
, 
buf„r
, 
	`°æí
(buffer), "=(debug command)") ||

310 
	`lua_pˇŒ
(
L
, 0, 0, 0)) {

311 
	`Âuts
(
	`lua_to°rög
(
L
, -1), 
°dîr
);

312 
	`Âuts
("\n", 
°dîr
);

314 
	`lua_£â›
(
L
, 0);

316 
	}
}

319 
	#LEVELS1
 12

	)

320 
	#LEVELS2
 10

	)

322 
	$db_îr‹fb
 (
lua_Sèã
 *
L
) {

323 
Àvñ
;

324 
fú°∑π
 = 1;

325 
¨g
;

326 
lua_Sèã
 *
L1
 = 
	`gëthªad
(
L
, &
¨g
);

327 
lua_Debug
 
¨
;

328 i‡(
	`lua_i¢umbî
(
L
, 
¨g
+2)) {

329 
Àvñ
 = ()
	`lua_toöãgî
(
L
, 
¨g
+2);

330 
	`lua_p›
(
L
, 1);

333 
Àvñ
 = (
L
 =
L1
) ? 1 : 0;

334 i‡(
	`lua_gët›
(
L
Ë=
¨g
)

335 
	`lua_pushlôîÆ
(
L
, "");

336 i‡(!
	`lua_is°rög
(
L
, 
¨g
+1))  1;

337 
	`lua_pushlôîÆ
(
L
, "\n");

338 
	`lua_pushlôîÆ
(
L
, "stackÅraceback:");

339 
	`lua_gë°ack
(
L1
, 
Àvñ
++, &
¨
)) {

340 i‡(
Àvñ
 > 
LEVELS1
 && 
fú°∑π
) {

342 i‡(!
	`lua_gë°ack
(
L1
, 
Àvñ
+
LEVELS2
, &
¨
))

343 
Àvñ
--;

345 
	`lua_pushlôîÆ
(
L
, "\n\t...");

346 
	`lua_gë°ack
(
L1
, 
Àvñ
+
LEVELS2
, &
¨
))

347 
Àvñ
++;

349 
fú°∑π
 = 0;

352 
	`lua_pushlôîÆ
(
L
, "\n\t");

353 
	`lua_gëöfo
(
L1
, "S∆", &
¨
);

354 
	`lua_pushf°rög
(
L
, "%s:", 
¨
.
sh‹t_§c
);

355 i‡(
¨
.
cuºíéöe
 > 0)

356 
	`lua_pushf°rög
(
L
, "%d:", 
¨
.
cuºíéöe
);

357 i‡(*
¨
.
«mewh©
 != '\0')

358 
	`lua_pushf°rög
(
L
, " i¿fun˘i⁄ " 
LUA_QS
, 
¨
.
«me
);

360 i‡(*
¨
.
wh©
 == 'm')

361 
	`lua_pushf°rög
(
L
, " in main chunk");

362 i‡(*
¨
.
wh©
 == 'C' || *ar.what == 't')

363 
	`lua_pushlôîÆ
(
L
, " ?");

365 
	`lua_pushf°rög
(
L
, " in function <%s:%d>",

366 
¨
.
sh‹t_§c
,ár.
löedeföed
);

368 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
¨g
);

370 
	`lua_c⁄ˇt
(
L
, 
	`lua_gët›
(LË- 
¨g
);

372 
	}
}

375 c⁄° 
luaL_Reg
 
	gdblib
[] = {

376 {"debug", 
db_debug
},

377 {"gë„nv", 
db_gë„nv
},

378 {"gëhook", 
db_gëhook
},

379 {"gëöfo", 
db_gëöfo
},

380 {"gëloˇl", 
db_gëloˇl
},

381 {"gëªgi°ry", 
db_gëªgi°ry
},

382 {"gëmë©abÀ", 
db_gëmë©abÀ
},

383 {"gëupvÆue", 
db_gëupvÆue
},

384 {"£t„nv", 
db_£t„nv
},

385 {"£thook", 
db_£thook
},

386 {"£éoˇl", 
db_£éoˇl
},

387 {"£tmë©abÀ", 
db_£tmë©abÀ
},

388 {"£tupvÆue", 
db_£tupvÆue
},

389 {"åa˚back", 
db_îr‹fb
},

390 {
NULL
, NULL}

394 
LUALIB_API
 
	$lua›í_debug
 (
lua_Sèã
 *
L
) {

395 
	`¥ötf
("debug: 8.luaopen_debug\n");

396 
	`luaL_ªgi°î
(
L
, 
LUA_DBLIBNAME
, 
dblib
);

398 
	}
}

	@src/ldebug.c

8 
	~<°d¨g.h
>

9 
	~<°ddef.h
>

10 
	~<°rög.h
>

13 
	#ldebug_c


	)

14 
	#LUA_CORE


	)

16 
	~"lua.h
"

18 
	~"œpi.h
"

19 
	~"lcode.h
"

20 
	~"ldebug.h
"

21 
	~"ldo.h
"

22 
	~"lfunc.h
"

23 
	~"lobje˘.h
"

24 
	~"l›codes.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lvm.h
"

33 c⁄° *
gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
);

36 
	$cuºíçc
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
) {

37 i‡(!
	`isLua
(
ci
))  -1;

38 i‡(
ci
 =
L
->ci)

39 
ci
->
ßvedpc
 = 
L
->savedpc;

40  
	`pcRñ
(
ci
->
ßvedpc
, 
	`ci_func
(ci)->
l
.
p
);

41 
	}
}

44 
	$cuºíéöe
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
) {

45 
pc
 = 
	`cuºíçc
(
L
, 
ci
);

46 i‡(
pc
 < 0)

49  
	`gëlöe
(
	`ci_func
(
ci
)->
l
.
p
, 
pc
);

50 
	}
}

56 
LUA_API
 
	$lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
) {

57 i‡(
func
 =
NULL
 || 
mask
 == 0) {

58 
mask
 = 0;

59 
func
 = 
NULL
;

61 
L
->
hook
 = 
func
;

62 
L
->
ba£hookcou¡
 = 
cou¡
;

63 
	`ª£thookcou¡
(
L
);

64 
L
->
hookmask
 = 
	`ˇ°_byã
(
mask
);

66 
	}
}

69 
LUA_API
 
lua_Hook
 
	$lua_gëhook
 (
lua_Sèã
 *
L
) {

70  
L
->
hook
;

71 
	}
}

74 
LUA_API
 
	$lua_gëhookmask
 (
lua_Sèã
 *
L
) {

75  
L
->
hookmask
;

76 
	}
}

79 
LUA_API
 
	$lua_gëhookcou¡
 (
lua_Sèã
 *
L
) {

80  
L
->
ba£hookcou¡
;

81 
	}
}

84 
LUA_API
 
	$lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
) {

85 
°©us
;

86 
CÆlInfo
 *
ci
;

87 
	`lua_lock
(
L
);

88 
ci
 = 
L
->ci; 
Àvñ
 > 0 && cò> L->
ba£_ci
; ci--) {

89 
Àvñ
--;

90 i‡(
	`f_isLua
(
ci
))

91 
Àvñ
 -
ci
->
èûˇŒs
;

93 i‡(
Àvñ
 =0 && 
ci
 > 
L
->
ba£_ci
) {

94 
°©us
 = 1;

95 
¨
->
i_ci
 = 
	`ˇ°_öt
(
ci
 - 
L
->
ba£_ci
);

97 i‡(
Àvñ
 < 0) {

98 
°©us
 = 1;

99 
¨
->
i_ci
 = 0;

101 
°©us
 = 0;

102 
	`lua_u∆ock
(
L
);

103  
°©us
;

104 
	}
}

107 
PrŸo
 *
	$gëlu≠rŸo
 (
CÆlInfo
 *
ci
) {

108  (
	`isLua
(
ci
Ë? 
	`ci_func
(ci)->
l
.
p
 : 
NULL
);

109 
	}
}

112 c⁄° *
	$födloˇl
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
n
) {

113 c⁄° *
«me
;

114 
PrŸo
 *
Â
 = 
	`gëlu≠rŸo
(
ci
);

115 i‡(
Â
 && (
«me
 = 
	`luaF_gëloˇ ame
(Â, 
n
, 
	`cuºíçc
(
L
, 
ci
))Ë!
NULL
)

116  
«me
;

118 
StkId
 
limô
 = (
ci
 =
L
->ciË? L->
t›
 : (ci+1)->
func
;

119 i‡(
limô
 - 
ci
->
ba£
 >
n
 &&Ç > 0)

122  
NULL
;

124 
	}
}

127 
LUA_API
 c⁄° *
	$lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

128 
CÆlInfo
 *
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

129 c⁄° *
«me
 = 
	`födloˇl
(
L
, 
ci
, 
n
);

130 
	`lua_lock
(
L
);

131 i‡(
«me
)

132 
	`luaA_pushobje˘
(
L
, 
ci
->
ba£
 + (
n
 - 1));

133 
	`lua_u∆ock
(
L
);

134  
«me
;

135 
	}
}

138 
LUA_API
 c⁄° *
	$lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
) {

139 
CÆlInfo
 *
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

140 c⁄° *
«me
 = 
	`födloˇl
(
L
, 
ci
, 
n
);

141 
	`lua_lock
(
L
);

142 i‡(
«me
)

143 
	`£tobjs2s
(
L
, 
ci
->
ba£
 + (
n
 - 1), L->
t›
 - 1);

144 
L
->
t›
--;

145 
	`lua_u∆ock
(
L
);

146  
«me
;

147 
	}
}

150 
	$funcöfo
 (
lua_Debug
 *
¨
, 
Closuª
 *
˛
) {

151 i‡(
˛
->
c
.
isC
) {

152 
¨
->
sour˚
 = "=[C]";

153 
¨
->
löedeföed
 = -1;

154 
¨
->
œ°löedeföed
 = -1;

155 
¨
->
wh©
 = "C";

158 
¨
->
sour˚
 = 
	`gë°r
(
˛
->
l
.
p
->source);

159 
¨
->
löedeföed
 = 
˛
->
l
.
p
->linedefined;

160 
¨
->
œ°löedeföed
 = 
˛
->
l
.
p
->lastlinedefined;

161 
¨
->
wh©
 = (¨->
löedeföed
 == 0) ? "main" : "Lua";

163 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

164 
	}
}

167 
	$öfo_èûˇŒ
 (
lua_Debug
 *
¨
) {

168 
¨
->
«me
 =ár->
«mewh©
 = "";

169 
¨
->
wh©
 = "tail";

170 
¨
->
œ°löedeföed
 =ár->
löedeföed
 =ár->
cuºíéöe
 = -1;

171 
¨
->
sour˚
 = "=(tail call)";

172 
	`luaO_chunkid
(
¨
->
sh‹t_§c
,ár->
sour˚
, 
LUA_IDSIZE
);

173 
¨
->
nups
 = 0;

174 
	}
}

177 
	$cﬁÀ˘vÆidlöes
 (
lua_Sèã
 *
L
, 
Closuª
 *
f
) {

178 i‡(
f
 =
NULL
 || f->
c
.
isC
) {

179 
	`£äûvÆue
(
L
->
t›
);

182 
TabÀ
 *
t
 = 
	`luaH_√w
(
L
, 0, 0);

183 *
löeöfo
 = 
f
->
l
.
p
->lineinfo;

184 
i
;

185 
i
=0; i<
f
->
l
.
p
->
sizñöeöfo
; i++)

186 
	`£tbvÆue
(
	`luaH_£äum
(
L
, 
t
, 
löeöfo
[
i
]), 1);

187 
	`£thvÆue
(
L
, L->
t›
, 
t
);

189 
	`ö¸_t›
(
L
);

190 
	}
}

193 
	$auxgëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
,

194 
Closuª
 *
f
, 
CÆlInfo
 *
ci
) {

195 
°©us
 = 1;

196 i‡(
f
 =
NULL
) {

197 
	`öfo_èûˇŒ
(
¨
);

198  
°©us
;

200 ; *
wh©
; what++) {

201 *
wh©
) {

203 
	`funcöfo
(
¨
, 
f
);

207 
¨
->
cuºíéöe
 = (
ci
Ë? 
	`cuºíéöe
(
L
, ci) : -1;

211 
¨
->
nups
 = 
f
->
c
.
nupvÆues
;

215 
¨
->
«mewh©
 = (
ci
Ë? 
	`gëfun˙ame
(
L
, ci, &¨->
«me
Ë: 
NULL
;

216 i‡(
¨
->
«mewh©
 =
NULL
) {

217 
¨
->
«mewh©
 = "";

218 
¨
->
«me
 = 
NULL
;

225 : 
°©us
 = 0;

228  
°©us
;

229 
	}
}

232 
LUA_API
 
	$lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
) {

233 
°©us
;

234 
Closuª
 *
f
 = 
NULL
;

235 
CÆlInfo
 *
ci
 = 
NULL
;

236 
	`lua_lock
(
L
);

237 i‡(*
wh©
 == '>') {

238 
StkId
 
func
 = 
L
->
t›
 - 1;

239 
	`luai_≠icheck
(
L
, 
	`âisfun˘i⁄
(
func
));

240 
wh©
++;

241 
f
 = 
	`˛vÆue
(
func
);

242 
L
->
t›
--;

244 i‡(
¨
->
i_ci
 != 0) {

245 
ci
 = 
L
->
ba£_ci
 + 
¨
->
i_ci
;

246 
	`lua_as£π
(
	`âisfun˘i⁄
(
ci
->
func
));

247 
f
 = 
	`˛vÆue
(
ci
->
func
);

249 
°©us
 = 
	`auxgëöfo
(
L
, 
wh©
, 
¨
, 
f
, 
ci
);

250 i‡(
	`°rchr
(
wh©
, 'f')) {

251 i‡(
f
 =
NULL
Ë
	`£äûvÆue
(
L
->
t›
);

252 
	`£t˛vÆue
(
L
, L->
t›
, 
f
);

253 
	`ö¸_t›
(
L
);

255 i‡(
	`°rchr
(
wh©
, 'L'))

256 
	`cﬁÀ˘vÆidlöes
(
L
, 
f
);

257 
	`lua_u∆ock
(
L
);

258  
°©us
;

259 
	}
}

268 
	#check
(
x
Ëi‡(!(x)Ë 0;

	)

270 
	#checkjump
(
±
,
pc
Ë
	`check
(0 <p¯&&Ö¯<Öt->
sizecode
)

	)

272 
	#checkªg
(
±
,
ªg
Ë
	`check
(‘egË< (±)->
max°acksize
)

	)

276 
	$¥echeck
 (c⁄° 
PrŸo
 *
±
) {

277 
	`check
(
±
->
max°acksize
 <
MAXSTACK
);

278 
	`check
(
±
->
num∑øms
+’t->
is_v¨¨g
 & 
VARARG_HASARG
Ë<±->
max°acksize
);

279 
	`check
(!(
±
->
is_v¨¨g
 & 
VARARG_NEEDSARG
) ||

280 (
±
->
is_v¨¨g
 & 
VARARG_HASARG
));

281 
	`check
(
±
->
sizeupvÆues
 <±->
nups
);

282 
	`check
(
±
->
sizñöeöfo
 =±->
sizecode
 ||Öt->sizelineinfo == 0);

283 
	`check
(
±
->
sizecode
 > 0 && 
	`GET_OPCODE
’t->
code
[±->sizecode-1]Ë=
OP_RETURN
);

285 
	}
}

288 
	#check›í›
(
±
,
pc
Ë
	`luaG_check›í›
(’t)->
code
[’c)+1])

	)

290 
	$luaG_check›í›
 (
In°ru˘i⁄
 
i
) {

291 
	`GET_OPCODE
(
i
)) {

292 
OP_CALL
:

293 
OP_TAILCALL
:

294 
OP_RETURN
:

295 
OP_SETLIST
: {

296 
	`check
(
	`GETARG_B
(
i
) == 0);

301 
	}
}

304 
	$checkArgMode
 (c⁄° 
PrŸo
 *
±
, 
r
, 
OpArgMask
 
mode
) {

305 
mode
) {

306 
OpArgN
: 
	`check
(
r
 == 0); ;

307 
OpArgU
: ;

308 
OpArgR
: 
	`checkªg
(
±
, 
r
); ;

309 
OpArgK
:

310 
	`check
(
	`ISK
(
r
Ë? 
	`INDEXK
‘Ë< 
±
->
sizek
 :Ñ <Öt->
max°acksize
);

314 
	}
}

320 
In°ru˘i⁄
 
	$symbexec
 (c⁄° 
PrŸo
 *
±
, 
œ°pc
, 
ªg
) {

321 
pc
;

322 
œ°
;

323 
œ°
 = 
±
->
sizecode
-1;

324 
	`check
(
	`¥echeck
(
±
));

325 
pc
 = 0;Ö¯< 
œ°pc
;Öc++) {

326 
In°ru˘i⁄
 
i
 = 
±
->
code
[
pc
];

327 
OpCode
 
›
 = 
	`GET_OPCODE
(
i
);

328 
a
 = 
	`GETARG_A
(
i
);

329 
b
 = 0;

330 
c
 = 0;

331 
	`check
(
›
 < 
NUM_OPCODES
);

332 
	`checkªg
(
±
, 
a
);

333 
	`gëOpMode
(
›
)) {

334 
iABC
: {

335 
b
 = 
	`GETARG_B
(
i
);

336 
c
 = 
	`GETARG_C
(
i
);

337 
	`check
(
	`checkArgMode
(
±
, 
b
, 
	`gëBMode
(
›
)));

338 
	`check
(
	`checkArgMode
(
±
, 
c
, 
	`gëCMode
(
›
)));

341 
iABx
: {

342 
b
 = 
	`GETARG_Bx
(
i
);

343 i‡(
	`gëBMode
(
›
Ë=
OpArgK
Ë
	`check
(
b
 < 
±
->
sizek
);

346 
iAsBx
: {

347 
b
 = 
	`GETARG_sBx
(
i
);

348 i‡(
	`gëBMode
(
›
Ë=
OpArgR
) {

349 
de°
 = 
pc
+1+
b
;

350 
	`check
(0 <
de°
 && de° < 
±
->
sizecode
);

351 i‡(
de°
 > 0) {

352 
j
;

357 
j
 = 0; j < 
de°
; j++) {

358 
In°ru˘i⁄
 
d
 = 
±
->
code
[
de°
-1-
j
];

359 i‡(!(
	`GET_OPCODE
(
d
Ë=
OP_SETLIST
 && 
	`GETARG_C
(d) == 0)) ;

363 
	`check
((
j
&1) == 0);

370 i‡(
	`ã°AMode
(
›
)) {

371 i‡(
a
 =
ªg
Ë
œ°
 = 
pc
;

374 i‡(
	`ã°TMode
(
›
)) {

375 
	`check
(
pc
+2 < 
±
->
sizecode
);

376 
	`check
(
	`GET_OPCODE
(
±
->
code
[
pc
+1]Ë=
OP_JMP
);

378 
›
) {

379 
OP_LOADBOOL
: {

380 i‡(
c
 == 1) {

381 
	`check
(
pc
+2 < 
±
->
sizecode
);

382 
	`check
(
	`GET_OPCODE
(
±
->
code
[
pc
+1]Ë!
OP_SETLIST
 ||

383 
	`GETARG_C
(
±
->
code
[
pc
+1]) != 0);

387 
OP_LOADNIL
: {

388 i‡(
a
 <
ªg
 &&Ñeg <
b
)

389 
œ°
 = 
pc
;

392 
OP_GETUPVAL
:

393 
OP_SETUPVAL
: {

394 
	`check
(
b
 < 
±
->
nups
);

397 
OP_GETGLOBAL
:

398 
OP_SETGLOBAL
: {

399 
	`check
(
	`âis°rög
(&
±
->
k
[
b
]));

402 
OP_SELF
: {

403 
	`checkªg
(
±
, 
a
+1);

404 i‡(
ªg
 =
a
+1Ë
œ°
 = 
pc
;

407 
OP_CONCAT
: {

408 
	`check
(
b
 < 
c
);

411 
OP_TFORLOOP
: {

412 
	`check
(
c
 >= 1);

413 
	`checkªg
(
±
, 
a
+2+
c
);

414 i‡(
ªg
 >
a
+2Ë
œ°
 = 
pc
;

417 
OP_FORLOOP
:

418 
OP_FORPREP
:

419 
	`checkªg
(
±
, 
a
+3);

421 
OP_JMP
: {

422 
de°
 = 
pc
+1+
b
;

424 i‡(
ªg
 !
NO_REG
 && 
pc
 < 
de°
 && de° <
œ°pc
)

425 
pc
 +
b
;

428 
OP_CALL
:

429 
OP_TAILCALL
: {

430 i‡(
b
 != 0) {

431 
	`checkªg
(
±
, 
a
+
b
-1);

433 
c
--;

434 i‡(
c
 =
LUA_MULTRET
) {

435 
	`check
(
	`check›í›
(
±
, 
pc
));

437 i‡(
c
 != 0)

438 
	`checkªg
(
±
, 
a
+
c
-1);

439 i‡(
ªg
 >
a
Ë
œ°
 = 
pc
;

442 
OP_RETURN
: {

443 
b
--;

444 i‡(
b
 > 0Ë
	`checkªg
(
±
, 
a
+b-1);

447 
OP_SETLIST
: {

448 i‡(
b
 > 0Ë
	`checkªg
(
±
, 
a
 + b);

449 i‡(
c
 == 0) {

450 
pc
++;

451 
	`check
(
pc
 < 
±
->
sizecode
 - 1);

455 
OP_CLOSURE
: {

456 
nup
, 
j
;

457 
	`check
(
b
 < 
±
->
sizï
);

458 
nup
 = 
±
->
p
[
b
]->
nups
;

459 
	`check
(
pc
 + 
nup
 < 
±
->
sizecode
);

460 
j
 = 1; j <
nup
; j++) {

461 
OpCode
 
›1
 = 
	`GET_OPCODE
(
±
->
code
[
pc
 + 
j
]);

462 
	`check
(
›1
 =
OP_GETUPVAL
 || op1 =
OP_MOVE
);

464 i‡(
ªg
 !
NO_REG
)

465 
pc
 +
nup
;

468 
OP_VARARG
: {

469 
	`check
((
±
->
is_v¨¨g
 & 
VARARG_ISVARARG
) &&

470 !(
±
->
is_v¨¨g
 & 
VARARG_NEEDSARG
));

471 
b
--;

472 i‡(
b
 =
LUA_MULTRET
Ë
	`check
(
	`check›í›
(
±
, 
pc
));

473 
	`checkªg
(
±
, 
a
+
b
-1);

479  
±
->
code
[
œ°
];

480 
	}
}

482 #unde‡
check


483 #unde‡
checkjump


484 #unde‡
checkªg


491 
	$luaG_checkcode
 (c⁄° 
PrŸo
 *
±
) {

492  (
	`symbexec
(
±
,Öt->
sizecode
, 
NO_REG
) != 0);

493 
	}
}

496 c⁄° *
	$k«me
 (
PrŸo
 *
p
, 
c
) {

497 i‡(
	`ISK
(
c
Ë&& 
	`âis°rög
(&
p
->
k
[
	`INDEXK
(c)]))

498  
	`svÆue
(&
p
->
k
[
	`INDEXK
(
c
)]);

501 
	}
}

504 c⁄° *
	$gëobj«me
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, 
°ackpos
,

505 c⁄° **
«me
) {

506 i‡(
	`isLua
(
ci
)) {

507 
PrŸo
 *
p
 = 
	`ci_func
(
ci
)->
l
.p;

508 
pc
 = 
	`cuºíçc
(
L
, 
ci
);

509 
In°ru˘i⁄
 
i
;

510 *
«me
 = 
	`luaF_gëloˇ ame
(
p
, 
°ackpos
+1, 
pc
);

511 i‡(*
«me
)

513 
i
 = 
	`symbexec
(
p
, 
pc
, 
°ackpos
);

514 
	`lua_as£π
(
pc
 != -1);

515 
	`GET_OPCODE
(
i
)) {

516 
OP_GETGLOBAL
: {

517 
g
 = 
	`GETARG_Bx
(
i
);

518 
	`lua_as£π
(
	`âis°rög
(&
p
->
k
[
g
]));

519 *
«me
 = 
	`svÆue
(&
p
->
k
[
g
]);

522 
OP_MOVE
: {

523 
a
 = 
	`GETARG_A
(
i
);

524 
b
 = 
	`GETARG_B
(
i
);

525 i‡(
b
 < 
a
)

526  
	`gëobj«me
(
L
, 
ci
, 
b
, 
«me
);

529 
OP_GETTABLE
: {

530 
k
 = 
	`GETARG_C
(
i
);

531 *
«me
 = 
	`k«me
(
p
, 
k
);

534 
OP_GETUPVAL
: {

535 
u
 = 
	`GETARG_B
(
i
);

536 *
«me
 = 
p
->
upvÆues
 ? 
	`gë°r
’->upvÆues[
u
]) : "?";

539 
OP_SELF
: {

540 
k
 = 
	`GETARG_C
(
i
);

541 *
«me
 = 
	`k«me
(
p
, 
k
);

547  
NULL
;

548 
	}
}

551 c⁄° *
	$gëfun˙ame
 (
lua_Sèã
 *
L
, 
CÆlInfo
 *
ci
, c⁄° **
«me
) {

552 
In°ru˘i⁄
 
i
;

553 i‡((
	`isLua
(
ci
Ë&& ci->
èûˇŒs
 > 0) || !isLua(ci - 1))

554  
NULL
;

555 
ci
--;

556 
i
 = 
	`ci_func
(
ci
)->
l
.
p
->
code
[
	`cuºíçc
(
L
, ci)];

557 i‡(
	`GET_OPCODE
(
i
Ë=
OP_CALL
 || GET_OPCODE(iË=
OP_TAILCALL
 ||

558 
	`GET_OPCODE
(
i
Ë=
OP_TFORLOOP
)

559  
	`gëobj«me
(
L
, 
ci
, 
	`GETARG_A
(
i
), 
«me
);

561  
NULL
;

562 
	}
}

566 
	$isö°ack
 (
CÆlInfo
 *
ci
, c⁄° 
TVÆue
 *
o
) {

567 
StkId
 
p
;

568 
p
 = 
ci
->
ba£
;Ö < ci->
t›
;Ö++)

569 i‡(
o
 =
p
)  1;

571 
	}
}

574 
	$luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, c⁄° *
›
) {

575 c⁄° *
«me
 = 
NULL
;

576 c⁄° *
t
 = 
luaT_ty≥«mes
[
	`ây≥
(
o
)];

577 c⁄° *
köd
 = (
	`isö°ack
(
L
->
ci
, 
o
)) ?

578 
	`gëobj«me
(
L
, L->
ci
, 
	`ˇ°_öt
(
o
 - L->
ba£
), &
«me
) :

579 
NULL
;

580 i‡(
köd
)

581 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†%†" 
LUA_QS
 " (a %s value)",

582 
›
, 
köd
, 
«me
, 
t
);

584 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿ%†®%†vÆue", 
›
, 
t
);

585 
	}
}

588 
	$luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, 
StkId
 
p1
, StkId 
p2
) {

589 i‡(
	`âis°rög
(
p1
Ë|| 
	`âi¢umbî
’1)Ëp1 = 
p2
;

590 
	`lua_as£π
(!
	`âis°rög
(
p1
Ë&& !
	`âi¢umbî
(p1));

591 
	`luaG_ty≥îr‹
(
L
, 
p1
, "concatenate");

592 
	}
}

595 
	$luaG_¨ôhîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

596 
TVÆue
 
ãmp
;

597 i‡(
	`luaV_t⁄umbî
(
p1
, &
ãmp
Ë=
NULL
)

598 
p2
 = 
p1
;

599 
	`luaG_ty≥îr‹
(
L
, 
p2
, "performárithmetic on");

600 
	}
}

603 
	$luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

604 c⁄° *
t1
 = 
luaT_ty≥«mes
[
	`ây≥
(
p1
)];

605 c⁄° *
t2
 = 
luaT_ty≥«mes
[
	`ây≥
(
p2
)];

606 i‡(
t1
[2] =
t2
[2])

607 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ªÅwÿ%†vÆues", 
t1
);

609 
	`luaG_ru√º‹
(
L
, "©ãm±Åÿcom∑ª %†wôh %s", 
t1
, 
t2
);

611 
	}
}

614 
	$addöfo
 (
lua_Sèã
 *
L
, c⁄° *
msg
) {

615 
CÆlInfo
 *
ci
 = 
L
->ci;

616 i‡(
	`isLua
(
ci
)) {

617 
buff
[
LUA_IDSIZE
];

618 
löe
 = 
	`cuºíéöe
(
L
, 
ci
);

619 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
	`gëlu≠rŸo
(
ci
)->
sour˚
), 
LUA_IDSIZE
);

620 
	`luaO_pushf°rög
(
L
, "%s:%d: %s", 
buff
, 
löe
, 
msg
);

622 
	}
}

625 
	$luaG_îr‹msg
 (
lua_Sèã
 *
L
) {

626 i‡(
L
->
îrfunc
 != 0) {

627 
StkId
 
îrfunc
 = 
	`ª°‹e°ack
(
L
, L->errfunc);

628 i‡(!
	`âisfun˘i⁄
(
îrfunc
)Ë
	`luaD_throw
(
L
, 
LUA_ERRERR
);

629 
	`£tobjs2s
(
L
, L->
t›
, L->top - 1);

630 
	`£tobjs2s
(
L
, L->
t›
 - 1, 
îrfunc
);

631 
	`ö¸_t›
(
L
);

632 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 1);

634 
	`luaD_throw
(
L
, 
LUA_ERRRUN
);

635 
	}
}

638 
	$luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

639 
va_li°
 
¨gp
;

640 
	`va_°¨t
(
¨gp
, 
fmt
);

641 
	`addöfo
(
L
, 
	`luaO_pushvf°rög
(L, 
fmt
, 
¨gp
));

642 
	`va_íd
(
¨gp
);

643 
	`luaG_îr‹msg
(
L
);

644 
	}
}

	@src/ldebug.h

7 #i‚de‡
ldebug_h


8 
	#ldebug_h


	)

11 
	~"l°©e.h
"

14 
	#pcRñ
(
pc
, 
p
Ë(
	`ˇ°
(, (pcË- (p)->
code
Ë- 1)

	)

16 
	#gëlöe
(
f
,
pc
Ë(((f)->
löeöfo
Ë? (f)->löeöfo[pc] : 0)

	)

18 
	#ª£thookcou¡
(
L
Ë(L->
hookcou¡
 = L->
ba£hookcou¡
)

	)

21 
LUAI_FUNC
 
luaG_ty≥îr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
,

22 c⁄° *
›«me
);

23 
LUAI_FUNC
 
luaG_c⁄ˇãº‹
 (
lua_Sèã
 *
L
, 
StkId
 
p1
, StkId 
p2
);

24 
LUAI_FUNC
 
luaG_¨ôhîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

25 c⁄° 
TVÆue
 *
p2
);

26 
LUAI_FUNC
 
luaG_‹dîîr‹
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
,

27 c⁄° 
TVÆue
 *
p2
);

28 
LUAI_FUNC
 
luaG_ru√º‹
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

29 
LUAI_FUNC
 
luaG_îr‹msg
 (
lua_Sèã
 *
L
);

30 
LUAI_FUNC
 
luaG_checkcode
 (c⁄° 
PrŸo
 *
±
);

31 
LUAI_FUNC
 
luaG_check›í›
 (
In°ru˘i⁄
 
i
);

	@src/ldo.c

8 
	~<£tjmp.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#ldo_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lgc.h
"

21 
	~"lmem.h
"

22 
	~"lobje˘.h
"

23 
	~"l›codes.h
"

24 
	~"Õ¨£r.h
"

25 
	~"l°©e.h
"

26 
	~"l°rög.h
"

27 
	~"…abÀ.h
"

28 
	~"…m.h
"

29 
	~"lundump.h
"

30 
	~"lvm.h
"

31 
	~"lzio.h
"

44 
	slua_l⁄gjmp
 {

45 
lua_l⁄gjmp
 *
	m¥evious
;

46 
luai_jmpbuf
 
	mb
;

47 vﬁ©ûê
	m°©us
;

51 
	$luaD_£ãº‹obj
 (
lua_Sèã
 *
L
, 
îrcode
, 
StkId
 
ﬁdt›
) {

52 
îrcode
) {

53 
LUA_ERRMEM
: {

54 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`luaS_√wlôîÆ
(L, 
MEMERRMSG
));

57 
LUA_ERRERR
: {

58 
	`£tsvÆue2s
(
L
, 
ﬁdt›
, 
	`luaS_√wlôîÆ
(L, "error inÉrror handling"));

61 
LUA_ERRSYNTAX
:

62 
LUA_ERRRUN
: {

63 
	`£tobjs2s
(
L
, 
ﬁdt›
, L->
t›
 - 1);

67 
L
->
t›
 = 
ﬁdt›
 + 1;

68 
	}
}

71 
	$ª°‹e_°ack_limô
 (
lua_Sèã
 *
L
) {

72 
	`lua_as£π
(
L
->
°ack_œ°
 - L->
°ack
 =L->
°acksize
 - 
EXTRA_STACK
 - 1);

73 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
) {

74 
öu£
 = 
	`ˇ°_öt
(
L
->
ci
 - L->
ba£_ci
);

75 i‡(
öu£
 + 1 < 
LUAI_MAXCALLS
)

76 
	`luaD_ªÆlocCI
(
L
, 
LUAI_MAXCALLS
);

78 
	}
}

81 
	$ª£t°ack
 (
lua_Sèã
 *
L
, 
°©us
) {

82 
L
->
ci
 = L->
ba£_ci
;

83 
L
->
ba£
 = L->
ci
->base;

84 
	`luaF_˛o£
(
L
, L->
ba£
);

85 
	`luaD_£ãº‹obj
(
L
, 
°©us
, L->
ba£
);

86 
L
->
nCˇŒs
 = L->
ba£CˇŒs
;

87 
L
->
Ælowhook
 = 1;

88 
	`ª°‹e_°ack_limô
(
L
);

89 
L
->
îrfunc
 = 0;

90 
L
->
îr‹Jmp
 = 
NULL
;

91 
	}
}

94 
	$luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
) {

95 i‡(
L
->
îr‹Jmp
) {

96 
L
->
îr‹Jmp
->
°©us
 = 
îrcode
;

97 
	`LUAI_THROW
(
L
, L->
îr‹Jmp
);

100 
L
->
°©us
 = 
	`ˇ°_byã
(
îrcode
);

101 i‡(
	`G
(
L
)->
∑nic
) {

102 
	`ª£t°ack
(
L
, 
îrcode
);

103 
	`lua_u∆ock
(
L
);

104 
	`G
(
L
)->
	`∑nic
(L);

106 
	`exô
(
EXIT_FAILURE
);

108 
	}
}

117 
	$luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
) {

118 
lua_l⁄gjmp
 
lj
;

119 
lj
.
°©us
 = 0;

120 
lj
.
¥evious
 = 
L
->
îr‹Jmp
;

121 
L
->
îr‹Jmp
 = &
lj
;

122 
	`LUAI_TRY
(
L
, &
lj
,

123 (*
f
)(
L
, 
ud
);

125 
L
->
îr‹Jmp
 = 
lj
.
¥evious
;

126  
lj
.
°©us
;

127 
	}
}

132 
	$c‹ª˘°ack
 (
lua_Sèã
 *
L
, 
TVÆue
 *
ﬁd°ack
) {

133 
CÆlInfo
 *
ci
;

134 
GCObje˘
 *
up
;

135 
L
->
t›
 = (L->t› - 
ﬁd°ack
Ë+ L->
°ack
;

136 
up
 = 
L
->
›íupvÆ
; u∞!
NULL
; u∞up->
gch
.
√xt
)

137 
	`gco2uv
(
up
)->
v
 = (gco2uv(up)->v - 
ﬁd°ack
Ë+ 
L
->
°ack
;

138 
ci
 = 
L
->
ba£_ci
; ci <= L->ci; ci++) {

139 
ci
->
t›
 = (ci->t› - 
ﬁd°ack
Ë+ 
L
->
°ack
;

140 
ci
->
ba£
 = (ci->ba£ - 
ﬁd°ack
Ë+ 
L
->
°ack
;

141 
ci
->
func
 = (ci->fun¯- 
ﬁd°ack
Ë+ 
L
->
°ack
;

143 
L
->
ba£
 = (L->ba£ - 
ﬁd°ack
Ë+ L->
°ack
;

144 
	}
}

150 
	$luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
) {

151 
TVÆue
 *
ﬁd°ack
 = 
L
->
°ack
;

152 
ªÆsize
 = 
√wsize
 + 1 + 
EXTRA_STACK
;

153 
	`lua_as£π
(
L
->
°ack_œ°
 - L->
°ack
 =L->
°acksize
 - 
EXTRA_STACK
 - 1);

154 
	`luaM_ªÆlocve˘‹
(
L
, L->
°ack
, L->
°acksize
, 
ªÆsize
, 
TVÆue
);

155 
L
->
°acksize
 = 
ªÆsize
;

156 
L
->
°ack_œ°
 = L->
°ack
+
√wsize
;

157 
	`c‹ª˘°ack
(
L
, 
ﬁd°ack
);

158 
	}
}

161 
	$luaD_ªÆlocCI
 (
lua_Sèã
 *
L
, 
√wsize
) {

162 
CÆlInfo
 *
ﬁdci
 = 
L
->
ba£_ci
;

163 
	`luaM_ªÆlocve˘‹
(
L
, L->
ba£_ci
, L->
size_ci
, 
√wsize
, 
CÆlInfo
);

164 
L
->
size_ci
 = 
√wsize
;

165 
L
->
ci
 = (L->cò- 
ﬁdci
Ë+ L->
ba£_ci
;

166 
L
->
íd_ci
 = L->
ba£_ci
 + L->
size_ci
 - 1;

167 
	}
}

170 
	$luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
) {

171 i‡(
n
 <
L
->
°acksize
)

172 
	`luaD_ªÆloc°ack
(
L
, 2*L->
°acksize
);

174 
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 + 
n
);

175 
	}
}

178 
CÆlInfo
 *
	$growCI
 (
lua_Sèã
 *
L
) {

179 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
)

180 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

182 
	`luaD_ªÆlocCI
(
L
, 2*L->
size_ci
);

183 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
)

184 
	`luaG_ru√º‹
(
L
, "stack overflow");

186  ++
L
->
ci
;

187 
	}
}

190 
	$luaD_ˇŒhook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
) {

191 
	`¥ötf
("debug: ***inÜuaD_callhook");

192 
lua_Hook
 
hook
 = 
L
->hook;

193 i‡(
hook
 && 
L
->
Ælowhook
) {

194 
±rdiff_t
 
t›
 = 
	`ßve°ack
(
L
, L->top);

195 
±rdiff_t
 
ci_t›
 = 
	`ßve°ack
(
L
, L->
ci
->
t›
);

196 
lua_Debug
 
¨
;

197 
¨
.
evít
 =Évent;

198 
¨
.
cuºíéöe
 = 
löe
;

199 i‡(
evít
 =
LUA_HOOKTAILRET
)

200 
¨
.
i_ci
 = 0;

202 
¨
.
i_ci
 = 
	`ˇ°_öt
(
L
->
ci
 - L->
ba£_ci
);

203 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

204 
L
->
ci
->
t›
 = L->t› + 
LUA_MINSTACK
;

205 
	`lua_as£π
(
L
->
ci
->
t›
 <L->
°ack_œ°
);

206 
L
->
Ælowhook
 = 0;

207 
	`lua_u∆ock
(
L
);

208 (*
hook
)(
L
, &
¨
);

209 
	`lua_lock
(
L
);

210 
	`lua_as£π
(!
L
->
Ælowhook
);

211 
L
->
Ælowhook
 = 1;

212 
L
->
ci
->
t›
 = 
	`ª°‹e°ack
(L, 
ci_t›
);

213 
L
->
t›
 = 
	`ª°‹e°ack
(L,Åop);

215 
	}
}

218 
StkId
 
	$adju°_v¨¨gs
 (
lua_Sèã
 *
L
, 
PrŸo
 *
p
, 
a˘uÆ
) {

219 
i
;

220 
nfix¨gs
 = 
p
->
num∑øms
;

221 
TabÀ
 *
hèb
 = 
NULL
;

222 
StkId
 
ba£
, 
fixed
;

223 ; 
a˘uÆ
 < 
nfix¨gs
; ++actual)

224 
	`£äûvÆue
(
L
->
t›
++);

225 #i‡
	`deföed
(
LUA_COMPAT_VARARG
)

226 i‡(
p
->
is_v¨¨g
 & 
VARARG_NEEDSARG
) {

227 
nv¨
 = 
a˘uÆ
 - 
nfix¨gs
;

228 
	`lua_as£π
(
p
->
is_v¨¨g
 & 
VARARG_HASARG
);

229 
	`luaC_checkGC
(
L
);

230 
	`luaD_check°ack
(
L
, 
p
->
max°acksize
);

231 
hèb
 = 
	`luaH_√w
(
L
, 
nv¨
, 1);

232 
i
=0; i<
nv¨
; i++)

233 
	`£tobj2n
(
L
, 
	`luaH_£äum
(L, 
hèb
, 
i
+1), L->
t›
 - 
nv¨
 + i);

235 
	`£ävÆue
(
	`luaH_£t°r
(
L
, 
hèb
, 
	`luaS_√wlôîÆ
(L, "n")), 
	`ˇ°_num
(
nv¨
));

239 
fixed
 = 
L
->
t›
 - 
a˘uÆ
;

240 
ba£
 = 
L
->
t›
;

241 
i
=0; i<
nfix¨gs
; i++) {

242 
	`£tobjs2s
(
L
, L->
t›
++, 
fixed
+
i
);

243 
	`£äûvÆue
(
fixed
+
i
);

246 i‡(
hèb
) {

247 
	`£thvÆue
(
L
, L->
t›
++, 
hèb
);

248 
	`lua_as£π
(
	`iswhôe
(
	`obj2gco
(
hèb
)));

250  
ba£
;

251 
	}
}

256 
StkId
 
	$åyfuncTM
 (
lua_Sèã
 *
L
, 
StkId
 
func
) {

257 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
func
, 
TM_CALL
);

258 
StkId
 
p
;

259 
±rdiff_t
 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

260 i‡(!
	`âisfun˘i⁄
(
tm
))

261 
	`luaG_ty≥îr‹
(
L
, 
func
, "call");

263 
p
 = 
L
->
t›
;Ö > 
func
;Ö--Ë
	`£tobjs2s
(L,Ö,Ö-1);

264 
	`ö¸_t›
(
L
);

265 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

266 
	`£tobj2s
(
L
, 
func
, 
tm
);

267  
func
;

268 
	}
}

272 
	#öc_ci
(
L
) \

273 ((
L
->
ci
 =L->
íd_ci
Ë? 
	`growCI
(L) : \

274 (
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆlocCI
(
L
, L->
size_ci
)), ++L->
ci
))

	)

280 
	$luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
) {

281 
	`¥ötf
("debug: inÜuaD_precall\n");

282 
LClosuª
 *
˛
;

283 
±rdiff_t
 
fun¸
;

284 i‡(!
	`âisfun˘i⁄
(
func
))

285 
func
 = 
	`åyfuncTM
(
L
, func);

286 
fun¸
 = 
	`ßve°ack
(
L
, 
func
);

287 
˛
 = &
	`˛vÆue
(
func
)->
l
;

288 
L
->
ci
->
ßvedpc
 = L->savedpc;

289 
	`¥ötf
("debug: L->ci->ßvedp¯L->ßvedp¯%d\n", 
L
->
ßvedpc
);

290 i‡(!
˛
->
isC
) {

291 
	`¥ötf
("debug: ÊâßË°å Lua function\n");

292 
CÆlInfo
 *
ci
;

293 
StkId
 
°
, 
ba£
;

294 
PrŸo
 *
p
 = 
˛
->p;

295 
	`luaD_check°ack
(
L
, 
p
->
max°acksize
);

296 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

297 i‡(!
p
->
is_v¨¨g
) {

298 
ba£
 = 
func
 + 1;

299 i‡(
L
->
t›
 > 
ba£
 + 
p
->
num∑øms
)

300 
L
->
t›
 = 
ba£
 + 
p
->
num∑øms
;

303 
«rgs
 = 
	`ˇ°_öt
(
L
->
t›
 - 
func
) - 1;

304 
ba£
 = 
	`adju°_v¨¨gs
(
L
, 
p
, 
«rgs
);

305 
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

307 
ci
 = 
	`öc_ci
(
L
);

308 
ci
->
func
 = func;

309 
L
->
ba£
 = 
ci
->base = base;

310 
ci
->
t›
 = 
L
->
ba£
 + 
p
->
max°acksize
;

311 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

312 
L
->
ßvedpc
 = 
p
->
code
;

313 
ci
->
èûˇŒs
 = 0;

314 
ci
->
ƒesu…s
 =Çresults;

315 
°
 = 
L
->
t›
; sà< 
ci
->top; st++)

316 
	`£äûvÆue
(
°
);

317 
L
->
t›
 = 
ci
->top;

318 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
) {

319 
L
->
ßvedpc
++;

320 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCALL
, -1);

321 
L
->
ßvedpc
--;

323  
PCRLUA
;

326 
	`¥ötf
("debug: ÊâßË°å C function\n");

327 
CÆlInfo
 *
ci
;

328 
n
;

329 
	`luaD_check°ack
(
L
, 
LUA_MINSTACK
);

330 
ci
 = 
	`öc_ci
(
L
);

331 
	`¥ötf
("debug: fun¸ = %d\n", 
fun¸
);

332 
ci
->
func
 = 
	`ª°‹e°ack
(
L
, 
fun¸
);

333 
L
->
ba£
 = 
ci
->ba£ = ci->
func
 + 1;

334 
ci
->
t›
 = 
L
->t› + 
LUA_MINSTACK
;

335 
	`lua_as£π
(
ci
->
t›
 <
L
->
°ack_œ°
);

336 
ci
->
ƒesu…s
 =Çresults;

337 i‡(
L
->
hookmask
 & 
LUA_MASKCALL
)

338 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCALL
, -1);

339 
	`lua_u∆ock
(
L
);

341 
n
 = (*
	`cuº_func
(
L
)->
c
.
f
)(L);

342 
	`lua_lock
(
L
);

343 i‡(
n
 < 0)

344  
PCRYIELD
;

346 
	`luaD_posˇŒ
(
L
, L->
t›
 - 
n
);

347  
PCRC
;

350 
	}
}

353 
StkId
 
	$ˇŒªthooks
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
) {

354 
±rdiff_t
 
‰
 = 
	`ßve°ack
(
L
, 
fú°Resu…
);

355 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKRET
, -1);

356 i‡(
	`f_isLua
(
L
->
ci
)) {

357 (
L
->
hookmask
 & 
LUA_MASKRET
Ë&& L->
ci
->
èûˇŒs
--)

358 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKTAILRET
, -1);

360  
	`ª°‹e°ack
(
L
, 
‰
);

361 
	}
}

364 
	$luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
) {

365 
	`¥ötf
("debug: inÜuaD_poscall\n");

366 
StkId
 
ªs
;

367 
w™ãd
, 
i
;

368 
CÆlInfo
 *
ci
;

369 i‡(
L
->
hookmask
 & 
LUA_MASKRET
)

370 
fú°Resu…
 = 
	`ˇŒªthooks
(
L
, firstResult);

371 
ci
 = 
L
->ci--;

372 
ªs
 = 
ci
->
func
;

373 
w™ãd
 = 
ci
->
ƒesu…s
;

374 
L
->
ba£
 = (
ci
 - 1)->base;

375 
L
->
ßvedpc
 = (
ci
 - 1)->savedpc;

377 
i
 = 
w™ãd
; i !0 && 
fú°Resu…
 < 
L
->
t›
; i--)

378 
	`£tobjs2s
(
L
, 
ªs
++, 
fú°Resu…
++);

379 
i
-- > 0)

380 
	`£äûvÆue
(
ªs
++);

381 
L
->
t›
 = 
ªs
;

382  (
w™ãd
 - 
LUA_MULTRET
);

383 
	}
}

392 
	$luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
) {

393 
	`¥ötf
("debug: i¿luaD_ˇŒ, L->t› - L->°ack = %d, L->t› - &fun¯%d\n", 
L
->
t›
 - L->
°ack
, L->t› - 
func
);

394 i‡(++
L
->
nCˇŒs
 >
LUAI_MAXCCALLS
) {

395 i‡(
L
->
nCˇŒs
 =
LUAI_MAXCCALLS
)

396 
	`luaG_ru√º‹
(
L
, "C stack overflow");

397 i‡(
L
->
nCˇŒs
 >(
LUAI_MAXCCALLS
 + (LUAI_MAXCCALLS>>3)))

398 
	`luaD_throw
(
L
, 
LUA_ERRERR
);

400 i‡(
	`luaD_¥eˇŒ
(
L
, 
func
, 
nResu…s
Ë=
PCRLUA
)

401 
	`luaV_execuã
(
L
, 1);

402 
L
->
nCˇŒs
--;

403 
	`luaC_checkGC
(
L
);

404 
	}
}

407 
	$ªsume
 (
lua_Sèã
 *
L
, *
ud
) {

408 
StkId
 
fú°Arg
 = 
	`ˇ°
(StkId, 
ud
);

409 
CÆlInfo
 *
ci
 = 
L
->ci;

410 i‡(
L
->
°©us
 == 0) {

411 
	`lua_as£π
(
ci
 =
L
->
ba£_ci
 && 
fú°Arg
 > L->
ba£
);

412 i‡(
	`luaD_¥eˇŒ
(
L
, 
fú°Arg
 - 1, 
LUA_MULTRET
Ë!
PCRLUA
)

416 
	`lua_as£π
(
L
->
°©us
 =
LUA_YIELD
);

417 
L
->
°©us
 = 0;

418 i‡(!
	`f_isLua
(
ci
)) {

420 
	`lua_as£π
(
	`GET_OPCODE
(*((
ci
-1)->
ßvedpc
 - 1)Ë=
OP_CALL
 ||

421 
	`GET_OPCODE
(*((
ci
-1)->
ßvedpc
 - 1)Ë=
OP_TAILCALL
);

422 i‡(
	`luaD_posˇŒ
(
L
, 
fú°Arg
))

423 
L
->
t›
 = L->
ci
->top;

426 
L
->
ba£
 = L->
ci
->base;

428 
	`luaV_execuã
(
L
, 
	`ˇ°_öt
(L->
ci
 - L->
ba£_ci
));

429 
	}
}

432 
	$ªsume_îr‹
 (
lua_Sèã
 *
L
, c⁄° *
msg
) {

433 
L
->
t›
 = L->
ci
->
ba£
;

434 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
msg
));

435 
	`ö¸_t›
(
L
);

436 
	`lua_u∆ock
(
L
);

437  
LUA_ERRRUN
;

438 
	}
}

441 
LUA_API
 
	$lua_ªsume
 (
lua_Sèã
 *
L
, 
«rgs
) {

442 
°©us
;

443 
	`lua_lock
(
L
);

444 i‡(
L
->
°©us
 !
LUA_YIELD
 && (L->°©u†!0 || L->
ci
 !L->
ba£_ci
))

445  
	`ªsume_îr‹
(
L
, "cannotÑesumeÇon-suspended coroutine");

446 i‡(
L
->
nCˇŒs
 >
LUAI_MAXCCALLS
)

447  
	`ªsume_îr‹
(
L
, "C stack overflow");

448 
	`luai_u£r°©îesume
(
L
, 
«rgs
);

449 
	`lua_as£π
(
L
->
îrfunc
 == 0);

450 
L
->
ba£CˇŒs
 = ++L->
nCˇŒs
;

451 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ªsume
, L->
t›
 - 
«rgs
);

452 i‡(
°©us
 != 0) {

453 
L
->
°©us
 = 
	`ˇ°_byã
(status);

454 
	`luaD_£ãº‹obj
(
L
, 
°©us
, L->
t›
);

455 
L
->
ci
->
t›
 = L->top;

458 
	`lua_as£π
(
L
->
nCˇŒs
 =L->
ba£CˇŒs
);

459 
°©us
 = 
L
->status;

461 --
L
->
nCˇŒs
;

462 
	`lua_u∆ock
(
L
);

463  
°©us
;

464 
	}
}

467 
LUA_API
 
	$lua_yõld
 (
lua_Sèã
 *
L
, 
ƒesu…s
) {

468 
	`luai_u£r°©eyõld
(
L
, 
ƒesu…s
);

469 
	`lua_lock
(
L
);

470 i‡(
L
->
nCˇŒs
 > L->
ba£CˇŒs
)

471 
	`luaG_ru√º‹
(
L
, "attemptÅo yieldácross metamethod/C-call boundary");

472 
L
->
ba£
 = L->
t›
 - 
ƒesu…s
;

473 
L
->
°©us
 = 
LUA_YIELD
;

474 
	`lua_u∆ock
(
L
);

476 
	}
}

487 
	$luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

488 
±rdiff_t
 
ﬁd_t›
,Öådiff_à
ef
) {

489 
	`¥ötf
("debug: inÜuaD_pcall\n");

490 
°©us
;

491 
ﬁdnCˇŒs
 = 
L
->
nCˇŒs
;

492 
±rdiff_t
 
ﬁd_ci
 = 
	`ßveci
(
L
, L->
ci
);

493 
lu_byã
 
ﬁd_Ælowhooks
 = 
L
->
Ælowhook
;

494 
±rdiff_t
 
ﬁd_îrfunc
 = 
L
->
îrfunc
;

495 
L
->
îrfunc
 = 
ef
;

497 
°©us
 = 
	`luaD_øwru≈rŸe˘ed
(
L
, 
func
, 
u
);

498 i‡(
°©us
 != 0) {

499 
StkId
 
ﬁdt›
 = 
	`ª°‹e°ack
(
L
, 
ﬁd_t›
);

500 
	`luaF_˛o£
(
L
, 
ﬁdt›
);

501 
	`luaD_£ãº‹obj
(
L
, 
°©us
, 
ﬁdt›
);

502 
L
->
nCˇŒs
 = 
ﬁdnCˇŒs
;

503 
L
->
ci
 = 
	`ª°‹eci
(L, 
ﬁd_ci
);

504 
L
->
ba£
 = L->
ci
->base;

505 
L
->
ßvedpc
 = L->
ci
->savedpc;

506 
L
->
Ælowhook
 = 
ﬁd_Ælowhooks
;

507 
	`ª°‹e_°ack_limô
(
L
);

509 
L
->
îrfunc
 = 
ﬁd_îrfunc
;

510  
°©us
;

511 
	}
}

518 
	sSP¨£r
 {

519 
ZIO
 *
	mz
;

520 
Mbuf„r
 
	mbuff
;

521 c⁄° *
	m«me
;

527 
	$f_∑r£r
 (
lua_Sèã
 *
L
, *
ud
) {

528 
i
;

529 
PrŸo
 *
tf
;

530 
Closuª
 *
˛
;

531 
SP¨£r
 *
p
 = 
	`ˇ°
(SP¨£∏*, 
ud
);

532 
c
 = 
	`luaZ_lookahód
(
p
->
z
);

533 
	`luaC_checkGC
(
L
);

534 
tf
 = ((
c
 =
LUA_SIGNATURE
[0]Ë? 
luaU_undump
 : 
luaY_∑r£r
)(
L
, 
p
->
z
,

535 &
p
->
buff
,Ö->
«me
);

536 
˛
 = 
	`luaF_√wL˛osuª
(
L
, 
tf
->
nups
, 
	`hvÆue
(
	`gt
(L)));

537 
˛
->
l
.
p
 = 
tf
;

538 
i
 = 0; i < 
tf
->
nups
; i++)

539 
˛
->
l
.
upvÆs
[
i
] = 
	`luaF_√wupvÆ
(
L
);

540 
	`£t˛vÆue
(
L
, L->
t›
, 
˛
);

541 
	`ö¸_t›
(
L
);

542 
	}
}

545 
	$luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
) {

546 
SP¨£r
 
p
;

547 
°©us
;

548 
p
.
z
 = z;Ö.
«me
 =Çame;

549 
	`luaZ_öôbuf„r
(
L
, &
p
.
buff
);

550 
°©us
 = 
	`luaD_pˇŒ
(
L
, 
f_∑r£r
, &
p
, 
	`ßve°ack
(L, L->
t›
), L->
îrfunc
);

551 
	`luaZ_‰ìbuf„r
(
L
, &
p
.
buff
);

552  
°©us
;

553 
	}
}

	@src/ldo.h

7 #i‚de‡
ldo_h


8 
	#ldo_h


	)

11 
	~"lobje˘.h
"

12 
	~"l°©e.h
"

13 
	~"lzio.h
"

22 
	#luaD_check°ack
(
L
,
n
) \

23 i‡((*)
L
->
°ack_œ°
 - (*)L->
t›
 <(
n
)*()(
TVÆue
)) \

24 
	`luaD_grow°ack
(
L
, 
n
); \

25 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 - 
EXTRA_STACK
 - 1));

	)

28 
	#ö¸_t›
(
L
Ë{
	`luaD_check°ack
(L,1); L->
t›
++;}

	)

30 
	#ßve°ack
(
L
,
p
Ë((*)’Ë- (*)L->
°ack
)

	)

31 
	#ª°‹e°ack
(
L
,
n
Ë((
TVÆue
 *)((*)L->
°ack
 + (n)))

	)

33 
	#ßveci
(
L
,
p
Ë((*)’Ë- (*)L->
ba£_ci
)

	)

34 
	#ª°‹eci
(
L
,
n
Ë((
CÆlInfo
 *)((*)L->
ba£_ci
 + (n)))

	)

38 
	#PCRLUA
 0

	)

39 
	#PCRC
 1

	)

40 
	#PCRYIELD
 2

	)

44 (*
	tPfunc
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
);

46 
LUAI_FUNC
 
	`luaD_¥Ÿe˘ed∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, c⁄° *
«me
);

47 
LUAI_FUNC
 
	`luaD_ˇŒhook
 (
lua_Sèã
 *
L
, 
evít
, 
löe
);

48 
LUAI_FUNC
 
	`luaD_¥eˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
ƒesu…s
);

49 
LUAI_FUNC
 
	`luaD_ˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
func
, 
nResu…s
);

50 
LUAI_FUNC
 
	`luaD_pˇŒ
 (
lua_Sèã
 *
L
, 
Pfunc
 
func
, *
u
,

51 
±rdiff_t
 
ﬁdt›
,Öådiff_à
ef
);

52 
LUAI_FUNC
 
	`luaD_posˇŒ
 (
lua_Sèã
 *
L
, 
StkId
 
fú°Resu…
);

53 
LUAI_FUNC
 
	`luaD_ªÆlocCI
 (
lua_Sèã
 *
L
, 
√wsize
);

54 
LUAI_FUNC
 
	`luaD_ªÆloc°ack
 (
lua_Sèã
 *
L
, 
√wsize
);

55 
LUAI_FUNC
 
	`luaD_grow°ack
 (
lua_Sèã
 *
L
, 
n
);

57 
LUAI_FUNC
 
	`luaD_throw
 (
lua_Sèã
 *
L
, 
îrcode
);

58 
LUAI_FUNC
 
	`luaD_øwru≈rŸe˘ed
 (
lua_Sèã
 *
L
, 
Pfunc
 
f
, *
ud
);

60 
LUAI_FUNC
 
	`luaD_£ãº‹obj
 (
lua_Sèã
 *
L
, 
îrcode
, 
StkId
 
ﬁdt›
);

	@src/ldump.c

7 
	~<°ddef.h
>

9 
	#ldump_c


	)

10 
	#LUA_CORE


	)

12 
	~"lua.h
"

14 
	~"lobje˘.h
"

15 
	~"l°©e.h
"

16 
	~"lundump.h
"

19 
lua_Sèã
* 
	mL
;

20 
lua_Wrôî
 
	mwrôî
;

21 * 
	md©a
;

22 
	m°rù
;

23 
	m°©us
;

24 } 
	tDumpSèã
;

26 
	#DumpMem
(
b
,
n
,
size
,
D
Ë
	`DumpBlock
(b,“)*(size),D)

	)

27 
	#DumpV¨
(
x
,
D
Ë
	`DumpMem
(&x,1,(x),D)

	)

29 
	$DumpBlock
(c⁄° * 
b
, 
size_t
 
size
, 
DumpSèã
* 
D
)

31 i‡(
D
->
°©us
==0)

33 
	`lua_u∆ock
(
D
->
L
);

34 
D
->
°©us
=(*D->
wrôî
)(D->
L
,
b
,
size
,D->
d©a
);

35 
	`lua_lock
(
D
->
L
);

37 
	}
}

39 
	$DumpCh¨
(
y
, 
DumpSèã
* 
D
)

41 
x
=()
y
;

42 
	`DumpV¨
(
x
,
D
);

43 
	}
}

45 
	$DumpI¡
(
x
, 
DumpSèã
* 
D
)

47 
	`DumpV¨
(
x
,
D
);

48 
	}
}

50 
	$DumpNumbî
(
lua_Numbî
 
x
, 
DumpSèã
* 
D
)

52 
	`DumpV¨
(
x
,
D
);

53 
	}
}

55 
	$DumpVe˘‹
(c⁄° * 
b
, 
n
, 
size_t
 
size
, 
DumpSèã
* 
D
)

57 
	`DumpI¡
(
n
,
D
);

58 
	`DumpMem
(
b
,
n
,
size
,
D
);

59 
	}
}

61 
	$DumpSåög
(c⁄° 
TSåög
* 
s
, 
DumpSèã
* 
D
)

63 i‡(
s
==
NULL
 || 
	`gë°r
(s)==NULL)

65 
size_t
 
size
=0;

66 
	`DumpV¨
(
size
,
D
);

70 
size_t
 
size
=
s
->
tsv
.
Àn
+1;

71 
	`DumpV¨
(
size
,
D
);

72 
	`DumpBlock
(
	`gë°r
(
s
),
size
,
D
);

74 
	}
}

76 
	#DumpCode
(
f
,
D
Ë
	`DumpVe˘‹
(f->
code
,f->
sizecode
,(
In°ru˘i⁄
),D)

	)

78 
DumpFun˘i⁄
(c⁄° 
PrŸo
* 
f
, c⁄° 
TSåög
* 
p
, 
DumpSèã
* 
D
);

80 
	$DumpC⁄°™ts
(c⁄° 
PrŸo
* 
f
, 
DumpSèã
* 
D
)

82 
i
,
n
=
f
->
sizek
;

83 
	`DumpI¡
(
n
,
D
);

84 
i
=0; i<
n
; i++)

86 c⁄° 
TVÆue
* 
o
=&
f
->
k
[
i
];

87 
	`DumpCh¨
(
	`ây≥
(
o
),
D
);

88 
	`ây≥
(
o
))

90 
LUA_TNIL
:

92 
LUA_TBOOLEAN
:

93 
	`DumpCh¨
(
	`bvÆue
(
o
),
D
);

95 
LUA_TNUMBER
:

96 
	`DumpNumbî
(
	`nvÆue
(
o
),
D
);

98 
LUA_TSTRING
:

99 
	`DumpSåög
(
	`øwtsvÆue
(
o
),
D
);

102 
	`lua_as£π
(0);

106 
n
=
f
->
sizï
;

107 
	`DumpI¡
(
n
,
D
);

108 
i
=0; i<
n
; i++Ë
	`DumpFun˘i⁄
(
f
->
p
[i],f->
sour˚
,
D
);

109 
	}
}

111 
	$DumpDebug
(c⁄° 
PrŸo
* 
f
, 
DumpSèã
* 
D
)

113 
i
,
n
;

114 
n
(
D
->
°rù
Ë? 0 : 
f
->
sizñöeöfo
;

115 
	`DumpVe˘‹
(
f
->
löeöfo
,
n
,(),
D
);

116 
n
(
D
->
°rù
Ë? 0 : 
f
->
sizñocv¨s
;

117 
	`DumpI¡
(
n
,
D
);

118 
i
=0; i<
n
; i++)

120 
	`DumpSåög
(
f
->
locv¨s
[
i
].
v¨«me
,
D
);

121 
	`DumpI¡
(
f
->
locv¨s
[
i
].
°¨çc
,
D
);

122 
	`DumpI¡
(
f
->
locv¨s
[
i
].
ídpc
,
D
);

124 
n
(
D
->
°rù
Ë? 0 : 
f
->
sizeupvÆues
;

125 
	`DumpI¡
(
n
,
D
);

126 
i
=0; i<
n
; i++Ë
	`DumpSåög
(
f
->
upvÆues
[i],
D
);

127 
	}
}

129 
	$DumpFun˘i⁄
(c⁄° 
PrŸo
* 
f
, c⁄° 
TSåög
* 
p
, 
DumpSèã
* 
D
)

131 
	`DumpSåög
((
f
->
sour˚
==
p
 || 
D
->
°rù
Ë? 
NULL
 : f->source,D);

132 
	`DumpI¡
(
f
->
löedeföed
,
D
);

133 
	`DumpI¡
(
f
->
œ°löedeföed
,
D
);

134 
	`DumpCh¨
(
f
->
nups
,
D
);

135 
	`DumpCh¨
(
f
->
num∑øms
,
D
);

136 
	`DumpCh¨
(
f
->
is_v¨¨g
,
D
);

137 
	`DumpCh¨
(
f
->
max°acksize
,
D
);

138 
	`DumpCode
(
f
,
D
);

139 
	`DumpC⁄°™ts
(
f
,
D
);

140 
	`DumpDebug
(
f
,
D
);

141 
	}
}

143 
	$DumpHódî
(
DumpSèã
* 
D
)

145 
h
[
LUAC_HEADERSIZE
];

146 
	`luaU_hódî
(
h
);

147 
	`DumpBlock
(
h
,
LUAC_HEADERSIZE
,
D
);

148 
	}
}

153 
	$luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
, * 
d©a
, 
°rù
)

155 
DumpSèã
 
D
;

156 
D
.
L
=L;

157 
D
.
wrôî
=
w
;

158 
D
.
d©a
=data;

159 
D
.
°rù
=strip;

160 
D
.
°©us
=0;

161 
	`DumpHódî
(&
D
);

162 
	`DumpFun˘i⁄
(
f
,
NULL
,&
D
);

163  
D
.
°©us
;

164 
	}
}

	@src/lfunc.c

8 
	~<°ddef.h
>

10 
	#lfunc_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lfunc.h
"

16 
	~"lgc.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°©e.h
"

31 
Closuª
 *
	$luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
) {

32 
Closuª
 *
c
 = 
	`ˇ°
(Closuª *, 
	`luaM_mÆloc
(
L
, 
	`sizeC˛osuª
(
√Àms
)));

33 
	`luaC_lök
(
L
, 
	`obj2gco
(
c
), 
LUA_TFUNCTION
);

34 
c
->c.
isC
 = 1;

35 
c
->c.
ív
 = 
e
;

36 
c
->c.
nupvÆues
 = 
	`ˇ°_byã
(
√Àms
);

37  
c
;

38 
	}
}

41 
Closuª
 *
	$luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
) {

42 
Closuª
 *
c
 = 
	`ˇ°
(Closuª *, 
	`luaM_mÆloc
(
L
, 
	`sizeL˛osuª
(
√Àms
)));

43 
	`luaC_lök
(
L
, 
	`obj2gco
(
c
), 
LUA_TFUNCTION
);

44 
c
->
l
.
isC
 = 0;

45 
c
->
l
.
ív
 = 
e
;

46 
c
->
l
.
nupvÆues
 = 
	`ˇ°_byã
(
√Àms
);

47 
√Àms
--Ë
c
->
l
.
upvÆs
[√Àms] = 
NULL
;

48  
c
;

49 
	}
}

52 
UpVÆ
 *
	$luaF_√wupvÆ
 (
lua_Sèã
 *
L
) {

53 
UpVÆ
 *
uv
 = 
	`luaM_√w
(
L
, UpVal);

54 
	`luaC_lök
(
L
, 
	`obj2gco
(
uv
), 
LUA_TUPVAL
);

55 
uv
->
v
 = &uv->
u
.
vÆue
;

56 
	`£äûvÆue
(
uv
->
v
);

57  
uv
;

58 
	}
}

77 
UpVÆ
 *
	$luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

78 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

79 
GCObje˘
 **
µ
 = &
L
->
›íupvÆ
;

80 
UpVÆ
 *
p
;

81 
UpVÆ
 *
uv
;

82 *
µ
 !
NULL
 && (
p
 = 
	`ngcŸouv
(*µ))->
v
 >
Àvñ
) {

83 
	`lua_as£π
(
p
->
v
 !&p->
u
.
vÆue
);

84 i‡(
p
->
v
 =
Àvñ
) {

85 i‡(
	`isdód
(
g
, 
	`obj2gco
(
p
)))

86 
	`ch™gewhôe
(
	`obj2gco
(
p
));

87  
p
;

89 
µ
 = &
p
->
√xt
;

91 
uv
 = 
	`luaM_√w
(
L
, 
UpVÆ
);

92 
uv
->
â
 = 
LUA_TUPVAL
;

93 
uv
->
m¨ked
 = 
	`luaC_whôe
(
g
);

94 
uv
->
v
 = 
Àvñ
;

95 
uv
->
√xt
 = *
µ
;

96 *
µ
 = 
	`obj2gco
(
uv
);

97 
uv
->
u
.
l
.
¥ev
 = &
g
->
uvhód
;

98 
uv
->
u
.
l
.
√xt
 = 
g
->
uvhód
.u.l.next;

99 
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 = uv;

100 
g
->
uvhód
.
u
.
l
.
√xt
 = 
uv
;

101 
	`lua_as£π
(
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 == uv && uv->u.l.prev->u.l.next == uv);

102  
uv
;

103 
	}
}

106 
	$u∆ökupvÆ
 (
UpVÆ
 *
uv
) {

107 
	`lua_as£π
(
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 == uv && uv->u.l.prev->u.l.next == uv);

108 
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 = uv->u.l.prev;

109 
uv
->
u
.
l
.
¥ev
->u.l.
√xt
 = uv->u.l.next;

110 
	}
}

113 
	$luaF_‰ìupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

114 i‡(
uv
->
v
 !&uv->
u
.
vÆue
)

115 
	`u∆ökupvÆ
(
uv
);

116 
	`luaM_‰ì
(
L
, 
uv
);

117 
	}
}

134 
	$luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
) {

135 
UpVÆ
 *
uv
;

136 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

137 
L
->
›íupvÆ
 !
NULL
 && (
uv
 = 
	`ngcŸouv
(L->›íupvÆ))->
v
 >
Àvñ
) {

138 
GCObje˘
 *
o
 = 
	`obj2gco
(
uv
);

139 
	`lua_as£π
(!
	`isbœck
(
o
Ë&& 
uv
->
v
 !&uv->
u
.
vÆue
);

140 
L
->
›íupvÆ
 = 
uv
->
√xt
;

141 i‡(
	`isdód
(
g
, 
o
))

142 
	`luaF_‰ìupvÆ
(
L
, 
uv
);

144 
	`u∆ökupvÆ
(
uv
);

145 
	`£tobj
(
L
, &
uv
->
u
.
vÆue
, uv->
v
);

146 
uv
->
v
 = &uv->
u
.
vÆue
;

147 
	`luaC_lökupvÆ
(
L
, 
uv
);

150 
	}
}

153 
PrŸo
 *
	$luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
) {

154 
PrŸo
 *
f
 = 
	`luaM_√w
(
L
, Proto);

155 
	`luaC_lök
(
L
, 
	`obj2gco
(
f
), 
LUA_TPROTO
);

156 
f
->
k
 = 
NULL
;

157 
f
->
sizek
 = 0;

158 
f
->
p
 = 
NULL
;

159 
f
->
sizï
 = 0;

160 
f
->
code
 = 
NULL
;

161 
f
->
sizecode
 = 0;

162 
f
->
sizñöeöfo
 = 0;

163 
f
->
sizeupvÆues
 = 0;

164 
f
->
nups
 = 0;

165 
f
->
upvÆues
 = 
NULL
;

166 
f
->
num∑øms
 = 0;

167 
f
->
is_v¨¨g
 = 0;

168 
f
->
max°acksize
 = 0;

169 
f
->
löeöfo
 = 
NULL
;

170 
f
->
sizñocv¨s
 = 0;

171 
f
->
locv¨s
 = 
NULL
;

172 
f
->
löedeföed
 = 0;

173 
f
->
œ°löedeföed
 = 0;

174 
f
->
sour˚
 = 
NULL
;

175  
f
;

176 
	}
}

179 
	$luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
) {

180 
	`luaM_‰ì¨øy
(
L
, 
f
->
code
, f->
sizecode
, 
In°ru˘i⁄
);

181 
	`luaM_‰ì¨øy
(
L
, 
f
->
p
, f->
sizï
, 
PrŸo
 *);

182 
	`luaM_‰ì¨øy
(
L
, 
f
->
k
, f->
sizek
, 
TVÆue
);

183 
	`luaM_‰ì¨øy
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, );

184 
	`luaM_‰ì¨øy
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
LocV¨
);

185 
	`luaM_‰ì¨øy
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, 
TSåög
 *);

186 
	`luaM_‰ì
(
L
, 
f
);

187 
	}
}

190 
	$luaF_‰ì˛osuª
 (
lua_Sèã
 *
L
, 
Closuª
 *
c
) {

191 
size
 = (
c
->c.
isC
Ë? 
	`sizeC˛osuª
(c->c.
nupvÆues
) :

192 
	`sizeL˛osuª
(
c
->
l
.
nupvÆues
);

193 
	`luaM_‰ìmem
(
L
, 
c
, 
size
);

194 
	}
}

207 c⁄° *
	$luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
f
, 
loˇl_numbî
, 
pc
) {

208 
i
;

209 
i
 = 0; i<
f
->
sizñocv¨s
 && f->
locv¨s
[i].
°¨çc
 <
pc
; i++) {

210 i‡(
pc
 < 
f
->
locv¨s
[
i
].
ídpc
) {

211 
loˇl_numbî
--;

212 i‡(
loˇl_numbî
 == 0)

213  
	`gë°r
(
f
->
locv¨s
[
i
].
v¨«me
);

216  
NULL
;

217 
	}
}

	@src/lfunc.h

7 #i‚de‡
lfunc_h


8 
	#lfunc_h


	)

11 
	~"lobje˘.h
"

14 
	#sizeC˛osuª
(
n
Ë(
	`ˇ°
(, (
CClosuª
)) + \

15 
	`ˇ°
(, (
TVÆue
)*((
n
)-1)))

	)

17 
	#sizeL˛osuª
(
n
Ë(
	`ˇ°
(, (
LClosuª
)) + \

18 
	`ˇ°
(, (
TVÆue
 *)*((
n
)-1)))

	)

21 
LUAI_FUNC
 
PrŸo
 *
luaF_√w¥Ÿo
 (
lua_Sèã
 *
L
);

22 
LUAI_FUNC
 
Closuª
 *
luaF_√wC˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
);

23 
LUAI_FUNC
 
Closuª
 *
luaF_√wL˛osuª
 (
lua_Sèã
 *
L
, 
√Àms
, 
TabÀ
 *
e
);

24 
LUAI_FUNC
 
UpVÆ
 *
luaF_√wupvÆ
 (
lua_Sèã
 *
L
);

25 
LUAI_FUNC
 
UpVÆ
 *
luaF_födupvÆ
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

26 
LUAI_FUNC
 
luaF_˛o£
 (
lua_Sèã
 *
L
, 
StkId
 
Àvñ
);

27 
LUAI_FUNC
 
luaF_‰ì¥Ÿo
 (
lua_Sèã
 *
L
, 
PrŸo
 *
f
);

28 
LUAI_FUNC
 
luaF_‰ì˛osuª
 (
lua_Sèã
 *
L
, 
Closuª
 *
c
);

29 
LUAI_FUNC
 
luaF_‰ìupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

30 
LUAI_FUNC
 c⁄° *
luaF_gëloˇ ame
 (c⁄° 
PrŸo
 *
func
, 
loˇl_numbî
,

31 
pc
);

	@src/lgc.c

7 
	~<°rög.h
>

9 
	#lgc_c


	)

10 
	#LUA_CORE


	)

12 
	~"lua.h
"

14 
	~"ldebug.h
"

15 
	~"ldo.h
"

16 
	~"lfunc.h
"

17 
	~"lgc.h
"

18 
	~"lmem.h
"

19 
	~"lobje˘.h
"

20 
	~"l°©e.h
"

21 
	~"l°rög.h
"

22 
	~"…abÀ.h
"

23 
	~"…m.h
"

26 
	#GCSTEPSIZE
 1024u

	)

27 
	#GCSWEEPMAX
 40

	)

28 
	#GCSWEEPCOST
 10

	)

29 
	#GCFINALIZECOST
 100

	)

32 
	#maskm¨ks
 
	`ˇ°_byã
(~(
	`bômask
(
BLACKBIT
)|
WHITEBITS
))

	)

34 
	#makewhôe
(
g
,
x
) \

35 ((
x
)->
gch
.
m¨ked
 = 
	`ˇ°_byã
(((x)->gch.m¨ked & 
maskm¨ks
Ë| 
	`luaC_whôe
(
g
)))

	)

37 
	#whôe2gøy
(
x
Ë
	`ª£t2bôs
((x)->
gch
.
m¨ked
, 
WHITE0BIT
, 
WHITE1BIT
)

	)

38 
	#bœck2gøy
(
x
Ë
	`ª£tbô
((x)->
gch
.
m¨ked
, 
BLACKBIT
)

	)

40 
	#°rögm¨k
(
s
Ë
	`ª£t2bôs
((s)->
tsv
.
m¨ked
, 
WHITE0BIT
, 
WHITE1BIT
)

	)

43 
	#isföÆized
(
u
Ë
	`ã°bô
((u)->
m¨ked
, 
FINALIZEDBIT
)

	)

44 
	#m¨kföÆized
(
u
Ë
	`l_£tbô
((u)->
m¨ked
, 
FINALIZEDBIT
)

	)

47 
	#KEYWEAK
 
	`bômask
(
KEYWEAKBIT
)

	)

48 
	#VALUEWEAK
 
	`bômask
(
VALUEWEAKBIT
)

	)

52 
	#m¨kvÆue
(
g
,
o
Ë{ 
	`checkc⁄si°ícy
(o); \

53 i‡(
	`iscﬁÀ˘abÀ
(
o
Ë&& 
	`iswhôe
(
	`gcvÆue
(o))Ë
	`ªÆlym¨kobje˘
(
g
,gcvÆue(o)); }

	)

55 
	#m¨kobje˘
(
g
,
t
Ë{ i‡(
	`iswhôe
(
	`obj2gco
(t))) \

56 
	`ªÆlym¨kobje˘
(
g
, 
	`obj2gco
(
t
)); }

	)

59 
	#£âhªshﬁd
(
g
Ë(g->
GCthªshﬁd
 = (g->
e°im©e
/100Ë* g->
g˝au£
)

	)

62 
	$ªmovì¡ry
 (
Node
 *
n
) {

63 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
n
)));

64 i‡(
	`iscﬁÀ˘abÀ
(
	`gkey
(
n
)))

65 
	`£âty≥
(
	`gkey
(
n
), 
LUA_TDEADKEY
);

66 
	}
}

69 
	$ªÆlym¨kobje˘
 (
globÆ_Sèã
 *
g
, 
GCObje˘
 *
o
) {

70 
	`lua_as£π
(
	`iswhôe
(
o
Ë&& !
	`isdód
(
g
, o));

71 
	`whôe2gøy
(
o
);

72 
o
->
gch
.
â
) {

73 
LUA_TSTRING
: {

76 
LUA_TUSERDATA
: {

77 
TabÀ
 *
mt
 = 
	`gco2u
(
o
)->
më©abÀ
;

78 
	`gøy2bœck
(
o
);

79 i‡(
mt
Ë
	`m¨kobje˘
(
g
, mt);

80 
	`m¨kobje˘
(
g
, 
	`gco2u
(
o
)->
ív
);

83 
LUA_TUPVAL
: {

84 
UpVÆ
 *
uv
 = 
	`gco2uv
(
o
);

85 
	`m¨kvÆue
(
g
, 
uv
->
v
);

86 i‡(
uv
->
v
 =&uv->
u
.
vÆue
)

87 
	`gøy2bœck
(
o
);

90 
LUA_TFUNCTION
: {

91 
	`gco2˛
(
o
)->
c
.
g˛i°
 = 
g
->
gøy
;

92 
g
->
gøy
 = 
o
;

95 
LUA_TTABLE
: {

96 
	`gco2h
(
o
)->
g˛i°
 = 
g
->
gøy
;

97 
g
->
gøy
 = 
o
;

100 
LUA_TTHREAD
: {

101 
	`gco2th
(
o
)->
g˛i°
 = 
g
->
gøy
;

102 
g
->
gøy
 = 
o
;

105 
LUA_TPROTO
: {

106 
	`gco2p
(
o
)->
g˛i°
 = 
g
->
gøy
;

107 
g
->
gøy
 = 
o
;

110 : 
	`lua_as£π
(0);

112 
	}
}

115 
	$m¨ktmu
 (
globÆ_Sèã
 *
g
) {

116 
GCObje˘
 *
u
 = 
g
->
tmud©a
;

117 i‡(
u
) {

119 
u
 = u->
gch
.
√xt
;

120 
	`makewhôe
(
g
, 
u
);

121 
	`ªÆlym¨kobje˘
(
g
, 
u
);

122 } 
u
 !
g
->
tmud©a
);

124 
	}
}

128 
size_t
 
	$luaC_£∑øãud©a
 (
lua_Sèã
 *
L
, 
Æl
) {

129 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

130 
size_t
 
dódmem
 = 0;

131 
GCObje˘
 **
p
 = &
g
->
maöthªad
->
√xt
;

132 
GCObje˘
 *
cuº
;

133 (
cuº
 = *
p
Ë!
NULL
) {

134 i‡(!(
	`iswhôe
(
cuº
Ë|| 
Æl
Ë|| 
	`isföÆized
(
	`gco2u
(curr)))

135 
p
 = &
cuº
->
gch
.
√xt
;

136 i‡(
	`Á°tm
(
L
, 
	`gco2u
(
cuº
)->
më©abÀ
, 
TM_GC
Ë=
NULL
) {

137 
	`m¨kföÆized
(
	`gco2u
(
cuº
));

138 
p
 = &
cuº
->
gch
.
√xt
;

141 
dódmem
 +
	`sizeud©a
(
	`gco2u
(
cuº
));

142 
	`m¨kföÆized
(
	`gco2u
(
cuº
));

143 *
p
 = 
cuº
->
gch
.
√xt
;

145 i‡(
g
->
tmud©a
 =
NULL
)

146 
g
->
tmud©a
 = 
cuº
->
gch
.
√xt
 = curr;

148 
cuº
->
gch
.
√xt
 = 
g
->
tmud©a
->gch.next;

149 
g
->
tmud©a
->
gch
.
√xt
 = 
cuº
;

150 
g
->
tmud©a
 = 
cuº
;

154  
dódmem
;

155 
	}
}

158 
	$åavî£èbÀ
 (
globÆ_Sèã
 *
g
, 
TabÀ
 *
h
) {

159 
i
;

160 
wókkey
 = 0;

161 
wókvÆue
 = 0;

162 c⁄° 
TVÆue
 *
mode
;

163 i‡(
h
->
më©abÀ
)

164 
	`m¨kobje˘
(
g
, 
h
->
më©abÀ
);

165 
mode
 = 
	`gÁ°tm
(
g
, 
h
->
më©abÀ
, 
TM_MODE
);

166 i‡(
mode
 && 
	`âis°rög
(mode)) {

167 
wókkey
 = (
	`°rchr
(
	`svÆue
(
mode
), 'k'Ë!
NULL
);

168 
wókvÆue
 = (
	`°rchr
(
	`svÆue
(
mode
), 'v'Ë!
NULL
);

169 i‡(
wókkey
 || 
wókvÆue
) {

170 
h
->
m¨ked
 &~(
KEYWEAK
 | 
VALUEWEAK
);

171 
h
->
m¨ked
 |
	`ˇ°_byã
((
wókkey
 << 
KEYWEAKBIT
) |

172 (
wókvÆue
 << 
VALUEWEAKBIT
));

173 
h
->
g˛i°
 = 
g
->
wók
;

174 
g
->
wók
 = 
	`obj2gco
(
h
);

177 i‡(
wókkey
 && 
wókvÆue
)  1;

178 i‡(!
wókvÆue
) {

179 
i
 = 
h
->
sizóºay
;

180 
i
--)

181 
	`m¨kvÆue
(
g
, &
h
->
¨øy
[
i
]);

183 
i
 = 
	`sizíode
(
h
);

184 
i
--) {

185 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

186 
	`lua_as£π
(
	`ây≥
(
	`gkey
(
n
)Ë!
LUA_TDEADKEY
 || 
	`âi¢û
(
	`gvÆ
(n)));

187 i‡(
	`âi¢û
(
	`gvÆ
(
n
)))

188 
	`ªmovì¡ry
(
n
);

190 
	`lua_as£π
(!
	`âi¢û
(
	`gkey
(
n
)));

191 i‡(!
wókkey
Ë
	`m¨kvÆue
(
g
, 
	`gkey
(
n
));

192 i‡(!
wókvÆue
Ë
	`m¨kvÆue
(
g
, 
	`gvÆ
(
n
));

195  
wókkey
 || 
wókvÆue
;

196 
	}
}

203 
	$åavî£¥Ÿo
 (
globÆ_Sèã
 *
g
, 
PrŸo
 *
f
) {

204 
i
;

205 i‡(
f
->
sour˚
Ë
	`°rögm¨k
(f->source);

206 
i
=0; i<
f
->
sizek
; i++)

207 
	`m¨kvÆue
(
g
, &
f
->
k
[
i
]);

208 
i
=0; i<
f
->
sizeupvÆues
; i++) {

209 i‡(
f
->
upvÆues
[
i
])

210 
	`°rögm¨k
(
f
->
upvÆues
[
i
]);

212 
i
=0; i<
f
->
sizï
; i++) {

213 i‡(
f
->
p
[
i
])

214 
	`m¨kobje˘
(
g
, 
f
->
p
[
i
]);

216 
i
=0; i<
f
->
sizñocv¨s
; i++) {

217 i‡(
f
->
locv¨s
[
i
].
v¨«me
)

218 
	`°rögm¨k
(
f
->
locv¨s
[
i
].
v¨«me
);

220 
	}
}

224 
	$åavî£˛osuª
 (
globÆ_Sèã
 *
g
, 
Closuª
 *
˛
) {

225 
	`m¨kobje˘
(
g
, 
˛
->
c
.
ív
);

226 i‡(
˛
->
c
.
isC
) {

227 
i
;

228 
i
=0; i<
˛
->
c
.
nupvÆues
; i++)

229 
	`m¨kvÆue
(
g
, &
˛
->
c
.
upvÆue
[
i
]);

232 
i
;

233 
	`lua_as£π
(
˛
->
l
.
nupvÆues
 =˛->l.
p
->
nups
);

234 
	`m¨kobje˘
(
g
, 
˛
->
l
.
p
);

235 
i
=0; i<
˛
->
l
.
nupvÆues
; i++)

236 
	`m¨kobje˘
(
g
, 
˛
->
l
.
upvÆs
[
i
]);

238 
	}
}

241 
	$check°acksizes
 (
lua_Sèã
 *
L
, 
StkId
 
max
) {

242 
ci_u£d
 = 
	`ˇ°_öt
(
L
->
ci
 - L->
ba£_ci
);

243 
s_u£d
 = 
	`ˇ°_öt
(
max
 - 
L
->
°ack
);

244 i‡(
L
->
size_ci
 > 
LUAI_MAXCALLS
)

246 i‡(4*
ci_u£d
 < 
L
->
size_ci
 && 2*
BASIC_CI_SIZE
 < L->size_ci)

247 
	`luaD_ªÆlocCI
(
L
, L->
size_ci
/2);

248 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆlocCI
(
L
, 
ci_u£d
 + 1));

249 i‡(4*
s_u£d
 < 
L
->
°acksize
 &&

250 2*(
BASIC_STACK_SIZE
+
EXTRA_STACK
Ë< 
L
->
°acksize
)

251 
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
/2);

252 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, 
s_u£d
));

253 
	}
}

256 
	$åavî£°ack
 (
globÆ_Sèã
 *
g
, 
lua_Sèã
 *
l
) {

257 
StkId
 
o
, 
lim
;

258 
CÆlInfo
 *
ci
;

259 
	`m¨kvÆue
(
g
, 
	`gt
(
l
));

260 
lim
 = 
l
->
t›
;

261 
ci
 = 
l
->
ba£_ci
; ci <=Ü->ci; ci++) {

262 
	`lua_as£π
(
ci
->
t›
 <
l
->
°ack_œ°
);

263 i‡(
lim
 < 
ci
->
t›
)Üim = ci->top;

265 
o
 = 
l
->
°ack
; o <Ü->
t›
; o++)

266 
	`m¨kvÆue
(
g
, 
o
);

267 ; 
o
 <
lim
; o++)

268 
	`£äûvÆue
(
o
);

269 
	`check°acksizes
(
l
, 
lim
);

270 
	}
}

277 
l_mem
 
	$¥›ag©em¨k
 (
globÆ_Sèã
 *
g
) {

278 
GCObje˘
 *
o
 = 
g
->
gøy
;

279 
	`lua_as£π
(
	`isgøy
(
o
));

280 
	`gøy2bœck
(
o
);

281 
o
->
gch
.
â
) {

282 
LUA_TTABLE
: {

283 
TabÀ
 *
h
 = 
	`gco2h
(
o
);

284 
g
->
gøy
 = 
h
->
g˛i°
;

285 i‡(
	`åavî£èbÀ
(
g
, 
h
))

286 
	`bœck2gøy
(
o
);

287  (
TabÀ
Ë+ (
TVÆue
Ë* 
h
->
sizóºay
 +

288 (
Node
Ë* 
	`sizíode
(
h
);

290 
LUA_TFUNCTION
: {

291 
Closuª
 *
˛
 = 
	`gco2˛
(
o
);

292 
g
->
gøy
 = 
˛
->
c
.
g˛i°
;

293 
	`åavî£˛osuª
(
g
, 
˛
);

294  (
˛
->
c
.
isC
Ë? 
	`sizeC˛osuª
(˛->c.
nupvÆues
) :

295 
	`sizeL˛osuª
(
˛
->
l
.
nupvÆues
);

297 
LUA_TTHREAD
: {

298 
lua_Sèã
 *
th
 = 
	`gco2th
(
o
);

299 
g
->
gøy
 = 
th
->
g˛i°
;

300 
th
->
g˛i°
 = 
g
->
gøyagaö
;

301 
g
->
gøyagaö
 = 
o
;

302 
	`bœck2gøy
(
o
);

303 
	`åavî£°ack
(
g
, 
th
);

304  (
lua_Sèã
Ë+ (
TVÆue
Ë* 
th
->
°acksize
 +

305 (
CÆlInfo
Ë* 
th
->
size_ci
;

307 
LUA_TPROTO
: {

308 
PrŸo
 *
p
 = 
	`gco2p
(
o
);

309 
g
->
gøy
 = 
p
->
g˛i°
;

310 
	`åavî£¥Ÿo
(
g
, 
p
);

311  (
PrŸo
Ë+ (
In°ru˘i⁄
Ë* 
p
->
sizecode
 +

312 (
PrŸo
 *Ë* 
p
->
sizï
 +

313 (
TVÆue
Ë* 
p
->
sizek
 +

314 (Ë* 
p
->
sizñöeöfo
 +

315 (
LocV¨
Ë* 
p
->
sizñocv¨s
 +

316 (
TSåög
 *Ë* 
p
->
sizeupvÆues
;

318 : 
	`lua_as£π
(0);  0;

320 
	}
}

323 
size_t
 
	$¥›ag©óŒ
 (
globÆ_Sèã
 *
g
) {

324 
size_t
 
m
 = 0;

325 
g
->
gøy
Ë
m
 +
	`¥›ag©em¨k
(g);

326  
m
;

327 
	}
}

337 
	$is˛óªd
 (c⁄° 
TVÆue
 *
o
, 
iskey
) {

338 i‡(!
	`iscﬁÀ˘abÀ
(
o
))  0;

339 i‡(
	`âis°rög
(
o
)) {

340 
	`°rögm¨k
(
	`øwtsvÆue
(
o
));

343  
	`iswhôe
(
	`gcvÆue
(
o
)) ||

344 (
	`âisu£rd©a
(
o
Ë&& (!
iskey
 && 
	`isföÆized
(
	`uvÆue
(o))));

345 
	}
}

351 
	$˛óπabÀ
 (
GCObje˘
 *
l
) {

352 
l
) {

353 
TabÀ
 *
h
 = 
	`gco2h
(
l
);

354 
i
 = 
h
->
sizóºay
;

355 
	`lua_as£π
(
	`ã°bô
(
h
->
m¨ked
, 
VALUEWEAKBIT
) ||

356 
	`ã°bô
(
h
->
m¨ked
, 
KEYWEAKBIT
));

357 i‡(
	`ã°bô
(
h
->
m¨ked
, 
VALUEWEAKBIT
)) {

358 
i
--) {

359 
TVÆue
 *
o
 = &
h
->
¨øy
[
i
];

360 i‡(
	`is˛óªd
(
o
, 0))

361 
	`£äûvÆue
(
o
);

364 
i
 = 
	`sizíode
(
h
);

365 
i
--) {

366 
Node
 *
n
 = 
	`gnode
(
h
, 
i
);

367 i‡(!
	`âi¢û
(
	`gvÆ
(
n
)) &&

368 (
	`is˛óªd
(
	`key2tvÆ
(
n
), 1Ë|| is˛óªd(
	`gvÆ
(n), 0))) {

369 
	`£äûvÆue
(
	`gvÆ
(
n
));

370 
	`ªmovì¡ry
(
n
);

373 
l
 = 
h
->
g˛i°
;

375 
	}
}

378 
	$‰ìobj
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
) {

379 
o
->
gch
.
â
) {

380 
LUA_TPROTO
: 
	`luaF_‰ì¥Ÿo
(
L
, 
	`gco2p
(
o
)); ;

381 
LUA_TFUNCTION
: 
	`luaF_‰ì˛osuª
(
L
, 
	`gco2˛
(
o
)); ;

382 
LUA_TUPVAL
: 
	`luaF_‰ìupvÆ
(
L
, 
	`gco2uv
(
o
)); ;

383 
LUA_TTABLE
: 
	`luaH_‰ì
(
L
, 
	`gco2h
(
o
)); ;

384 
LUA_TTHREAD
: {

385 
	`lua_as£π
(
	`gco2th
(
o
Ë!
L
 && gco2th(oË!
	`G
(L)->
maöthªad
);

386 
	`luaE_‰ìthªad
(
L
, 
	`gco2th
(
o
));

389 
LUA_TSTRING
: {

390 
	`G
(
L
)->
°π
.
nu£
--;

391 
	`luaM_‰ìmem
(
L
, 
o
, 
	`size°rög
(
	`gco2ts
(o)));

394 
LUA_TUSERDATA
: {

395 
	`luaM_‰ìmem
(
L
, 
o
, 
	`sizeud©a
(
	`gco2u
(o)));

398 : 
	`lua_as£π
(0);

400 
	}
}

404 
	#swìpwhﬁñi°
(
L
,
p
Ë
	`swì∂i°
(L,p,
MAX_LUMEM
)

	)

407 
GCObje˘
 **
	$swì∂i°
 (
lua_Sèã
 *
L
, 
GCObje˘
 **
p
, 
lu_mem
 
cou¡
) {

408 
GCObje˘
 *
cuº
;

409 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

410 
dódmask
 = 
	`Ÿhîwhôe
(
g
);

411 (
cuº
 = *
p
Ë!
NULL
 && 
cou¡
-- > 0) {

412 i‡(
cuº
->
gch
.
â
 =
LUA_TTHREAD
)

413 
	`swìpwhﬁñi°
(
L
, &
	`gco2th
(
cuº
)->
›íupvÆ
);

414 i‡((
cuº
->
gch
.
m¨ked
 ^ 
WHITEBITS
Ë& 
dódmask
) {

415 
	`lua_as£π
(!
	`isdód
(
g
, 
cuº
Ë|| 
	`ã°bô
(cuº->
gch
.
m¨ked
, 
FIXEDBIT
));

416 
	`makewhôe
(
g
, 
cuº
);

417 
p
 = &
cuº
->
gch
.
√xt
;

420 
	`lua_as£π
(
	`isdód
(
g
, 
cuº
Ë|| 
dódmask
 =
	`bômask
(
SFIXEDBIT
));

421 *
p
 = 
cuº
->
gch
.
√xt
;

422 i‡(
cuº
 =
g
->
roŸgc
)

423 
g
->
roŸgc
 = 
cuº
->
gch
.
√xt
;

424 
	`‰ìobj
(
L
, 
cuº
);

427  
p
;

428 
	}
}

431 
	$checkSizes
 (
lua_Sèã
 *
L
) {

432 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

434 i‡(
g
->
°π
.
nu£
 < 
	`ˇ°
(
lu_öt32
, g->°π.
size
/4) &&

435 
g
->
°π
.
size
 > 
MINSTRTABSIZE
*2)

436 
	`luaS_ªsize
(
L
, 
g
->
°π
.
size
/2);

438 i‡(
	`luaZ_sizebuf„r
(&
g
->
buff
Ë> 
LUA_MINBUFFER
*2) {

439 
size_t
 
√wsize
 = 
	`luaZ_sizebuf„r
(&
g
->
buff
) / 2;

440 
	`luaZ_ªsizebuf„r
(
L
, &
g
->
buff
, 
√wsize
);

442 
	}
}

445 
	$GCTM
 (
lua_Sèã
 *
L
) {

446 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

447 
GCObje˘
 *
o
 = 
g
->
tmud©a
->
gch
.
√xt
;

448 
Ud©a
 *
ud©a
 = 
	`øwgco2u
(
o
);

449 c⁄° 
TVÆue
 *
tm
;

451 i‡(
o
 =
g
->
tmud©a
)

452 
g
->
tmud©a
 = 
NULL
;

454 
g
->
tmud©a
->
gch
.
√xt
 = 
ud©a
->
uv
.next;

455 
ud©a
->
uv
.
√xt
 = 
g
->
maöthªad
->next;

456 
g
->
maöthªad
->
√xt
 = 
o
;

457 
	`makewhôe
(
g
, 
o
);

458 
tm
 = 
	`Á°tm
(
L
, 
ud©a
->
uv
.
më©abÀ
, 
TM_GC
);

459 i‡(
tm
 !
NULL
) {

460 
lu_byã
 
ﬁdah
 = 
L
->
Ælowhook
;

461 
lu_mem
 
ﬁdt
 = 
g
->
GCthªshﬁd
;

462 
L
->
Ælowhook
 = 0;

463 
g
->
GCthªshﬁd
 = 2*g->
tŸÆbyãs
;

464 
	`£tobj2s
(
L
, L->
t›
, 
tm
);

465 
	`£tuvÆue
(
L
, L->
t›
+1, 
ud©a
);

466 
L
->
t›
 += 2;

467 
	`luaD_ˇŒ
(
L
, L->
t›
 - 2, 0);

468 
L
->
Ælowhook
 = 
ﬁdah
;

469 
g
->
GCthªshﬁd
 = 
ﬁdt
;

471 
	}
}

477 
	$luaC_ˇŒGCTM
 (
lua_Sèã
 *
L
) {

478 
	`G
(
L
)->
tmud©a
)

479 
	`GCTM
(
L
);

480 
	}
}

483 
	$luaC_‰ìÆl
 (
lua_Sèã
 *
L
) {

484 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

485 
i
;

486 
g
->
cuºítwhôe
 = 
WHITEBITS
 | 
	`bômask
(
SFIXEDBIT
);

487 
	`swìpwhﬁñi°
(
L
, &
g
->
roŸgc
);

488 
i
 = 0; i < 
g
->
°π
.
size
; i++)

489 
	`swìpwhﬁñi°
(
L
, &
g
->
°π
.
hash
[
i
]);

490 
	}
}

493 
	$m¨kmt
 (
globÆ_Sèã
 *
g
) {

494 
i
;

495 
i
=0; i<
NUM_TAGS
; i++)

496 i‡(
g
->
mt
[
i
]Ë
	`m¨kobje˘
(g, g->mt[i]);

497 
	}
}

501 
	$m¨kroŸ
 (
lua_Sèã
 *
L
) {

502 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

503 
g
->
gøy
 = 
NULL
;

504 
g
->
gøyagaö
 = 
NULL
;

505 
g
->
wók
 = 
NULL
;

506 
	`m¨kobje˘
(
g
, g->
maöthªad
);

508 
	`m¨kvÆue
(
g
, 
	`gt
(g->
maöthªad
));

509 
	`m¨kvÆue
(
g
, 
	`ªgi°ry
(
L
));

510 
	`m¨kmt
(
g
);

511 
g
->
gc°©e
 = 
GCS¥›ag©e
;

512 
	}
}

515 
	$ªm¨kupvÆs
 (
globÆ_Sèã
 *
g
) {

516 
UpVÆ
 *
uv
;

517 
uv
 = 
g
->
uvhód
.
u
.
l
.
√xt
; uv != &g->uvhead; uv = uv->u.l.next) {

518 
	`lua_as£π
(
uv
->
u
.
l
.
√xt
->u.l.
¥ev
 == uv && uv->u.l.prev->u.l.next == uv);

519 i‡(
	`isgøy
(
	`obj2gco
(
uv
)))

520 
	`m¨kvÆue
(
g
, 
uv
->
v
);

522 
	}
}

525 
	$©omic
 (
lua_Sèã
 *
L
) {

526 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

527 
size_t
 
udsize
;

529 
	`ªm¨kupvÆs
(
g
);

531 
	`¥›ag©óŒ
(
g
);

533 
g
->
gøy
 = g->
wók
;

534 
g
->
wók
 = 
NULL
;

535 
	`lua_as£π
(!
	`iswhôe
(
	`obj2gco
(
g
->
maöthªad
)));

536 
	`m¨kobje˘
(
g
, 
L
);

537 
	`m¨kmt
(
g
);

538 
	`¥›ag©óŒ
(
g
);

540 
g
->
gøy
 = g->
gøyagaö
;

541 
g
->
gøyagaö
 = 
NULL
;

542 
	`¥›ag©óŒ
(
g
);

543 
udsize
 = 
	`luaC_£∑øãud©a
(
L
, 0);

544 
	`m¨ktmu
(
g
);

545 
udsize
 +
	`¥›ag©óŒ
(
g
);

546 
	`˛óπabÀ
(
g
->
wók
);

548 
g
->
cuºítwhôe
 = 
	`ˇ°_byã
(
	`Ÿhîwhôe
(g));

549 
g
->
swìp°rgc
 = 0;

550 
g
->
swìpgc
 = &g->
roŸgc
;

551 
g
->
gc°©e
 = 
GCSswìp°rög
;

552 
g
->
e°im©e
 = g->
tŸÆbyãs
 - 
udsize
;

553 
	}
}

556 
l_mem
 
	$sögÀ°ï
 (
lua_Sèã
 *
L
) {

557 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

559 
g
->
gc°©e
) {

560 
GCS∑u£
: {

561 
	`m¨kroŸ
(
L
);

564 
GCS¥›ag©e
: {

565 i‡(
g
->
gøy
)

566  
	`¥›ag©em¨k
(
g
);

568 
	`©omic
(
L
);

572 
GCSswìp°rög
: {

573 
lu_mem
 
ﬁd
 = 
g
->
tŸÆbyãs
;

574 
	`swìpwhﬁñi°
(
L
, &
g
->
°π
.
hash
[g->
swìp°rgc
++]);

575 i‡(
g
->
swìp°rgc
 >g->
°π
.
size
)

576 
g
->
gc°©e
 = 
GCSswìp
;

577 
	`lua_as£π
(
ﬁd
 >
g
->
tŸÆbyãs
);

578 
g
->
e°im©e
 -
ﬁd
 - g->
tŸÆbyãs
;

579  
GCSWEEPCOST
;

581 
GCSswìp
: {

582 
lu_mem
 
ﬁd
 = 
g
->
tŸÆbyãs
;

583 
g
->
swìpgc
 = 
	`swì∂i°
(
L
, g->swìpgc, 
GCSWEEPMAX
);

584 i‡(*
g
->
swìpgc
 =
NULL
) {

585 
	`checkSizes
(
L
);

586 
g
->
gc°©e
 = 
GCSföÆize
;

588 
	`lua_as£π
(
ﬁd
 >
g
->
tŸÆbyãs
);

589 
g
->
e°im©e
 -
ﬁd
 - g->
tŸÆbyãs
;

590  
GCSWEEPMAX
*
GCSWEEPCOST
;

592 
GCSföÆize
: {

593 i‡(
g
->
tmud©a
) {

594 
	`GCTM
(
L
);

595 i‡(
g
->
e°im©e
 > 
GCFINALIZECOST
)

596 
g
->
e°im©e
 -
GCFINALIZECOST
;

597  
GCFINALIZECOST
;

600 
g
->
gc°©e
 = 
GCS∑u£
;

601 
g
->
gcdït
 = 0;

605 : 
	`lua_as£π
(0);  0;

607 
	}
}

610 
	$luaC_°ï
 (
lua_Sèã
 *
L
) {

611 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

612 
l_mem
 
lim
 = (
GCSTEPSIZE
/100Ë* 
g
->
gc°ïmul
;

613 i‡(
lim
 == 0)

614 
lim
 = (
MAX_LUMEM
-1)/2;

615 
g
->
gcdït
 +g->
tŸÆbyãs
 - g->
GCthªshﬁd
;

617 
lim
 -
	`sögÀ°ï
(
L
);

618 i‡(
g
->
gc°©e
 =
GCS∑u£
)

620 } 
lim
 > 0);

621 i‡(
g
->
gc°©e
 !
GCS∑u£
) {

622 i‡(
g
->
gcdït
 < 
GCSTEPSIZE
)

623 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
 + 
GCSTEPSIZE
;

625 
g
->
gcdït
 -
GCSTEPSIZE
;

626 
g
->
GCthªshﬁd
 = g->
tŸÆbyãs
;

630 
	`£âhªshﬁd
(
g
);

632 
	}
}

635 
	$luaC_fuŒgc
 (
lua_Sèã
 *
L
) {

636 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

637 i‡(
g
->
gc°©e
 <
GCS¥›ag©e
) {

639 
g
->
swìp°rgc
 = 0;

640 
g
->
swìpgc
 = &g->
roŸgc
;

642 
g
->
gøy
 = 
NULL
;

643 
g
->
gøyagaö
 = 
NULL
;

644 
g
->
wók
 = 
NULL
;

645 
g
->
gc°©e
 = 
GCSswìp°rög
;

647 
	`lua_as£π
(
g
->
gc°©e
 !
GCS∑u£
 && g->gc°©ê!
GCS¥›ag©e
);

649 
g
->
gc°©e
 !
GCSföÆize
) {

650 
	`lua_as£π
(
g
->
gc°©e
 =
GCSswìp°rög
 || g->gc°©ê=
GCSswìp
);

651 
	`sögÀ°ï
(
L
);

653 
	`m¨kroŸ
(
L
);

654 
g
->
gc°©e
 !
GCS∑u£
) {

655 
	`sögÀ°ï
(
L
);

657 
	`£âhªshﬁd
(
g
);

658 
	}
}

661 
	$luaC_b¨rõrf
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
) {

662 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

663 
	`lua_as£π
(
	`isbœck
(
o
Ë&& 
	`iswhôe
(
v
Ë&& !
	`isdód
(
g
, v) && !isdead(g, o));

664 
	`lua_as£π
(
g
->
gc°©e
 !
GCSföÆize
 && g->gc°©ê!
GCS∑u£
);

665 
	`lua_as£π
(
	`ây≥
(&
o
->
gch
Ë!
LUA_TTABLE
);

667 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
)

668 
	`ªÆlym¨kobje˘
(
g
, 
v
);

670 
	`makewhôe
(
g
, 
o
);

671 
	}
}

681 
	$luaC_b¨rõrback
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

682 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

683 
GCObje˘
 *
o
 = 
	`obj2gco
(
t
);

684 
	`lua_as£π
(
	`isbœck
(
o
Ë&& !
	`isdód
(
g
, o));

685 
	`lua_as£π
(
g
->
gc°©e
 !
GCSföÆize
 && g->gc°©ê!
GCS∑u£
);

686 
	`bœck2gøy
(
o
);

687 
t
->
g˛i°
 = 
g
->
gøyagaö
;

688 
g
->
gøyagaö
 = 
o
;

689 
	}
}

692 
	$luaC_lök
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
lu_byã
 
â
) {

693 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

696 
o
->
gch
.
√xt
 = 
g
->
roŸgc
;

697 
g
->
roŸgc
 = 
o
;

699 
o
->
gch
.
m¨ked
 = 
	`luaC_whôe
(
g
);

700 
o
->
gch
.
â
 =Åt;

701 
	}
}

707 
	$luaC_lökupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
) {

708 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

709 
GCObje˘
 *
o
 = 
	`obj2gco
(
uv
);

710 
o
->
gch
.
√xt
 = 
g
->
roŸgc
;

711 
g
->
roŸgc
 = 
o
;

712 i‡(
	`isgøy
(
o
)) {

713 i‡(
g
->
gc°©e
 =
GCS¥›ag©e
) {

714 
	`gøy2bœck
(
o
);

715 
	`luaC_b¨rõr
(
L
, 
uv
, uv->
v
);

718 
	`makewhôe
(
g
, 
o
);

719 
	`lua_as£π
(
g
->
gc°©e
 !
GCSföÆize
 && g->gc°©ê!
GCS∑u£
);

722 
	}
}

	@src/lgc.h

7 #i‚de‡
lgc_h


8 
	#lgc_h


	)

11 
	~"lobje˘.h
"

17 
	#GCS∑u£
 0

	)

18 
	#GCS¥›ag©e
 1

	)

19 
	#GCSswìp°rög
 2

	)

20 
	#GCSswìp
 3

	)

21 
	#GCSföÆize
 4

	)

28 
	#ª£tbôs
(
x
,
m
Ë((xË&
	`ˇ°
(
lu_byã
, ~(m)))

	)

29 
	#£tbôs
(
x
,
m
Ë((xË|(m))

	)

30 
	#ã°bôs
(
x
,
m
Ë((xË& (m))

	)

31 
	#bômask
(
b
Ë(1<<(b))

	)

32 
	#bô2mask
(
b1
,
b2
Ë(
	`bômask
(b1Ë| bômask(b2))

	)

33 
	#l_£tbô
(
x
,
b
Ë
	`£tbôs
(x, 
	`bômask
(b))

	)

34 
	#ª£tbô
(
x
,
b
Ë
	`ª£tbôs
(x, 
	`bômask
(b))

	)

35 
	#ã°bô
(
x
,
b
Ë
	`ã°bôs
(x, 
	`bômask
(b))

	)

36 
	#£t2bôs
(
x
,
b1
,
b2
Ë
	`£tbôs
(x, (
	`bô2mask
(b1, b2)))

	)

37 
	#ª£t2bôs
(
x
,
b1
,
b2
Ë
	`ª£tbôs
(x, (
	`bô2mask
(b1, b2)))

	)

38 
	#ã°2bôs
(
x
,
b1
,
b2
Ë
	`ã°bôs
(x, (
	`bô2mask
(b1, b2)))

	)

55 
	#WHITE0BIT
 0

56 
	#WHITE1BIT
 1

57 
	#BLACKBIT
 2

58 
	#FINALIZEDBIT
 3

	)

59 
	#KEYWEAKBIT
 3

	)

60 
	#VALUEWEAKBIT
 4

	)

61 
	#FIXEDBIT
 5

	)

62 
	#SFIXEDBIT
 6

	)

63 
	#WHITEBITS
 
	`bô2mask
(
WHITE0BIT
, 
WHITE1BIT
)

	)

69 
	#iswhôe
(
x
Ë
	`ã°2bôs
((x)->
gch
.
m¨ked
, 
WHITE0BIT
, 
WHITE1BIT
)

	)

70 
	#isbœck
(
x
Ë
	`ã°bô
((x)->
gch
.
m¨ked
, 
BLACKBIT
)

	)

71 
	#isgøy
(
x
Ë(!
	`isbœck
(xË&& !
	`iswhôe
(x))

	)

73 
	#Ÿhîwhôe
(
g
Ë(g->
cuºítwhôe
 ^ 
WHITEBITS
)

	)

74 
	#isdód
(
g
,
v
Ë((v)->
gch
.
m¨ked
 & 
	`Ÿhîwhôe
(gË& 
WHITEBITS
)

	)

82 
	#ch™gewhôe
(
x
Ë((x)->
gch
.
m¨ked
 ^
WHITEBITS
Ë

	)

84 
	#vÆiswhôe
(
x
Ë(
	`iscﬁÀ˘abÀ
(xË&& 
	`iswhôe
(
	`gcvÆue
(x)))

	)

86 
	#luaC_whôe
(
g
Ë
	`ˇ°
(
lu_byã
, (g)->
cuºítwhôe
 & 
WHITEBITS
)

	)

89 
	#gøy2bœck
(
x
Ë
	`l_£tbô
((x)->
gch
.
m¨ked
, 
BLACKBIT
)

	)

94 
	#luaC_checkGC
(
L
) { \

95 
	`c⁄dh¨d°ackã°s
(
	`luaD_ªÆloc°ack
(
L
, L->
°acksize
 - 
EXTRA_STACK
 - 1)); \

96 i‡(
	`G
(
L
)->
tŸÆbyãs
 >G(L)->
GCthªshﬁd
) \

97 
	`luaC_°ï
(
L
); }

	)

99 
	#luaC_b¨rõr
(
L
,
p
,
v
Ë{ i‡(
	`vÆiswhôe
(vË&& 
	`isbœck
(
	`obj2gco
(p))) \

100 
	`luaC_b¨rõrf
(
L
,
	`obj2gco
(
p
),
	`gcvÆue
(
v
)); }

	)

105 
	#luaC_b¨rõπ
(
L
,
t
,
v
Ë{ i‡(
	`vÆiswhôe
(vË&& 
	`isbœck
(
	`obj2gco
(t))) \

106 
	`luaC_b¨rõrback
(
L
,
t
); }

	)

108 
	#luaC_objb¨rõr
(
L
,
p
,
o
) \

109 { i‡(
	`iswhôe
(
	`obj2gco
(
o
)Ë&& 
	`isbœck
(obj2gco(
p
))) \

110 
	`luaC_b¨rõrf
(
L
,
	`obj2gco
(
p
),obj2gco(
o
)); }

	)

112 
	#luaC_objb¨rõπ
(
L
,
t
,
o
) \

113 { i‡(
	`iswhôe
(
	`obj2gco
(
o
)Ë&& 
	`isbœck
(obj2gco(
t
))Ë
	`luaC_b¨rõrback
(
L
,t); }

	)

115 
LUAI_FUNC
 
size_t
 
luaC_£∑øãud©a
 (
lua_Sèã
 *
L
, 
Æl
);

116 
LUAI_FUNC
 
luaC_ˇŒGCTM
 (
lua_Sèã
 *
L
);

117 
LUAI_FUNC
 
luaC_‰ìÆl
 (
lua_Sèã
 *
L
);

118 
LUAI_FUNC
 
luaC_°ï
 (
lua_Sèã
 *
L
);

119 
LUAI_FUNC
 
luaC_fuŒgc
 (
lua_Sèã
 *
L
);

120 
LUAI_FUNC
 
luaC_lök
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, 
lu_byã
 
â
);

121 
LUAI_FUNC
 
luaC_lökupvÆ
 (
lua_Sèã
 *
L
, 
UpVÆ
 *
uv
);

122 
LUAI_FUNC
 
luaC_b¨rõrf
 (
lua_Sèã
 *
L
, 
GCObje˘
 *
o
, GCObje˘ *
v
);

123 
LUAI_FUNC
 
luaC_b¨rõrback
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
);

	@src/linit.c

8 
	#löô_c


	)

9 
	#LUA_LIB


	)

11 
	~"lua.h
"

13 
	~"luÆib.h
"

14 
	~"œuxlib.h
"

22 c⁄° 
luaL_Reg
 
	gluÆibs
[] = {

23 {"", 
lua›í_ba£
},

24 {
LUA_LOADLIBNAME
, 
lua›í_∑ckage
},

25 {
LUA_TABLIBNAME
, 
lua›í_èbÀ
},

26 {
LUA_IOLIBNAME
, 
lua›í_io
},

27 {
LUA_OSLIBNAME
, 
lua›í_os
},

28 {
LUA_STRLIBNAME
, 
lua›í_°rög
},

29 {
LUA_MATHLIBNAME
, 
lua›í_m©h
},

30 {
LUA_DBLIBNAME
, 
lua›í_debug
},

31 {
NULL
, NULL}

35 
LUALIB_API
 
	$luaL_›ílibs
 (
lua_Sèã
 *
L
) {

36 
	`¥ötf
("debug: inÜuaL_openlibs\n");

37 c⁄° 
luaL_Reg
 *
lib
 = 
luÆibs
;

38 ; 
lib
->
func
;Üib++) {

39 
	`lua_pushcfun˘i⁄
(
L
, 
lib
->
func
);

40 
	`lua_push°rög
(
L
, 
lib
->
«me
);

41 
	`lua_ˇŒ
(
L
, 1, 0);

43 
	}
}

	@src/liolib.c

8 
	~<î∫o.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#liﬁib_c


	)

14 
	#LUA_LIB


	)

16 
	~"lua.h
"

18 
	~"œuxlib.h
"

19 
	~"luÆib.h
"

23 
	#IO_INPUT
 1

	)

24 
	#IO_OUTPUT
 2

	)

27 c⁄° *c⁄° 
	g‚ames
[] = {"input", "output"};

30 
	$pushªsu…
 (
lua_Sèã
 *
L
, 
i
, c⁄° *
fûíame
) {

31 
í
 = 
î∫o
;

32 i‡(
i
) {

33 
	`lua_pushboﬁón
(
L
, 1);

37 
	`lua_pushnû
(
L
);

38 i‡(
fûíame
)

39 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
í
));

41 
	`lua_pushf°rög
(
L
, "%s", 
	`°ªº‹
(
í
));

42 
	`lua_pushöãgî
(
L
, 
í
);

45 
	}
}

48 
	$fûìº‹
 (
lua_Sèã
 *
L
, 
¨g
, c⁄° *
fûíame
) {

49 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
î∫o
));

50 
	`luaL_¨gîr‹
(
L
, 
¨g
, 
	`lua_to°rög
(L, -1));

51 
	}
}

54 
	#tofûï
(
L
Ë((
FILE
 **)
	`luaL_checkud©a
(L, 1, 
LUA_FILEHANDLE
))

	)

57 
	$io_ty≥
 (
lua_Sèã
 *
L
) {

58 *
ud
;

59 
	`luaL_check™y
(
L
, 1);

60 
ud
 = 
	`lua_tou£rd©a
(
L
, 1);

61 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, 
LUA_FILEHANDLE
);

62 i‡(
ud
 =
NULL
 || !
	`lua_gëmë©abÀ
(
L
, 1Ë|| !
	`lua_øwequÆ
(L, -2, -1))

63 
	`lua_pushnû
(
L
);

64 i‡(*((
FILE
 **)
ud
Ë=
NULL
)

65 
	`lua_pushlôîÆ
(
L
, "closed file");

67 
	`lua_pushlôîÆ
(
L
, "file");

69 
	}
}

72 
FILE
 *
	$tofûe
 (
lua_Sèã
 *
L
) {

73 
FILE
 **
f
 = 
	`tofûï
(
L
);

74 i‡(*
f
 =
NULL
)

75 
	`luaL_îr‹
(
L
, "attemptÅo useá closed file");

76  *
f
;

77 
	}
}

86 
FILE
 **
	$√wfûe
 (
lua_Sèã
 *
L
) {

87 
FILE
 **
pf
 = (FILE **)
	`lua_√wu£rd©a
(
L
, (FILE *));

88 *
pf
 = 
NULL
;

89 
	`luaL_gëmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

90 
	`lua_£tmë©abÀ
(
L
, -2);

91  
pf
;

92 
	}
}

98 
	$io_no˛o£
 (
lua_Sèã
 *
L
) {

99 
	`lua_pushnû
(
L
);

100 
	`lua_pushlôîÆ
(
L
, "cannot close standard file");

102 
	}
}

108 
	$io_p˛o£
 (
lua_Sèã
 *
L
) {

109 
FILE
 **
p
 = 
	`tofûï
(
L
);

110 
ok
 = 
	`lua_p˛o£
(
L
, *
p
);

111 *
p
 = 
NULL
;

112  
	`pushªsu…
(
L
, 
ok
, 
NULL
);

113 
	}
}

119 
	$io_f˛o£
 (
lua_Sèã
 *
L
) {

120 
FILE
 **
p
 = 
	`tofûï
(
L
);

121 
ok
 = (
	`f˛o£
(*
p
) == 0);

122 *
p
 = 
NULL
;

123  
	`pushªsu…
(
L
, 
ok
, 
NULL
);

124 
	}
}

127 
	$aux_˛o£
 (
lua_Sèã
 *
L
) {

128 
	`lua_gë„nv
(
L
, 1);

129 
	`lua_gëfõld
(
L
, -1, "__close");

130  (
	`lua_tocfun˘i⁄
(
L
, -1))(L);

131 
	}
}

134 
	$io_˛o£
 (
lua_Sèã
 *
L
) {

135 i‡(
	`lua_i¢⁄e
(
L
, 1))

136 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
IO_OUTPUT
);

137 
	`tofûe
(
L
);

138  
	`aux_˛o£
(
L
);

139 
	}
}

142 
	$io_gc
 (
lua_Sèã
 *
L
) {

143 
FILE
 *
f
 = *
	`tofûï
(
L
);

145 i‡(
f
 !
NULL
)

146 
	`aux_˛o£
(
L
);

148 
	}
}

151 
	$io_to°rög
 (
lua_Sèã
 *
L
) {

152 
FILE
 *
f
 = *
	`tofûï
(
L
);

153 i‡(
f
 =
NULL
)

154 
	`lua_pushlôîÆ
(
L
, "file (closed)");

156 
	`lua_pushf°rög
(
L
, "fûê(%p)", 
f
);

158 
	}
}

161 
	$io_›í
 (
lua_Sèã
 *
L
) {

162 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

163 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

164 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

165 *
pf
 = 
	`f›í
(
fûíame
, 
mode
);

166  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, 
fûíame
) : 1;

167 
	}
}

174 
	$io_p›í
 (
lua_Sèã
 *
L
) {

175 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

176 c⁄° *
mode
 = 
	`luaL_›t°rög
(
L
, 2, "r");

177 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

178 *
pf
 = 
	`lua_p›í
(
L
, 
fûíame
, 
mode
);

179  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, 
fûíame
) : 1;

180 
	}
}

183 
	$io_tmpfûe
 (
lua_Sèã
 *
L
) {

184 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

185 *
pf
 = 
	`tmpfûe
();

186  (*
pf
 =
NULL
Ë? 
	`pushªsu…
(
L
, 0, NULL) : 1;

187 
	}
}

190 
FILE
 *
	$gëiofûe
 (
lua_Sèã
 *
L
, 
födex
) {

191 
FILE
 *
f
;

192 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
födex
);

193 
f
 = *(
FILE
 **)
	`lua_tou£rd©a
(
L
, -1);

194 i‡(
f
 =
NULL
)

195 
	`luaL_îr‹
(
L
, "°™d¨d %†fûêi†˛o£d", 
‚ames
[
födex
 - 1]);

196  
f
;

197 
	}
}

200 
	$g_iofûe
 (
lua_Sèã
 *
L
, 
f
, c⁄° *
mode
) {

201 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 1)) {

202 c⁄° *
fûíame
 = 
	`lua_to°rög
(
L
, 1);

203 i‡(
fûíame
) {

204 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

205 *
pf
 = 
	`f›í
(
fûíame
, 
mode
);

206 i‡(*
pf
 =
NULL
)

207 
	`fûìº‹
(
L
, 1, 
fûíame
);

210 
	`tofûe
(
L
);

211 
	`lua_pushvÆue
(
L
, 1);

213 
	`lua_øw£ti
(
L
, 
LUA_ENVIRONINDEX
, 
f
);

216 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
f
);

218 
	}
}

221 
	$io_öput
 (
lua_Sèã
 *
L
) {

222  
	`g_iofûe
(
L
, 
IO_INPUT
, "r");

223 
	}
}

226 
	$io_ouçut
 (
lua_Sèã
 *
L
) {

227  
	`g_iofûe
(
L
, 
IO_OUTPUT
, "w");

228 
	}
}

231 
io_ªadlöe
 (
lua_Sèã
 *
L
);

234 
	$aux_löes
 (
lua_Sèã
 *
L
, 
idx
, 
to˛o£
) {

235 
	`lua_pushvÆue
(
L
, 
idx
);

236 
	`lua_pushboﬁón
(
L
, 
to˛o£
);

237 
	`lua_pushc˛osuª
(
L
, 
io_ªadlöe
, 2);

238 
	}
}

241 
	$f_löes
 (
lua_Sèã
 *
L
) {

242 
	`tofûe
(
L
);

243 
	`aux_löes
(
L
, 1, 0);

245 
	}
}

248 
	$io_löes
 (
lua_Sèã
 *
L
) {

249 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1)) {

251 
	`lua_øwgëi
(
L
, 
LUA_ENVIRONINDEX
, 
IO_INPUT
);

252  
	`f_löes
(
L
);

255 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

256 
FILE
 **
pf
 = 
	`√wfûe
(
L
);

257 *
pf
 = 
	`f›í
(
fûíame
, "r");

258 i‡(*
pf
 =
NULL
)

259 
	`fûìº‹
(
L
, 1, 
fûíame
);

260 
	`aux_löes
(
L
, 
	`lua_gët›
(L), 1);

263 
	}
}

273 
	$ªad_numbî
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

274 
lua_Numbî
 
d
;

275 i‡(
	`fsˇnf
(
f
, 
LUA_NUMBER_SCAN
, &
d
) == 1) {

276 
	`lua_pushnumbî
(
L
, 
d
);

280 
	`lua_pushnû
(
L
);

283 
	}
}

286 
	$ã°_eof
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

287 
c
 = 
	`gëc
(
f
);

288 
	`ungëc
(
c
, 
f
);

289 
	`lua_pushl°rög
(
L
, 
NULL
, 0);

290  (
c
 !
EOF
);

291 
	}
}

294 
	$ªad_löe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
) {

295 
luaL_Buf„r
 
b
;

296 
	`luaL_bufföô
(
L
, &
b
);

298 
size_t
 
l
;

299 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

300 i‡(
	`fgës
(
p
, 
LUAL_BUFFERSIZE
, 
f
Ë=
NULL
) {

301 
	`luaL_pushªsu…
(&
b
);

302  (
	`lua_objÀn
(
L
, -1) > 0);

304 
l
 = 
	`°æí
(
p
);

305 i‡(
l
 =0 || 
p
[l-1] != '\n')

306 
	`luaL_addsize
(&
b
, 
l
);

308 
	`luaL_addsize
(&
b
, 
l
 - 1);

309 
	`luaL_pushªsu…
(&
b
);

313 
	}
}

316 
	$ªad_ch¨s
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
size_t
 
n
) {

317 
size_t
 
æí
;

318 
size_t
 
ƒ
;

319 
luaL_Buf„r
 
b
;

320 
	`luaL_bufföô
(
L
, &
b
);

321 
æí
 = 
LUAL_BUFFERSIZE
;

323 *
p
 = 
	`luaL_¥ïbuf„r
(&
b
);

324 i‡(
æí
 > 
n
)Ñlen =Ç;

325 
ƒ
 = 
	`‰ód
(
p
, (), 
æí
, 
f
);

326 
	`luaL_addsize
(&
b
, 
ƒ
);

327 
n
 -
ƒ
;

328 } 
n
 > 0 && 
ƒ
 =
æí
);

329 
	`luaL_pushªsu…
(&
b
);

330  (
n
 =0 || 
	`lua_objÀn
(
L
, -1) > 0);

331 
	}
}

334 
	$g_ªad
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
fú°
) {

335 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

336 
suc˚ss
;

337 
n
;

338 
	`˛óªº
(
f
);

339 i‡(
«rgs
 == 0) {

340 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
);

341 
n
 = 
fú°
+1;

344 
	`luaL_check°ack
(
L
, 
«rgs
+
LUA_MINSTACK
, "too manyárguments");

345 
suc˚ss
 = 1;

346 
n
 = 
fú°
; 
«rgs
-- && 
suc˚ss
;Ç++) {

347 i‡(
	`lua_ty≥
(
L
, 
n
Ë=
LUA_TNUMBER
) {

348 
size_t
 
l
 = (size_t)
	`lua_toöãgî
(
L
, 
n
);

349 
suc˚ss
 = (
l
 =0Ë? 
	`ã°_eof
(
L
, 
f
Ë: 
	`ªad_ch¨s
(L, f,Ü);

352 c⁄° *
p
 = 
	`lua_to°rög
(
L
, 
n
);

353 
	`luaL_¨gcheck
(
L
, 
p
 &&Ö[0] ='*', 
n
, "invalid option");

354 
p
[1]) {

356 
suc˚ss
 = 
	`ªad_numbî
(
L
, 
f
);

359 
suc˚ss
 = 
	`ªad_löe
(
L
, 
f
);

362 
	`ªad_ch¨s
(
L
, 
f
, ~((
size_t
)0));

363 
suc˚ss
 = 1;

366  
	`luaL_¨gîr‹
(
L
, 
n
, "invalid format");

371 i‡(
	`„º‹
(
f
))

372  
	`pushªsu…
(
L
, 0, 
NULL
);

373 i‡(!
suc˚ss
) {

374 
	`lua_p›
(
L
, 1);

375 
	`lua_pushnû
(
L
);

377  
n
 - 
fú°
;

378 
	}
}

381 
	$io_ªad
 (
lua_Sèã
 *
L
) {

382  
	`g_ªad
(
L
, 
	`gëiofûe
(L, 
IO_INPUT
), 1);

383 
	}
}

386 
	$f_ªad
 (
lua_Sèã
 *
L
) {

387  
	`g_ªad
(
L
, 
	`tofûe
(L), 2);

388 
	}
}

391 
	$io_ªadlöe
 (
lua_Sèã
 *
L
) {

392 
FILE
 *
f
 = *(FILE **)
	`lua_tou£rd©a
(
L
, 
	`lua_upvÆueödex
(1));

393 
su˚ss
;

394 i‡(
f
 =
NULL
)

395 
	`luaL_îr‹
(
L
, "file isálready closed");

396 
su˚ss
 = 
	`ªad_löe
(
L
, 
f
);

397 i‡(
	`„º‹
(
f
))

398  
	`luaL_îr‹
(
L
, "%s", 
	`°ªº‹
(
î∫o
));

399 i‡(
su˚ss
)  1;

401 i‡(
	`lua_toboﬁón
(
L
, 
	`lua_upvÆueödex
(2))) {

402 
	`lua_£â›
(
L
, 0);

403 
	`lua_pushvÆue
(
L
, 
	`lua_upvÆueödex
(1));

404 
	`aux_˛o£
(
L
);

408 
	}
}

413 
	$g_wrôe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
¨g
) {

414 
«rgs
 = 
	`lua_gët›
(
L
) - 1;

415 
°©us
 = 1;

416 ; 
«rgs
--; 
¨g
++) {

417 i‡(
	`lua_ty≥
(
L
, 
¨g
Ë=
LUA_TNUMBER
) {

419 
°©us
 = status &&

420 
	`Ârötf
(
f
, 
LUA_NUMBER_FMT
, 
	`lua_t⁄umbî
(
L
, 
¨g
)) > 0;

423 
size_t
 
l
;

424 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

425 
°©us
 = sètu†&& (
	`fwrôe
(
s
, (), 
l
, 
f
) ==Ü);

428  
	`pushªsu…
(
L
, 
°©us
, 
NULL
);

429 
	}
}

432 
	$io_wrôe
 (
lua_Sèã
 *
L
) {

433  
	`g_wrôe
(
L
, 
	`gëiofûe
(L, 
IO_OUTPUT
), 1);

434 
	}
}

437 
	$f_wrôe
 (
lua_Sèã
 *
L
) {

438  
	`g_wrôe
(
L
, 
	`tofûe
(L), 2);

439 
	}
}

442 
	$f_£ek
 (
lua_Sèã
 *
L
) {

443 c⁄° 
mode
[] = {
SEEK_SET
, 
SEEK_CUR
, 
SEEK_END
};

444 c⁄° *c⁄° 
modíames
[] = {"£t", "cur", "íd", 
NULL
};

445 
FILE
 *
f
 = 
	`tofûe
(
L
);

446 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "cur", 
modíames
);

447 
off£t
 = 
	`luaL_›é⁄g
(
L
, 3, 0);

448 
›
 = 
	`f£ek
(
f
, 
off£t
, 
mode
[op]);

449 i‡(
›
)

450  
	`pushªsu…
(
L
, 0, 
NULL
);

452 
	`lua_pushöãgî
(
L
, 
	`·ñl
(
f
));

455 
	}
}

458 
	$f_£tvbuf
 (
lua_Sèã
 *
L
) {

459 c⁄° 
mode
[] = {
_IONBF
, 
_IOFBF
, 
_IOLBF
};

460 c⁄° *c⁄° 
modíames
[] = {"no", "fuŒ", "löe", 
NULL
};

461 
FILE
 *
f
 = 
	`tofûe
(
L
);

462 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, 
NULL
, 
modíames
);

463 
lua_I¡egî
 
sz
 = 
	`luaL_›töãgî
(
L
, 3, 
LUAL_BUFFERSIZE
);

464 
ªs
 = 
	`£tvbuf
(
f
, 
NULL
, 
mode
[
›
], 
sz
);

465  
	`pushªsu…
(
L
, 
ªs
 =0, 
NULL
);

466 
	}
}

470 
	$io_Êush
 (
lua_Sèã
 *
L
) {

471  
	`pushªsu…
(
L
, 
	`fÊush
(
	`gëiofûe
(L, 
IO_OUTPUT
)Ë=0, 
NULL
);

472 
	}
}

475 
	$f_Êush
 (
lua_Sèã
 *
L
) {

476  
	`pushªsu…
(
L
, 
	`fÊush
(
	`tofûe
(L)Ë=0, 
NULL
);

477 
	}
}

480 c⁄° 
luaL_Reg
 
	giﬁib
[] = {

481 {"˛o£", 
io_˛o£
},

482 {"Êush", 
io_Êush
},

483 {"öput", 
io_öput
},

484 {"löes", 
io_löes
},

485 {"›í", 
io_›í
},

486 {"ouçut", 
io_ouçut
},

487 {"p›í", 
io_p›í
},

488 {"ªad", 
io_ªad
},

489 {"tmpfûe", 
io_tmpfûe
},

490 {"ty≥", 
io_ty≥
},

491 {"wrôe", 
io_wrôe
},

492 {
NULL
, NULL}

496 c⁄° 
luaL_Reg
 
	gÊib
[] = {

497 {"˛o£", 
io_˛o£
},

498 {"Êush", 
f_Êush
},

499 {"löes", 
f_löes
},

500 {"ªad", 
f_ªad
},

501 {"£ek", 
f_£ek
},

502 {"£tvbuf", 
f_£tvbuf
},

503 {"wrôe", 
f_wrôe
},

504 {"__gc", 
io_gc
},

505 {"__to°rög", 
io_to°rög
},

506 {
NULL
, NULL}

510 
	$¸óãmëa
 (
lua_Sèã
 *
L
) {

511 
	`luaL_√wmë©abÀ
(
L
, 
LUA_FILEHANDLE
);

512 
	`lua_pushvÆue
(
L
, -1);

513 
	`lua_£tfõld
(
L
, -2, "__index");

514 
	`luaL_ªgi°î
(
L
, 
NULL
, 
Êib
);

515 
	}
}

518 
	$¸óã°dfûe
 (
lua_Sèã
 *
L
, 
FILE
 *
f
, 
k
, c⁄° *
‚ame
) {

519 *
	`√wfûe
(
L
Ë
f
;

520 i‡(
k
 > 0) {

521 
	`lua_pushvÆue
(
L
, -1);

522 
	`lua_øw£ti
(
L
, 
LUA_ENVIRONINDEX
, 
k
);

524 
	`lua_pushvÆue
(
L
, -2);

525 
	`lua_£t„nv
(
L
, -2);

526 
	`lua_£tfõld
(
L
, -3, 
‚ame
);

527 
	}
}

530 
	$√w„nv
 (
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
˛s
) {

531 
	`lua_¸óãèbÀ
(
L
, 0, 1);

532 
	`lua_pushcfun˘i⁄
(
L
, 
˛s
);

533 
	`lua_£tfõld
(
L
, -2, "__close");

534 
	}
}

537 
LUALIB_API
 
	$lua›í_io
 (
lua_Sèã
 *
L
) {

538 
	`¥ötf
("debug: 4.luaopen_io\n");

539 
	`¸óãmëa
(
L
);

541 
	`√w„nv
(
L
, 
io_f˛o£
);

542 
	`lua_ª∂a˚
(
L
, 
LUA_ENVIRONINDEX
);

544 
	`luaL_ªgi°î
(
L
, 
LUA_IOLIBNAME
, 
iﬁib
);

546 
	`√w„nv
(
L
, 
io_no˛o£
);

547 
	`¸óã°dfûe
(
L
, 
°dö
, 
IO_INPUT
, "stdin");

548 
	`¸óã°dfûe
(
L
, 
°dout
, 
IO_OUTPUT
, "stdout");

549 
	`¸óã°dfûe
(
L
, 
°dîr
, 0, "stderr");

550 
	`lua_p›
(
L
, 1);

551 
	`lua_gëfõld
(
L
, -1, "popen");

552 
	`√w„nv
(
L
, 
io_p˛o£
);

553 
	`lua_£t„nv
(
L
, -2);

554 
	`lua_p›
(
L
, 1);

556 
	}
}

	@src/llex.c

8 
	~<˘y≥.h
>

9 
	~<loˇÀ.h
>

10 
	~<°rög.h
>

12 
	#Œex_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

17 
	~"ldo.h
"

18 
	~"Œex.h
"

19 
	~"lobje˘.h
"

20 
	~"Õ¨£r.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"…abÀ.h
"

24 
	~"lzio.h
"

38 
	#√xt
(
ls
Ë÷s->
cuºít
 = 
	`zgëc
÷s->
z
))

	)

43 
	#cuºIsNewlöe
(
ls
Ë÷s->
cuºít
 ='\n' ||Üs->cuºíà='\r')

	)

47 c⁄° *c⁄° 
	gluaX_tokís
 [] = {

54 
NULL


58 
	#ßve_™d_√xt
(
ls
Ë(
	`ßve
÷s,Üs->
cuºít
), 
	`√xt
÷s))

	)

63 
	$ßve
 (
LexSèã
 *
ls
, 
c
) {

64 
Mbuf„r
 *
b
 = 
ls
->
buff
;

65 i‡(
b
->
n
 + 1 > b->
buffsize
) {

66 
size_t
 
√wsize
;

67 i‡(
b
->
buffsize
 >
MAX_SIZET
/2)

68 
	`luaX_Àxîr‹
(
ls
, "lexicalÉlementÅooÜong", 0);

69 
√wsize
 = 
b
->
buffsize
 * 2;

70 
	`luaZ_ªsizebuf„r
(
ls
->
L
, 
b
, 
√wsize
);

72 
b
->
buf„r
[b->
n
++] = 
	`ˇ°
(, 
c
);

73 
	}
}

76 
	$luaX_öô
 (
lua_Sèã
 *
L
) {

77 
i
;

78 
i
=0; i<
NUM_RESERVED
; i++) {

79 
TSåög
 *
ts
 = 
	`luaS_√w
(
L
, 
luaX_tokís
[
i
]);

80 
	`luaS_fix
(
ts
);

81 
	`lua_as£π
(
	`°æí
(
luaX_tokís
[
i
])+1 <
TOKEN_LEN
);

82 
ts
->
tsv
.
ª£rved
 = 
	`ˇ°_byã
(
i
+1);

84 
	}
}

87 
	#MAXSRC
 80

	)

90 c⁄° *
	$luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
) {

91 i‡(
tokí
 < 
FIRST_RESERVED
) {

92 
	`lua_as£π
(
tokí
 =
	`ˇ°
(,Åoken));

93  (
	`is˙ål
(
tokí
)Ë? 
	`luaO_pushf°rög
(
ls
->
L
, "char(%d)",Åoken) :

94 
	`luaO_pushf°rög
(
ls
->
L
, "%c", 
tokí
);

97  
luaX_tokís
[
tokí
-
FIRST_RESERVED
];

98 
	}
}

101 c⁄° *
	$txtTokí
 (
LexSèã
 *
ls
, 
tokí
) {

102 
tokí
) {

103 
TK_NAME
:

104 
TK_STRING
:

105 
TK_NUMBER
:

106 
	`ßve
(
ls
, '\0');

107  
	`luaZ_buf„r
(
ls
->
buff
);

109  
	`luaX_tokí2°r
(
ls
, 
tokí
);

111 
	}
}

114 
	$luaX_Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
) {

115 
buff
[
MAXSRC
];

116 
	`luaO_chunkid
(
buff
, 
	`gë°r
(
ls
->
sour˚
), 
MAXSRC
);

117 
msg
 = 
	`luaO_pushf°rög
(
ls
->
L
, "%s:%d: %s", 
buff
,Üs->
löíumbî
, msg);

118 i‡(
tokí
)

119 
	`luaO_pushf°rög
(
ls
->
L
, "%†√¨ " 
LUA_QS
, 
msg
, 
	`txtTokí
÷s, 
tokí
));

120 
	`luaD_throw
(
ls
->
L
, 
LUA_ERRSYNTAX
);

121 
	}
}

124 
	$luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
) {

125 
	`luaX_Àxîr‹
(
ls
, 
msg
,Üs->
t
.
tokí
);

126 
	}
}

129 
TSåög
 *
	$luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
) {

130 
lua_Sèã
 *
L
 = 
ls
->L;

131 
TSåög
 *
ts
 = 
	`luaS_√wl°r
(
L
, 
°r
, 
l
);

132 
TVÆue
 *
o
 = 
	`luaH_£t°r
(
L
, 
ls
->
fs
->
h
, 
ts
);

133 i‡(
	`âi¢û
(
o
)) {

134 
	`£tbvÆue
(
o
, 1);

135 
	`luaC_checkGC
(
L
);

137  
ts
;

138 
	}
}

143 
	$ö˛öíumbî
 (
LexSèã
 *
ls
) {

144 
ﬁd
 = 
ls
->
cuºít
;

145 
	`lua_as£π
(
	`cuºIsNewlöe
(
ls
));

146 
	`√xt
(
ls
);

147 i‡(
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
ﬁd
)

148 
	`√xt
(
ls
);

149 i‡(++
ls
->
löíumbî
 >
MAX_INT
)

150 
	`luaX_sy¡axîr‹
(
ls
, "chunk hasÅoo manyÜines");

151 
	}
}

156 
	$luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
, 
TSåög
 *
sour˚
) {

157 
ls
->
de˝oöt
 = '.';

158 
ls
->
L
 = L;

159 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

160 
ls
->
z
 = z;

161 
ls
->
fs
 = 
NULL
;

162 
ls
->
löíumbî
 = 1;

163 
ls
->
œ°löe
 = 1;

164 
ls
->
sour˚
 = source;

165 
	`luaZ_ªsizebuf„r
(
ls
->
L
,Üs->
buff
, 
LUA_MINBUFFER
);

166 
	`√xt
(
ls
);

167 
	}
}

179 
	$check_√xt
 (
LexSèã
 *
ls
, c⁄° *
£t
) {

181 i‡(!
	`°rchr
(
£t
, 
ls
->
cuºít
))

183 
	`ßve_™d_√xt
(
ls
);

185 
	}
}

190 
	$buf‰ïœ˚
 (
LexSèã
 *
ls
, 
‰om
, 
to
) {

191 
size_t
 
n
 = 
	`luaZ_bufÊí
(
ls
->
buff
);

192 *
p
 = 
	`luaZ_buf„r
(
ls
->
buff
);

193 
n
--)

194 i‡(
p
[
n
] =
‰om
Ëp[n] = 
to
;

195 
	}
}

198 
	$åyde˝oöt
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

200 
lc⁄v
 *
cv
 = 
	`loˇÀc⁄v
();

201 
ﬁd
 = 
ls
->
de˝oöt
;

202 
ls
->
de˝oöt
 = (
cv
 ? cv->
decimÆ_poöt
[0] : '.');

203 
	`buf‰ïœ˚
(
ls
, 
ﬁd
,Üs->
de˝oöt
);

204 i‡(!
	`luaO_°r2d
(
	`luaZ_buf„r
(
ls
->
buff
), &
£möfo
->
r
)) {

206 
	`buf‰ïœ˚
(
ls
,Üs->
de˝oöt
, '.');

207 
	`luaX_Àxîr‹
(
ls
, "mÆf‹medÇumbî", 
TK_NUMBER
);

209 
	}
}

220 
	$ªad_numîÆ
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

221 
	`lua_as£π
(
	`isdigô
(
ls
->
cuºít
));

223 
	`ßve_™d_√xt
(
ls
);

224 } 
	`isdigô
(
ls
->
cuºít
) ||Üs->current == '.');

225 i‡(
	`check_√xt
(
ls
, "Ee"))

226 
	`check_√xt
(
ls
, "+-");

227 
	`iß um
(
ls
->
cuºít
) ||Üs->current == '_')

228 
	`ßve_™d_√xt
(
ls
);

229 
	`ßve
(
ls
, '\0');

230 
	`buf‰ïœ˚
(
ls
, '.',Üs->
de˝oöt
);

232 i‡(!
	`luaO_°r2d
(
	`luaZ_buf„r
(
ls
->
buff
), &
£möfo
->
r
))

233 
	`åyde˝oöt
(
ls
, 
£möfo
);

234 
	}
}

237 
	$skù_£p
 (
LexSèã
 *
ls
) {

238 
cou¡
 = 0;

239 
s
 = 
ls
->
cuºít
;

240 
	`lua_as£π
(
s
 == '[' || s == ']');

241 
	`ßve_™d_√xt
(
ls
);

242 
ls
->
cuºít
 == '=') {

243 
	`ßve_™d_√xt
(
ls
);

244 
cou¡
++;

246  (
ls
->
cuºít
 =
s
Ë? 
cou¡
 : (-count) - 1;

247 
	}
}

250 
	$ªad_l⁄g_°rög
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
, 
£p
) {

251 
c⁄t
 = 0;

252 ()(
c⁄t
);

253 
	`ßve_™d_√xt
(
ls
);

254 i‡(
	`cuºIsNewlöe
(
ls
))

255 
	`ö˛öíumbî
(
ls
);

257 
ls
->
cuºít
) {

258 
EOZ
:

259 
	`luaX_Àxîr‹
(
ls
, (
£möfo
) ? "unfinishedÜong string" :

260 "unföishedÜ⁄g commít", 
TK_EOS
);

262 #i‡
	`deföed
(
LUA_COMPAT_LSTR
)

264 i‡(
	`skù_£p
(
ls
Ë=
£p
) {

265 
	`ßve_™d_√xt
(
ls
);

266 
c⁄t
++;

267 #i‡
LUA_COMPAT_LSTR
 == 1

268 i‡(
£p
 == 0)

269 
	`luaX_Àxîr‹
(
ls
, "nesting of [[...]] is deprecated", '[');

276 i‡(
	`skù_£p
(
ls
Ë=
£p
) {

277 
	`ßve_™d_√xt
(
ls
);

278 #i‡
	`deföed
(
LUA_COMPAT_LSTR
) && LUA_COMPAT_LSTR == 2

279 
c⁄t
--;

280 i‡(
£p
 =0 && 
c⁄t
 >= 0) ;

282 
ídlo›
;

288 
	`ßve
(
ls
, '\n');

289 
	`ö˛öíumbî
(
ls
);

290 i‡(!
£möfo
Ë
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

294 i‡(
£möfo
Ë
	`ßve_™d_√xt
(
ls
);

295 
	`√xt
(
ls
);

298 } 
ídlo›
:

299 i‡(
£möfo
)

300 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
Ë+ (2 + 
£p
),

301 
	`luaZ_bufÊí
(
ls
->
buff
Ë- 2*(2 + 
£p
));

302 
	}
}

305 
	$ªad_°rög
 (
LexSèã
 *
ls
, 
dñ
, 
SemInfo
 *
£möfo
) {

306 
	`ßve_™d_√xt
(
ls
);

307 
ls
->
cuºít
 !
dñ
) {

308 
ls
->
cuºít
) {

309 
EOZ
:

310 
	`luaX_Àxîr‹
(
ls
, "unföished såög", 
TK_EOS
);

314 
	`luaX_Àxîr‹
(
ls
, "unföished såög", 
TK_STRING
);

317 
c
;

318 
	`√xt
(
ls
);

319 
ls
->
cuºít
) {

320 'a': 
c
 = '\a'; ;

321 'b': 
c
 = '\b'; ;

322 'f': 
c
 = '\f'; ;

323 'n': 
c
 = '\n'; ;

324 'r': 
c
 = '\r'; ;

325 't': 
c
 = '\t'; ;

326 'v': 
c
 = '\v'; ;

328 '\r': 
	`ßve
(
ls
, '\n'); 
	`ö˛öíumbî
(ls); ;

329 
EOZ
: ;

331 i‡(!
	`isdigô
(
ls
->
cuºít
))

332 
	`ßve_™d_√xt
(
ls
);

334 
i
 = 0;

335 
c
 = 0;

337 
c
 = 10*¯+ (
ls
->
cuºít
-'0');

338 
	`√xt
(
ls
);

339 } ++
i
<3 && 
	`isdigô
(
ls
->
cuºít
));

340 i‡(
c
 > 
UCHAR_MAX
)

341 
	`luaX_Àxîr‹
(
ls
, "esˇ≥ sequí˚Åoÿœrge", 
TK_STRING
);

342 
	`ßve
(
ls
, 
c
);

347 
	`ßve
(
ls
, 
c
);

348 
	`√xt
(
ls
);

352 
	`ßve_™d_√xt
(
ls
);

355 
	`ßve_™d_√xt
(
ls
);

356 
£möfo
->
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
) + 1,

357 
	`luaZ_bufÊí
(
ls
->
buff
) - 2);

358 
	}
}

363 
	$Œex
 (
LexSèã
 *
ls
, 
SemInfo
 *
£möfo
) {

365 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

367 
ls
->
cuºít
) {

370 
	`ö˛öíumbî
(
ls
);

374 
	`√xt
(
ls
);

375 i‡(
ls
->
cuºít
 != '-')  '-';

377 
	`√xt
(
ls
);

378 i‡(
ls
->
cuºít
 == '[') {

379 
£p
 = 
	`skù_£p
(
ls
);

380 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

381 i‡(
£p
 >= 0) {

382 
	`ªad_l⁄g_°rög
(
ls
, 
NULL
, 
£p
);

383 
	`luaZ_ª£tbuf„r
(
ls
->
buff
);

388 !
	`cuºIsNewlöe
(
ls
Ë&&Üs->
cuºít
 !
EOZ
)

389 
	`√xt
(
ls
);

393 
£p
 = 
	`skù_£p
(
ls
);

394 i‡(
£p
 >= 0) {

395 
	`ªad_l⁄g_°rög
(
ls
, 
£möfo
, 
£p
);

396  
TK_STRING
;

398 i‡(
£p
 == -1)  '[';

399 
	`luaX_Àxîr‹
(
ls
, "övÆidÜ⁄g såög dñimôî", 
TK_STRING
);

402 
	`√xt
(
ls
);

403 i‡(
ls
->
cuºít
 != '=')  '=';

404 { 
	`√xt
(
ls
);  
TK_EQ
; }

407 
	`√xt
(
ls
);

408 i‡(
ls
->
cuºít
 != '=')  '<';

409 { 
	`√xt
(
ls
);  
TK_LE
; }

412 
	`√xt
(
ls
);

413 i‡(
ls
->
cuºít
 != '=')  '>';

414 { 
	`√xt
(
ls
);  
TK_GE
; }

417 
	`√xt
(
ls
);

418 i‡(
ls
->
cuºít
 != '=')  '~';

419 { 
	`√xt
(
ls
);  
TK_NE
; }

423 
	`ªad_°rög
(
ls
,Üs->
cuºít
, 
£möfo
);

424  
TK_STRING
;

427 
	`ßve_™d_√xt
(
ls
);

428 i‡(
	`check_√xt
(
ls
, ".")) {

429 i‡(
	`check_√xt
(
ls
, "."))

430  
TK_DOTS
;

431  
TK_CONCAT
;

433 i‡(!
	`isdigô
(
ls
->
cuºít
))  '.';

435 
	`ªad_numîÆ
(
ls
, 
£möfo
);

436  
TK_NUMBER
;

439 
EOZ
: {

440  
TK_EOS
;

443 i‡(
	`is•a˚
(
ls
->
cuºít
)) {

444 
	`lua_as£π
(!
	`cuºIsNewlöe
(
ls
));

445 
	`√xt
(
ls
);

448 i‡(
	`isdigô
(
ls
->
cuºít
)) {

449 
	`ªad_numîÆ
(
ls
, 
£möfo
);

450  
TK_NUMBER
;

452 i‡(
	`ißÕha
(
ls
->
cuºít
) ||Üs->current == '_') {

454 
TSåög
 *
ts
;

456 
	`ßve_™d_√xt
(
ls
);

457 } 
	`iß um
(
ls
->
cuºít
) ||Üs->current == '_');

459 
ts
 = 
	`luaX_√w°rög
(
ls
, 
	`luaZ_buf„r
÷s->
buff
),

460 
	`luaZ_bufÊí
(
ls
->
buff
));

461 i‡(
ts
->
tsv
.
ª£rved
 > 0)

462  
ts
->
tsv
.
ª£rved
 - 1 + 
FIRST_RESERVED
;

464 
£möfo
->
ts
 =Ås;

465  
TK_NAME
;

469 
c
 = 
ls
->
cuºít
;

470 
	`√xt
(
ls
);

471  
c
;

476 
	}
}

479 
	$luaX_√xt
 (
LexSèã
 *
ls
) {

480 
ls
->
œ°löe
 =Üs->
löíumbî
;

481 i‡(
ls
->
lookahód
.
tokí
 !
TK_EOS
) {

482 
ls
->
t
 =Üs->
lookahód
;

483 
ls
->
lookahód
.
tokí
 = 
TK_EOS
;

487 
ls
->
t
.
tokí
 = 
	`Œex
÷s, &ls->t.
£möfo
);

488 
	}
}

491 
	$luaX_lookahód
 (
LexSèã
 *
ls
) {

492 
	`lua_as£π
(
ls
->
lookahód
.
tokí
 =
TK_EOS
);

493 
ls
->
lookahód
.
tokí
 = 
	`Œex
÷s, &ls->lookahód.
£möfo
);

494 
	}
}

	@src/llex.h

7 #i‚de‡
Œex_h


8 
	#Œex_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
	#FIRST_RESERVED
 257

	)

17 
	#TOKEN_LEN
 (("fun˘i⁄")/())

	)

39 
	eRESERVED
 {

41 
	mTK_AND
 = 
FIRST_RESERVED
, 
	mTK_BREAK
,

42 
	mTK_DO
, 
	mTK_ELSE
, 
	mTK_ELSEIF
, 
	mTK_END
, 
	mTK_FALSE
, 
	mTK_FOR
, 
	mTK_FUNCTION
,

43 
	mTK_IF
, 
	mTK_IN
, 
	mTK_LOCAL
, 
	mTK_NIL
, 
	mTK_NOT
, 
	mTK_OR
, 
	mTK_REPEAT
,

44 
	mTK_RETURN
, 
	mTK_THEN
, 
	mTK_TRUE
, 
	mTK_UNTIL
, 
	mTK_WHILE
,

46 
	mTK_CONCAT
, 
	mTK_DOTS
, 
	mTK_EQ
, 
	mTK_GE
, 
	mTK_LE
, 
	mTK_NE
,

47 
	mTK_NUMBER
, 
	mTK_NAME
, 
	mTK_STRING
, 
	mTK_EOS


51 
	#NUM_RESERVED
 (
	`ˇ°
(, 
TK_WHILE
-
FIRST_RESERVED
+1))

	)

55 
LUAI_DATA
 c⁄° *c⁄° 
	gluaX_tokís
 [];

59 
lua_Numbî
 
	mr
;

60 
TSåög
 *
	mts
;

61 } 
	tSemInfo
;

64 
	sTokí
 {

65 
	mtokí
;

66 
SemInfo
 
	m£möfo
;

67 } 
	tTokí
;

85 
	sLexSèã
 {

86 
	mcuºít
;

87 
	mlöíumbî
;

88 
	mœ°löe
;

89 
Tokí
 
	mt
;

90 
Tokí
 
	mlookahód
;

91 
FuncSèã
 *
	mfs
;

92 
lua_Sèã
 *
	mL
;

93 
ZIO
 *
	mz
;

94 
Mbuf„r
 *
	mbuff
;

95 
TSåög
 *
	msour˚
;

96 
	mde˝oöt
;

97 } 
	tLexSèã
;

100 
LUAI_FUNC
 
luaX_öô
 (
lua_Sèã
 *
L
);

101 
LUAI_FUNC
 
luaX_£töput
 (
lua_Sèã
 *
L
, 
LexSèã
 *
ls
, 
ZIO
 *
z
,

102 
TSåög
 *
sour˚
);

103 
LUAI_FUNC
 
TSåög
 *
luaX_√w°rög
 (
LexSèã
 *
ls
, c⁄° *
°r
, 
size_t
 
l
);

104 
LUAI_FUNC
 
luaX_√xt
 (
LexSèã
 *
ls
);

105 
LUAI_FUNC
 
luaX_lookahód
 (
LexSèã
 *
ls
);

106 
LUAI_FUNC
 
luaX_Àxîr‹
 (
LexSèã
 *
ls
, c⁄° *
msg
, 
tokí
);

107 
LUAI_FUNC
 
luaX_sy¡axîr‹
 (
LexSèã
 *
ls
, c⁄° *
s
);

108 
LUAI_FUNC
 c⁄° *
luaX_tokí2°r
 (
LexSèã
 *
ls
, 
tokí
);

	@src/llimits.h

7 #i‚de‡
Œimôs_h


8 
	#Œimôs_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

15 
	~"lua.h
"

18 
LUAI_UINT32
 
	tlu_öt32
;

20 
LUAI_UMEM
 
	tlu_mem
;

22 
LUAI_MEM
 
	tl_mem
;

27 
	tlu_byã
;

30 
	#MAX_SIZET
 ((
size_t
)(~(size_t)0)-2)

	)

32 
	#MAX_LUMEM
 ((
lu_mem
)(~÷u_mem)0)-2)

	)

35 
	#MAX_INT
 (
INT_MAX
-2Ë

	)

42 
	#I¡Poöt
(
p
Ë(()(
lu_mem
)’))

	)

47 
LUAI_USER_ALIGNMENT_T
 
	tL_UmaxÆign
;

51 
LUAI_UACNUMBER
 
	tl_uacNumbî
;

55 #ifde‡
lua_as£π


57 
	#check_exp
(
c
,
e
Ë(
	`lua_as£π
(c), (e))

58 
	#≠i_check
(
l
,
e
Ë
	`lua_as£π
”)

	)

62 
	#lua_as£π
(
c
Ë(()0)

	)

63 
	#check_exp
(
c
,
e
Ë”)

	)

64 
	#≠i_check
 
luai_≠icheck


	)

69 #i‚de‡
UNUSED


70 
	#UNUSED
(
x
Ë(()(x)Ë

	)

74 #i‚de‡
ˇ°


75 
	#ˇ°
(
t
, 
exp
Ë(—)”xp))

	)

78 
	#ˇ°_byã
(
i
Ë
	`ˇ°
(
lu_byã
, (i))

	)

79 
	#ˇ°_num
(
i
Ë
	`ˇ°
(
lua_Numbî
, (i))

	)

80 
	#ˇ°_öt
(
i
Ë
	`ˇ°
(, (i))

	)

88 
lu_öt32
 
	tIn°ru˘i⁄
;

93 
	#MAXSTACK
 250

	)

98 #i‚de‡
MINSTRTABSIZE


99 
	#MINSTRTABSIZE
 32

	)

104 #i‚de‡
LUA_MINBUFFER


105 
	#LUA_MINBUFFER
 32

	)

109 #i‚de‡
lua_lock


110 
	#lua_lock
(
L
Ë((Ë0)

	)

111 
	#lua_u∆ock
(
L
Ë((Ë0)

	)

114 #i‚de‡
luai_thªadyõld


115 
	#luai_thªadyõld
(
L
Ë{
	`lua_u∆ock
(L); 
	`lua_lock
(L);}

	)

122 #i‚de‡
HARDSTACKTESTS


123 
	#c⁄dh¨d°ackã°s
(
x
Ë(()0)

	)

125 
	#c⁄dh¨d°ackã°s
(
x
Ë
	)
x

	@src/lmathlib.c

8 
	~<°dlib.h
>

9 
	~<m©h.h
>

11 
	#lm©hlib_c


	)

12 
	#LUA_LIB


	)

14 
	~"lua.h
"

16 
	~"œuxlib.h
"

17 
	~"luÆib.h
"

20 #unde‡
PI


21 
	#PI
 (3.14159265358979323846)

	)

22 
	#RADIANS_PER_DEGREE
 (
PI
/180.0)

	)

26 
	$m©h_abs
 (
lua_Sèã
 *
L
) {

27 
	`lua_pushnumbî
(
L
, 
	`Ábs
(
	`luaL_checknumbî
(L, 1)));

29 
	}
}

31 
	$m©h_sö
 (
lua_Sèã
 *
L
) {

32 
	`lua_pushnumbî
(
L
, 
	`sö
(
	`luaL_checknumbî
(L, 1)));

34 
	}
}

36 
	$m©h_söh
 (
lua_Sèã
 *
L
) {

37 
	`lua_pushnumbî
(
L
, 
	`söh
(
	`luaL_checknumbî
(L, 1)));

39 
	}
}

41 
	$m©h_cos
 (
lua_Sèã
 *
L
) {

42 
	`lua_pushnumbî
(
L
, 
	`cos
(
	`luaL_checknumbî
(L, 1)));

44 
	}
}

46 
	$m©h_cosh
 (
lua_Sèã
 *
L
) {

47 
	`lua_pushnumbî
(
L
, 
	`cosh
(
	`luaL_checknumbî
(L, 1)));

49 
	}
}

51 
	$m©h_èn
 (
lua_Sèã
 *
L
) {

52 
	`lua_pushnumbî
(
L
, 
	`èn
(
	`luaL_checknumbî
(L, 1)));

54 
	}
}

56 
	$m©h_ènh
 (
lua_Sèã
 *
L
) {

57 
	`lua_pushnumbî
(
L
, 
	`ènh
(
	`luaL_checknumbî
(L, 1)));

59 
	}
}

61 
	$m©h_asö
 (
lua_Sèã
 *
L
) {

62 
	`lua_pushnumbî
(
L
, 
	`asö
(
	`luaL_checknumbî
(L, 1)));

64 
	}
}

66 
	$m©h_acos
 (
lua_Sèã
 *
L
) {

67 
	`lua_pushnumbî
(
L
, 
	`acos
(
	`luaL_checknumbî
(L, 1)));

69 
	}
}

71 
	$m©h_©™
 (
lua_Sèã
 *
L
) {

72 
	`lua_pushnumbî
(
L
, 
	`©™
(
	`luaL_checknumbî
(L, 1)));

74 
	}
}

76 
	$m©h_©™2
 (
lua_Sèã
 *
L
) {

77 
	`lua_pushnumbî
(
L
, 
	`©™2
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

79 
	}
}

81 
	$m©h_˚û
 (
lua_Sèã
 *
L
) {

82 
	`lua_pushnumbî
(
L
, 
	`˚û
(
	`luaL_checknumbî
(L, 1)));

84 
	}
}

86 
	$m©h_Êo‹
 (
lua_Sèã
 *
L
) {

87 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
	`luaL_checknumbî
(L, 1)));

89 
	}
}

91 
	$m©h_fmod
 (
lua_Sèã
 *
L
) {

92 
	`lua_pushnumbî
(
L
, 
	`fmod
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

94 
	}
}

96 
	$m©h_modf
 (
lua_Sèã
 *
L
) {

97 
ù
;

98 
Â
 = 
	`modf
(
	`luaL_checknumbî
(
L
, 1), &
ù
);

99 
	`lua_pushnumbî
(
L
, 
ù
);

100 
	`lua_pushnumbî
(
L
, 
Â
);

102 
	}
}

104 
	$m©h_sqπ
 (
lua_Sèã
 *
L
) {

105 
	`lua_pushnumbî
(
L
, 
	`sqπ
(
	`luaL_checknumbî
(L, 1)));

107 
	}
}

109 
	$m©h_pow
 (
lua_Sèã
 *
L
) {

110 
	`lua_pushnumbî
(
L
, 
	`pow
(
	`luaL_checknumbî
(L, 1),ÜuaL_checknumber(L, 2)));

112 
	}
}

114 
	$m©h_log
 (
lua_Sèã
 *
L
) {

115 
	`lua_pushnumbî
(
L
, 
	`log
(
	`luaL_checknumbî
(L, 1)));

117 
	}
}

119 
	$m©h_log10
 (
lua_Sèã
 *
L
) {

120 
	`lua_pushnumbî
(
L
, 
	`log10
(
	`luaL_checknumbî
(L, 1)));

122 
	}
}

124 
	$m©h_exp
 (
lua_Sèã
 *
L
) {

125 
	`lua_pushnumbî
(
L
, 
	`exp
(
	`luaL_checknumbî
(L, 1)));

127 
	}
}

129 
	$m©h_deg
 (
lua_Sèã
 *
L
) {

130 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1)/
RADIANS_PER_DEGREE
);

132 
	}
}

134 
	$m©h_ød
 (
lua_Sèã
 *
L
) {

135 
	`lua_pushnumbî
(
L
, 
	`luaL_checknumbî
(L, 1)*
RADIANS_PER_DEGREE
);

137 
	}
}

139 
	$m©h_‰exp
 (
lua_Sèã
 *
L
) {

140 
e
;

141 
	`lua_pushnumbî
(
L
, 
	`‰exp
(
	`luaL_checknumbî
(L, 1), &
e
));

142 
	`lua_pushöãgî
(
L
, 
e
);

144 
	}
}

146 
	$m©h_ldexp
 (
lua_Sèã
 *
L
) {

147 
	`lua_pushnumbî
(
L
, 
	`ldexp
(
	`luaL_checknumbî
(L, 1), 
	`luaL_checköt
(L, 2)));

149 
	}
}

153 
	$m©h_mö
 (
lua_Sèã
 *
L
) {

154 
n
 = 
	`lua_gët›
(
L
);

155 
lua_Numbî
 
dmö
 = 
	`luaL_checknumbî
(
L
, 1);

156 
i
;

157 
i
=2; i<=
n
; i++) {

158 
lua_Numbî
 
d
 = 
	`luaL_checknumbî
(
L
, 
i
);

159 i‡(
d
 < 
dmö
)

160 
dmö
 = 
d
;

162 
	`lua_pushnumbî
(
L
, 
dmö
);

164 
	}
}

167 
	$m©h_max
 (
lua_Sèã
 *
L
) {

168 
n
 = 
	`lua_gët›
(
L
);

169 
lua_Numbî
 
dmax
 = 
	`luaL_checknumbî
(
L
, 1);

170 
i
;

171 
i
=2; i<=
n
; i++) {

172 
lua_Numbî
 
d
 = 
	`luaL_checknumbî
(
L
, 
i
);

173 i‡(
d
 > 
dmax
)

174 
dmax
 = 
d
;

176 
	`lua_pushnumbî
(
L
, 
dmax
);

178 
	}
}

181 
	$m©h_øndom
 (
lua_Sèã
 *
L
) {

184 
lua_Numbî
 
r
 = (lua_Numbî)(
	`ønd
()%
RAND_MAX
) / (lua_Number)RAND_MAX;

185 
	`lua_gët›
(
L
)) {

187 
	`lua_pushnumbî
(
L
, 
r
);

191 
u
 = 
	`luaL_checköt
(
L
, 1);

192 
	`luaL_¨gcheck
(
L
, 1<=
u
, 1, "interval isÉmpty");

193 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
r
*
u
)+1);

197 
l
 = 
	`luaL_checköt
(
L
, 1);

198 
u
 = 
	`luaL_checköt
(
L
, 2);

199 
	`luaL_¨gcheck
(
L
, 
l
<=
u
, 2, "interval isÉmpty");

200 
	`lua_pushnumbî
(
L
, 
	`Êo‹
(
r
*(
u
-
l
+1))+l);

203 :  
	`luaL_îr‹
(
L
, "wrongÇumber ofárguments");

206 
	}
}

209 
	$m©h_øndom£ed
 (
lua_Sèã
 *
L
) {

210 
	`§™d
(
	`luaL_checköt
(
L
, 1));

212 
	}
}

215 c⁄° 
luaL_Reg
 
	gm©hlib
[] = {

216 {"abs", 
m©h_abs
},

217 {"acos", 
m©h_acos
},

218 {"asö", 
m©h_asö
},

219 {"©™2", 
m©h_©™2
},

220 {"©™", 
m©h_©™
},

221 {"˚û", 
m©h_˚û
},

222 {"cosh", 
m©h_cosh
},

223 {"cos", 
m©h_cos
},

224 {"deg", 
m©h_deg
},

225 {"exp", 
m©h_exp
},

226 {"Êo‹", 
m©h_Êo‹
},

227 {"fmod", 
m©h_fmod
},

228 {"‰exp", 
m©h_‰exp
},

229 {"ldexp", 
m©h_ldexp
},

230 {"log10", 
m©h_log10
},

231 {"log", 
m©h_log
},

232 {"max", 
m©h_max
},

233 {"mö", 
m©h_mö
},

234 {"modf", 
m©h_modf
},

235 {"pow", 
m©h_pow
},

236 {"ød", 
m©h_ød
},

237 {"øndom", 
m©h_øndom
},

238 {"øndom£ed", 
m©h_øndom£ed
},

239 {"söh", 
m©h_söh
},

240 {"sö", 
m©h_sö
},

241 {"sqπ", 
m©h_sqπ
},

242 {"ènh", 
m©h_ènh
},

243 {"èn", 
m©h_èn
},

244 {
NULL
, NULL}

251 
LUALIB_API
 
	$lua›í_m©h
 (
lua_Sèã
 *
L
) {

252 
	`¥ötf
("debug: 7.luaopen_math\n");

253 
	`luaL_ªgi°î
(
L
, 
LUA_MATHLIBNAME
, 
m©hlib
);

254 
	`lua_pushnumbî
(
L
, 
PI
);

255 
	`lua_£tfõld
(
L
, -2, "pi");

256 
	`lua_pushnumbî
(
L
, 
HUGE_VAL
);

257 
	`lua_£tfõld
(
L
, -2, "huge");

258 #i‡
	`deföed
(
LUA_COMPAT_MOD
)

259 
	`lua_gëfõld
(
L
, -1, "fmod");

260 
	`lua_£tfõld
(
L
, -2, "mod");

263 
	}
}

	@src/lmem.c

8 
	~<°ddef.h
>

10 
	#lmem_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"ldebug.h
"

16 
	~"ldo.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°©e.h
"

43 
	#MINSIZEARRAY
 4

	)

46 *
	$luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
, 
size_t
 
size_ñems
,

47 
limô
, c⁄° *
îr‹msg
) {

48 *
√wblock
;

49 
√wsize
;

50 i‡(*
size
 >
limô
/2) {

51 i‡(*
size
 >
limô
)

52 
	`luaG_ru√º‹
(
L
, 
îr‹msg
);

53 
√wsize
 = 
limô
;

56 
√wsize
 = (*
size
)*2;

57 i‡(
√wsize
 < 
MINSIZEARRAY
)

58 
√wsize
 = 
MINSIZEARRAY
;

60 
√wblock
 = 
	`luaM_ªÆlocv
(
L
, 
block
, *
size
, 
√wsize
, 
size_ñems
);

61 *
size
 = 
√wsize
;

62  
√wblock
;

63 
	}
}

66 *
	$luaM_toobig
 (
lua_Sèã
 *
L
) {

67 
	`luaG_ru√º‹
(
L
, "memoryállocationÉrror: blockÅoo big");

68  
NULL
;

69 
	}
}

81 *
	$luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
osize
, size_à
nsize
) {

82 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

83 
	`lua_as£π
((
osize
 =0Ë=(
block
 =
NULL
));

84 
block
 = (*
g
->
‰óŒoc
)(g->
ud
, block, 
osize
, 
nsize
);

85 i‡(
block
 =
NULL
 && 
nsize
 > 0)

86 
	`luaD_throw
(
L
, 
LUA_ERRMEM
);

87 
	`lua_as£π
((
nsize
 =0Ë=(
block
 =
NULL
));

88 
g
->
tŸÆbyãs
 = (g->tŸÆbyã†- 
osize
Ë+ 
nsize
;

89  
block
;

90 
	}
}

	@src/lmem.h

7 #i‚de‡
lmem_h


8 
	#lmem_h


	)

11 
	~<°ddef.h
>

13 
	~"Œimôs.h
"

14 
	~"lua.h
"

16 
	#MEMERRMSG
 "nŸÉnough mem‹y"

	)

19 
	#luaM_ªÆlocv
(
L
,
b
,
⁄
,
n
,
e
) \

20 ((
	`ˇ°
(
size_t
, (
n
)+1Ë<
MAX_SIZET
/(
e
)) ? \

21 
	`luaM_ªÆloc_
(
L
, (
b
), (
⁄
)*(
e
), (
n
)*(e)) : \

22 
	`luaM_toobig
(
L
))

	)

24 
	#luaM_‰ìmem
(
L
, 
b
, 
s
Ë
	`luaM_ªÆloc_
(L, (b), (s), 0)

	)

25 
	#luaM_‰ì
(
L
, 
b
Ë
	`luaM_ªÆloc_
(L, (b), (*(b)), 0)

	)

26 
	#luaM_‰ì¨øy
(
L
, 
b
, 
n
, 
t
Ë
	`luaM_ªÆlocv
(L, (b),Ç, 0, —))

	)

28 
	#luaM_mÆloc
(
L
,
t
Ë
	`luaM_ªÆloc_
(L, 
NULL
, 0, (t))

	)

29 
	#luaM_√w
(
L
,
t
Ë
	`ˇ°
— *, 
	`luaM_mÆloc
(L, —)))

	)

30 
	#luaM_√wve˘‹
(
L
,
n
,
t
) \

31 
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, 
NULL
, 0, 
n
, —)))

	)

33 
	#luaM_growve˘‹
(
L
,
v
,
√Àms
,
size
,
t
,
limô
,
e
) \

34 i‡((
√Àms
)+1 > (
size
)) \

35 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_growaux_
(
L
,v,&(
size
),—),
limô
,
e
)))

	)

37 
	#luaM_ªÆlocve˘‹
(
L
, 
v
,
ﬁdn
,
n
,
t
) \

38 ((
v
)=
	`ˇ°
(
t
 *, 
	`luaM_ªÆlocv
(
L
, v, 
ﬁdn
, 
n
, —))))

	)

41 
LUAI_FUNC
 *
luaM_ªÆloc_
 (
lua_Sèã
 *
L
, *
block
, 
size_t
 
ﬁdsize
,

42 
size_t
 
size
);

43 
LUAI_FUNC
 *
luaM_toobig
 (
lua_Sèã
 *
L
);

44 
LUAI_FUNC
 *
luaM_growaux_
 (
lua_Sèã
 *
L
, *
block
, *
size
,

45 
size_t
 
size_ñem
, 
limô
,

46 c⁄° *
îr‹msg
);

	@src/loadlib.c

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

16 
	#lﬂdlib_c


	)

17 
	#LUA_LIB


	)

19 
	~"lua.h
"

21 
	~"œuxlib.h
"

22 
	~"luÆib.h
"

26 
	#LUA_POF
 "lua›í_"

	)

29 
	#LUA_OFSEP
 "_"

	)

32 
	#LIBPREFIX
 "LOADLIB: "

	)

34 
	#POF
 
LUA_POF


	)

35 
	#LIB_FAIL
 "›í"

	)

39 
	#ERRLIB
 1

	)

40 
	#ERRFUNC
 2

	)

42 
	#£çrogdú
(
L
Ë(()0)

	)

45 
Œ_u∆ﬂdlib
 (*
lib
);

46 *
Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
);

47 
lua_CFun˘i⁄
 
Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
);

51 #i‡
deföed
(
LUA_DL_DLOPEN
)

61 
	~<dlf˙.h
>

63 
	$Œ_u∆ﬂdlib
 (*
lib
) {

64 
	`dl˛o£
(
lib
);

65 
	}
}

68 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

69 *
lib
 = 
	`dl›í
(
∑th
, 
RTLD_NOW
);

70 i‡(
lib
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

71  
lib
;

72 
	}
}

75 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

76 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄)
	`dlsym
(
lib
, 
sym
);

77 i‡(
f
 =
NULL
Ë
	`lua_push°rög
(
L
, 
	`dÀº‹
());

78  
f
;

79 
	}
}

85 #ñi‡
deföed
(
LUA_DL_DLL
)

92 
	~<wödows.h
>

95 #unde‡
£çrogdú


97 
	$£çrogdú
 (
lua_Sèã
 *
L
) {

98 
buff
[
MAX_PATH
 + 1];

99 *
lb
;

100 
DWORD
 
nsize
 = (
buff
)/();

101 
DWORD
 
n
 = 
	`GëModuÀFûeNameA
(
NULL
, 
buff
, 
nsize
);

102 i‡(
n
 =0 ||Ç =
nsize
 || (
lb
 = 
	`°ºchr
(
buff
, '\\')Ë=
NULL
)

103 
	`luaL_îr‹
(
L
, "unableÅo get ModuleFileName");

105 *
lb
 = '\0';

106 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1), 
LUA_EXECDIR
, 
buff
);

107 
	`lua_ªmove
(
L
, -2);

109 
	}
}

112 
	$pushîr‹
 (
lua_Sèã
 *
L
) {

113 
îr‹
 = 
	`GëLa°Eº‹
();

114 
buf„r
[128];

115 i‡(
	`F‹m©MesßgeA
(
FORMAT_MESSAGE_IGNORE_INSERTS
 | 
FORMAT_MESSAGE_FROM_SYSTEM
,

116 
NULL
, 
îr‹
, 0, 
buf„r
, (buffer), NULL))

117 
	`lua_push°rög
(
L
, 
buf„r
);

119 
	`lua_pushf°rög
(
L
, "sy°emÉº‹ %d\n", 
îr‹
);

120 
	}
}

122 
	$Œ_u∆ﬂdlib
 (*
lib
) {

123 
	`FªeLibøry
((
HINSTANCE
)
lib
);

124 
	}
}

127 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

128 
HINSTANCE
 
lib
 = 
	`LﬂdLibøryA
(
∑th
);

129 i‡(
lib
 =
NULL
Ë
	`pushîr‹
(
L
);

130  
lib
;

131 
	}
}

134 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

135 
lua_CFun˘i⁄
 
f
 = (lua_CFun˘i⁄)
	`GëProcAddªss
((
HINSTANCE
)
lib
, 
sym
);

136 i‡(
f
 =
NULL
Ë
	`pushîr‹
(
L
);

137  
f
;

138 
	}
}

144 #ñi‡
deföed
(
LUA_DL_DYLD
)

151 
	~<mach-o/dyld.h
>

155 #unde‡
POF


156 
	#POF
 "_" 
LUA_POF


	)

159 
	$pushîr‹
 (
lua_Sèã
 *
L
) {

160 c⁄° *
îr_°r
;

161 c⁄° *
îr_fûe
;

162 
NSLökEdôEº‹s
 
îr
;

163 
îr_num
;

164 
	`NSLökEdôEº‹
(&
îr
, &
îr_num
, &
îr_fûe
, &
îr_°r
);

165 
	`lua_push°rög
(
L
, 
îr_°r
);

166 
	}
}

169 c⁄° *
	$îr‹‰omcode
 (
NSObje˘FûeImageRëu∫Code
 
ªt
) {

170 
ªt
) {

171 
NSObje˘FûeImageI«µr›rüãFûe
:

173 
NSObje˘FûeImageArch
:

175 
NSObje˘FûeImageF‹m©
:

177 
NSObje˘FûeImageAc˚ss
:

179 
NSObje˘FûeImageFaûuª
:

183 
	}
}

186 
	$Œ_u∆ﬂdlib
 (*
lib
) {

187 
	`NSUnLökModuÀ
((
NSModuÀ
)
lib
, 
NSUNLINKMODULE_OPTION_RESET_LAZY_REFERENCES
);

188 
	}
}

191 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

192 
NSObje˘FûeImage
 
img
;

193 
NSObje˘FûeImageRëu∫Code
 
ªt
;

195 if(!
	`_dyld_¥e£¡
()) {

196 
	`lua_pushlôîÆ
(
L
, "dyldÇotÖresent");

197  
NULL
;

199 
ªt
 = 
	`NSCª©eObje˘FûeImageFromFûe
(
∑th
, &
img
);

200 i‡(
ªt
 =
NSObje˘FûeImageSuc˚ss
) {

201 
NSModuÀ
 
mod
 = 
	`NSLökModuÀ
(
img
, 
∑th
, 
NSLINKMODULE_OPTION_PRIVATE
 |

202 
NSLINKMODULE_OPTION_RETURN_ON_ERROR
);

203 
	`NSDe°royObje˘FûeImage
(
img
);

204 i‡(
mod
 =
NULL
Ë
	`pushîr‹
(
L
);

205  
mod
;

207 
	`lua_push°rög
(
L
, 
	`îr‹‰omcode
(
ªt
));

208  
NULL
;

209 
	}
}

212 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

213 
NSSymbﬁ
 
nss
 = 
	`NSLookupSymbﬁInModuÀ
((
NSModuÀ
)
lib
, 
sym
);

214 i‡(
nss
 =
NULL
) {

215 
	`lua_pushf°rög
(
L
, "symbﬁ " 
LUA_QS
 "ÇŸ found", 
sym
);

216  
NULL
;

218  (
lua_CFun˘i⁄
)
	`NSAddªssOfSymbﬁ
(
nss
);

219 
	}
}

232 #unde‡
LIB_FAIL


233 
	#LIB_FAIL
 "ab£¡"

	)

236 
	#DLMSG
 "dy«mi¯libørõ†nŸÉ«bÀd; check you∏Lu®ö°Æœti⁄"

	)

239 
	$Œ_u∆ﬂdlib
 (*
lib
) {

240 ()
lib
;

241 
	}
}

244 *
	$Œ_lﬂd
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

245 ()
∑th
;

246 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

247  
NULL
;

248 
	}
}

251 
lua_CFun˘i⁄
 
	$Œ_sym
 (
lua_Sèã
 *
L
, *
lib
, c⁄° *
sym
) {

252 ()
lib
; ()
sym
;

253 
	`lua_pushlôîÆ
(
L
, 
DLMSG
);

254  
NULL
;

255 
	}
}

262 **
	$Œ_ªgi°î
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

263 **
∂ib
;

264 
	`lua_pushf°rög
(
L
, "%s%s", 
LIBPREFIX
, 
∑th
);

265 
	`lua_gëèbÀ
(
L
, 
LUA_REGISTRYINDEX
);

266 i‡(!
	`lua_i¢û
(
L
, -1))

267 
∂ib
 = (**)
	`lua_tou£rd©a
(
L
, -1);

269 
	`lua_p›
(
L
, 1);

270 
∂ib
 = (**)
	`lua_√wu£rd©a
(
L
, (const *));

271 *
∂ib
 = 
NULL
;

272 
	`luaL_gëmë©abÀ
(
L
, "_LOADLIB");

273 
	`lua_£tmë©abÀ
(
L
, -2);

274 
	`lua_pushf°rög
(
L
, "%s%s", 
LIBPREFIX
, 
∑th
);

275 
	`lua_pushvÆue
(
L
, -2);

276 
	`lua_£âabÀ
(
L
, 
LUA_REGISTRYINDEX
);

278  
∂ib
;

279 
	}
}

286 
	$g˘m
 (
lua_Sèã
 *
L
) {

287 **
lib
 = (**)
	`luaL_checkud©a
(
L
, 1, "_LOADLIB");

288 i‡(*
lib
Ë
	`Œ_u∆ﬂdlib
(*lib);

289 *
lib
 = 
NULL
;

291 
	}
}

294 
	$Œ_lﬂdfunc
 (
lua_Sèã
 *
L
, c⁄° *
∑th
, c⁄° *
sym
) {

295 **
ªg
 = 
	`Œ_ªgi°î
(
L
, 
∑th
);

296 i‡(*
ªg
 =
NULL
Ë*ªg = 
	`Œ_lﬂd
(
L
, 
∑th
);

297 i‡(*
ªg
 =
NULL
)

298  
ERRLIB
;

300 
lua_CFun˘i⁄
 
f
 = 
	`Œ_sym
(
L
, *
ªg
, 
sym
);

301 i‡(
f
 =
NULL
)

302  
ERRFUNC
;

303 
	`lua_pushcfun˘i⁄
(
L
, 
f
);

306 
	}
}

309 
	$Œ_lﬂdlib
 (
lua_Sèã
 *
L
) {

310 c⁄° *
∑th
 = 
	`luaL_check°rög
(
L
, 1);

311 c⁄° *
öô
 = 
	`luaL_check°rög
(
L
, 2);

312 
°©
 = 
	`Œ_lﬂdfunc
(
L
, 
∑th
, 
öô
);

313 i‡(
°©
 == 0)

316 
	`lua_pushnû
(
L
);

317 
	`lua_ö£π
(
L
, -2);

318 
	`lua_push°rög
(
L
, (
°©
 =
ERRLIB
Ë? 
LIB_FAIL
 : "init");

321 
	}
}

332 
	$ªadabÀ
 (c⁄° *
fûíame
) {

333 
FILE
 *
f
 = 
	`f›í
(
fûíame
, "r");

334 i‡(
f
 =
NULL
)  0;

335 
	`f˛o£
(
f
);

337 
	}
}

340 c⁄° *
	$push√xâem∂©e
 (
lua_Sèã
 *
L
, c⁄° *
∑th
) {

341 c⁄° *
l
;

342 *
∑th
 =*
LUA_PATHSEP
)Öath++;

343 i‡(*
∑th
 ='\0'Ë 
NULL
;

344 
l
 = 
	`°rchr
(
∑th
, *
LUA_PATHSEP
);

345 i‡(
l
 =
NULL
Ë»
∑th
 + 
	`°æí
(path);

346 
	`lua_pushl°rög
(
L
, 
∑th
, 
l
 -Öath);

347  
l
;

348 
	}
}

351 c⁄° *
	$födfûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
,

352 c⁄° *
≤ame
) {

353 c⁄° *
∑th
;

354 
«me
 = 
	`luaL_gsub
(
L
,Çame, ".", 
LUA_DIRSEP
);

355 
	`lua_gëfõld
(
L
, 
LUA_ENVIRONINDEX
, 
≤ame
);

356 
∑th
 = 
	`lua_to°rög
(
L
, -1);

357 i‡(
∑th
 =
NULL
)

358 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("∑ckage.%s"Ë" mu° bê®°rög", 
≤ame
);

359 
	`lua_pushlôîÆ
(
L
, "");

360 (
∑th
 = 
	`push√xâem∂©e
(
L
,Ö©h)Ë!
NULL
) {

361 c⁄° *
fûíame
;

362 
fûíame
 = 
	`luaL_gsub
(
L
, 
	`lua_to°rög
(L, -1), 
LUA_PATH_MARK
, 
«me
);

363 
	`lua_ªmove
(
L
, -2);

364 i‡(
	`ªadabÀ
(
fûíame
))

365  
fûíame
;

366 
	`lua_pushf°rög
(
L
, "\n\äÿfûê" 
LUA_QS
, 
fûíame
);

367 
	`lua_ªmove
(
L
, -2);

368 
	`lua_c⁄ˇt
(
L
, 2);

370  
NULL
;

371 
	}
}

374 
	$lﬂdîr‹
 (
lua_Sèã
 *
L
, c⁄° *
fûíame
) {

375 
	`luaL_îr‹
(
L
, "îr‹Üﬂdög moduÀ " 
LUA_QS
 " from file " LUA_QS ":\n\t%s",

376 
	`lua_to°rög
(
L
, 1), 
fûíame
,Üua_tostring(L, -1));

377 
	}
}

380 
	$lﬂdî_Lua
 (
lua_Sèã
 *
L
) {

381 c⁄° *
fûíame
;

382 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

383 
fûíame
 = 
	`födfûe
(
L
, 
«me
, "path");

384 i‡(
fûíame
 =
NULL
)  1;

385 i‡(
	`luaL_lﬂdfûe
(
L
, 
fûíame
) != 0)

386 
	`lﬂdîr‹
(
L
, 
fûíame
);

388 
	}
}

391 c⁄° *
	$mkfun˙ame
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
) {

392 c⁄° *
fun˙ame
;

393 c⁄° *
m¨k
 = 
	`°rchr
(
mod«me
, *
LUA_IGMARK
);

394 i‡(
m¨k
Ë
mod«me
 = mark + 1;

395 
fun˙ame
 = 
	`luaL_gsub
(
L
, 
mod«me
, ".", 
LUA_OFSEP
);

396 
fun˙ame
 = 
	`lua_pushf°rög
(
L
, 
POF
"%s", funcname);

397 
	`lua_ªmove
(
L
, -2);

398  
fun˙ame
;

399 
	}
}

402 
	$lﬂdî_C
 (
lua_Sèã
 *
L
) {

403 c⁄° *
fun˙ame
;

404 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

405 c⁄° *
fûíame
 = 
	`födfûe
(
L
, 
«me
, "cpath");

406 i‡(
fûíame
 =
NULL
)  1;

407 
fun˙ame
 = 
	`mkfun˙ame
(
L
, 
«me
);

408 i‡(
	`Œ_lﬂdfunc
(
L
, 
fûíame
, 
fun˙ame
) != 0)

409 
	`lﬂdîr‹
(
L
, 
fûíame
);

411 
	}
}

414 
	$lﬂdî_CroŸ
 (
lua_Sèã
 *
L
) {

415 c⁄° *
fun˙ame
;

416 c⁄° *
fûíame
;

417 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

418 c⁄° *
p
 = 
	`°rchr
(
«me
, '.');

419 
°©
;

420 i‡(
p
 =
NULL
)  0;

421 
	`lua_pushl°rög
(
L
, 
«me
, 
p
 -Çame);

422 
fûíame
 = 
	`födfûe
(
L
, 
	`lua_to°rög
(L, -1), "cpath");

423 i‡(
fûíame
 =
NULL
)  1;

424 
fun˙ame
 = 
	`mkfun˙ame
(
L
, 
«me
);

425 i‡((
°©
 = 
	`Œ_lﬂdfunc
(
L
, 
fûíame
, 
fun˙ame
)) != 0) {

426 i‡(
°©
 !
ERRFUNC
Ë
	`lﬂdîr‹
(
L
, 
fûíame
);

427 
	`lua_pushf°rög
(
L
, "\n\äÿmoduÀ " 
LUA_QS
 " in file " LUA_QS,

428 
«me
, 
fûíame
);

432 
	}
}

435 
	$lﬂdî_¥ñﬂd
 (
lua_Sèã
 *
L
) {

436 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

437 
	`lua_gëfõld
(
L
, 
LUA_ENVIRONINDEX
, "preload");

438 i‡(!
	`lua_i°abÀ
(
L
, -1))

439 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("package.preload") " must beáÅable");

440 
	`lua_gëfõld
(
L
, -1, 
«me
);

441 i‡(
	`lua_i¢û
(
L
, -1))

442 
	`lua_pushf°rög
(
L
, "\n\äÿfõldÖackage.¥ñﬂd['%s']", 
«me
);

444 
	}
}

447 c⁄° 
	g£¡öñ_
 = 0;

448 
	#£¡öñ
 ((*)&
£¡öñ_
)

	)

451 
	$Œ_ªquúe
 (
lua_Sèã
 *
L
) {

452 c⁄° *
«me
 = 
	`luaL_check°rög
(
L
, 1);

453 
i
;

454 
	`lua_£â›
(
L
, 1);

455 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

456 
	`lua_gëfõld
(
L
, 2, 
«me
);

457 i‡(
	`lua_toboﬁón
(
L
, -1)) {

458 i‡(
	`lua_tou£rd©a
(
L
, -1Ë=
£¡öñ
)

459 
	`luaL_îr‹
(
L
, "lo› o∏¥eviou†îr‹Üﬂdög moduÀ " 
LUA_QS
, 
«me
);

463 
	`lua_gëfõld
(
L
, 
LUA_ENVIRONINDEX
, "loaders");

464 i‡(!
	`lua_i°abÀ
(
L
, -1))

465 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("package.loaders") " must beáÅable");

466 
	`lua_pushlôîÆ
(
L
, "");

467 
i
=1; ; i++) {

468 
	`lua_øwgëi
(
L
, -2, 
i
);

469 i‡(
	`lua_i¢û
(
L
, -1))

470 
	`luaL_îr‹
(
L
, "moduÀ " 
LUA_QS
 "Çot found:%s",

471 
«me
, 
	`lua_to°rög
(
L
, -2));

472 
	`lua_push°rög
(
L
, 
«me
);

473 
	`lua_ˇŒ
(
L
, 1, 1);

474 i‡(
	`lua_isfun˘i⁄
(
L
, -1))

476 i‡(
	`lua_is°rög
(
L
, -1))

477 
	`lua_c⁄ˇt
(
L
, 2);

479 
	`lua_p›
(
L
, 1);

481 
	`lua_pushlightu£rd©a
(
L
, 
£¡öñ
);

482 
	`lua_£tfõld
(
L
, 2, 
«me
);

483 
	`lua_push°rög
(
L
, 
«me
);

484 
	`lua_ˇŒ
(
L
, 1, 1);

485 i‡(!
	`lua_i¢û
(
L
, -1))

486 
	`lua_£tfõld
(
L
, 2, 
«me
);

487 
	`lua_gëfõld
(
L
, 2, 
«me
);

488 i‡(
	`lua_tou£rd©a
(
L
, -1Ë=
£¡öñ
) {

489 
	`lua_pushboﬁón
(
L
, 1);

490 
	`lua_pushvÆue
(
L
, -1);

491 
	`lua_£tfõld
(
L
, 2, 
«me
);

494 
	}
}

507 
	$£t„nv
 (
lua_Sèã
 *
L
) {

508 
lua_Debug
 
¨
;

509 i‡(
	`lua_gë°ack
(
L
, 1, &
¨
) == 0 ||

510 
	`lua_gëöfo
(
L
, "f", &
¨
) == 0 ||

511 
	`lua_iscfun˘i⁄
(
L
, -1))

512 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("module") "Çot called fromá Lua function");

513 
	`lua_pushvÆue
(
L
, -2);

514 
	`lua_£t„nv
(
L
, -2);

515 
	`lua_p›
(
L
, 1);

516 
	}
}

519 
	$do›ti⁄s
 (
lua_Sèã
 *
L
, 
n
) {

520 
i
;

521 
i
 = 2; i <
n
; i++) {

522 
	`lua_pushvÆue
(
L
, 
i
);

523 
	`lua_pushvÆue
(
L
, -2);

524 
	`lua_ˇŒ
(
L
, 1, 0);

526 
	}
}

529 
	$modöô
 (
lua_Sèã
 *
L
, c⁄° *
mod«me
) {

530 c⁄° *
dŸ
;

531 
	`lua_pushvÆue
(
L
, -1);

532 
	`lua_£tfõld
(
L
, -2, "_M");

533 
	`lua_push°rög
(
L
, 
mod«me
);

534 
	`lua_£tfõld
(
L
, -2, "_NAME");

535 
dŸ
 = 
	`°ºchr
(
mod«me
, '.');

536 i‡(
dŸ
 =
NULL
ËdŸ = 
mod«me
;

537 
dŸ
++;

539 
	`lua_pushl°rög
(
L
, 
mod«me
, 
dŸ
 - modname);

540 
	`lua_£tfõld
(
L
, -2, "_PACKAGE");

541 
	}
}

544 
	$Œ_moduÀ
 (
lua_Sèã
 *
L
) {

545 c⁄° *
mod«me
 = 
	`luaL_check°rög
(
L
, 1);

546 
lﬂded
 = 
	`lua_gët›
(
L
) + 1;

547 
	`lua_gëfõld
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED");

548 
	`lua_gëfõld
(
L
, 
lﬂded
, 
mod«me
);

549 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

550 
	`lua_p›
(
L
, 1);

552 i‡(
	`luaL_födèbÀ
(
L
, 
LUA_GLOBALSINDEX
, 
mod«me
, 1Ë!
NULL
)

553  
	`luaL_îr‹
(
L
, "«mêc⁄Êi˘ f‹ moduÀ " 
LUA_QS
, 
mod«me
);

554 
	`lua_pushvÆue
(
L
, -1);

555 
	`lua_£tfõld
(
L
, 
lﬂded
, 
mod«me
);

558 
	`lua_gëfõld
(
L
, -1, "_NAME");

559 i‡(!
	`lua_i¢û
(
L
, -1))

560 
	`lua_p›
(
L
, 1);

562 
	`lua_p›
(
L
, 1);

563 
	`modöô
(
L
, 
mod«me
);

565 
	`lua_pushvÆue
(
L
, -1);

566 
	`£t„nv
(
L
);

567 
	`do›ti⁄s
(
L
, 
lﬂded
 - 1);

569 
	}
}

572 
	$Œ_£óŒ
 (
lua_Sèã
 *
L
) {

573 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

574 i‡(!
	`lua_gëmë©abÀ
(
L
, 1)) {

575 
	`lua_¸óãèbÀ
(
L
, 0, 1);

576 
	`lua_pushvÆue
(
L
, -1);

577 
	`lua_£tmë©abÀ
(
L
, 1);

579 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

580 
	`lua_£tfõld
(
L
, -2, "__index");

582 
	}
}

590 
	#AUXMARK
 "\1"

	)

592 
	$£ç©h
 (
lua_Sèã
 *
L
, c⁄° *
fõld«me
, c⁄° *
ív«me
,

593 c⁄° *
def
) {

594 c⁄° *
∑th
 = 
	`gëív
(
ív«me
);

595 i‡(
∑th
 =
NULL
)

596 
	`lua_push°rög
(
L
, 
def
);

599 
∑th
 = 
	`luaL_gsub
(
L
,Ö©h, 
LUA_PATHSEP
 LUA_PATHSEP,

600 
LUA_PATHSEP
 
AUXMARK
 LUA_PATHSEP);

601 
	`luaL_gsub
(
L
, 
∑th
, 
AUXMARK
, 
def
);

602 
	`lua_ªmove
(
L
, -2);

604 
	`£çrogdú
(
L
);

605 
	`lua_£tfõld
(
L
, -2, 
fõld«me
);

606 
	}
}

609 c⁄° 
luaL_Reg
 
	gpk_funcs
[] = {

610 {"lﬂdlib", 
Œ_lﬂdlib
},

611 {"£óŒ", 
Œ_£óŒ
},

612 {
NULL
, NULL}

616 c⁄° 
luaL_Reg
 
	gŒ_funcs
[] = {

617 {"moduÀ", 
Œ_moduÀ
},

618 {"ªquúe", 
Œ_ªquúe
},

619 {
NULL
, NULL}

623 c⁄° 
lua_CFun˘i⁄
 
	glﬂdîs
[] =

624 {
lﬂdî_¥ñﬂd
, 
lﬂdî_Lua
, 
lﬂdî_C
, 
lﬂdî_CroŸ
, 
NULL
};

627 
LUALIB_API
 
	$lua›í_∑ckage
 (
lua_Sèã
 *
L
) {

628 
	`¥ötf
("debug: 2.luaopen_package\n");

629 
i
;

631 
	`luaL_√wmë©abÀ
(
L
, "_LOADLIB");

632 
	`lua_pushcfun˘i⁄
(
L
, 
g˘m
);

633 
	`lua_£tfõld
(
L
, -2, "__gc");

635 
	`luaL_ªgi°î
(
L
, 
LUA_LOADLIBNAME
, 
pk_funcs
);

636 #i‡
	`deföed
(
LUA_COMPAT_LOADLIB
)

637 
	`lua_gëfõld
(
L
, -1, "loadlib");

638 
	`lua_£tfõld
(
L
, 
LUA_GLOBALSINDEX
, "loadlib");

640 
	`lua_pushvÆue
(
L
, -1);

641 
	`lua_ª∂a˚
(
L
, 
LUA_ENVIRONINDEX
);

643 
	`lua_¸óãèbÀ
(
L
, (
lﬂdîs
)/(loaders[0]) - 1, 0);

645 
i
=0; 
lﬂdîs
[i] !
NULL
; i++) {

646 
	`lua_pushcfun˘i⁄
(
L
, 
lﬂdîs
[
i
]);

647 
	`lua_øw£ti
(
L
, -2, 
i
+1);

649 
	`lua_£tfõld
(
L
, -2, "loaders");

650 
	`£ç©h
(
L
, "∑th", 
LUA_PATH
, 
LUA_PATH_DEFAULT
);

651 
	`£ç©h
(
L
, "˝©h", 
LUA_CPATH
, 
LUA_CPATH_DEFAULT
);

653 
	`lua_pushlôîÆ
(
L
, 
LUA_DIRSEP
 "\n" 
LUA_PATHSEP
 "\n" 
LUA_PATH_MARK
 "\n"

654 
LUA_EXECDIR
 "\n" 
LUA_IGMARK
);

655 
	`lua_£tfõld
(
L
, -2, "config");

657 
	`luaL_födèbÀ
(
L
, 
LUA_REGISTRYINDEX
, "_LOADED", 2);

658 
	`lua_£tfõld
(
L
, -2, "loaded");

660 
	`lua_√wèbÀ
(
L
);

661 
	`lua_£tfõld
(
L
, -2, "preload");

662 
	`lua_pushvÆue
(
L
, 
LUA_GLOBALSINDEX
);

663 
	`luaL_ªgi°î
(
L
, 
NULL
, 
Œ_funcs
);

664 
	`lua_p›
(
L
, 1);

666 
	}
}

	@src/lobject.c

7 
	~<˘y≥.h
>

8 
	~<°d¨g.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#lobje˘_c


	)

14 
	#LUA_CORE


	)

16 
	~"lua.h
"

18 
	~"ldo.h
"

19 
	~"lmem.h
"

20 
	~"lobje˘.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"lvm.h
"

27 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
 = {{
NULL
}, 
LUA_TNIL
};

35 
	$luaO_öt2fb
 (
x
) {

36 
e
 = 0;

37 
x
 >= 16) {

38 
x
 = (x+1) >> 1;

39 
e
++;

41 i‡(
x
 < 8)  x;

42  ((
e
+1Ë<< 3Ë| (
	`ˇ°_öt
(
x
) - 8);

43 
	}
}

47 
	$luaO_fb2öt
 (
x
) {

48 
e
 = (
x
 >> 3) & 31;

49 i‡(
e
 =0Ë 
x
;

50  ((
x
 & 7)+8Ë<< (
e
 - 1);

51 
	}
}

71 
	$luaO_log2
 (
x
) {

72 c⁄° 
lu_byã
 
log_2
[256] = {

82 
l
 = -1;

83 
x
 >256Ë{ 
l
 += 8; x >>= 8; }

84  
l
 + 
log_2
[
x
];

86 
	}
}

89 
	$luaO_øwequÆObj
 (c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
) {

90 i‡(
	`ây≥
(
t1
Ë!ây≥(
t2
))  0;

91 
	`ây≥
(
t1
)) {

92 
LUA_TNIL
:

94 
LUA_TNUMBER
:

95  
	`luai_numeq
(
	`nvÆue
(
t1
),ÇvÆue(
t2
));

96 
LUA_TBOOLEAN
:

97  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

98 
LUA_TLIGHTUSERDATA
:

99  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

101 
	`lua_as£π
(
	`iscﬁÀ˘abÀ
(
t1
));

102  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

104 
	}
}

107 
	$luaO_°r2d
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
) {

108 *
íd±r
;

109 *
ªsu…
 = 
	`lua_°r2numbî
(
s
, &
íd±r
);

110 i‡(
íd±r
 =
s
)  0;

111 i‡(*
íd±r
 == 'x' || *endptr == 'X')

112 *
ªsu…
 = 
	`ˇ°_num
(
	`°πoul
(
s
, &
íd±r
, 16));

113 i‡(*
íd±r
 == '\0')  1;

114 
	`is•a˚
(
	`ˇ°
(, *
íd±r
)))Éndptr++;

115 i‡(*
íd±r
 != '\0')  0;

117 
	}
}

128 
	$push°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
) {

129 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√w
(L, 
°r
));

130 
	`ö¸_t›
(
L
);

131 
	}
}

135 c⁄° *
	$luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, 
va_li°
 
¨gp
) {

136 
n
 = 1;

137 
	`push°r
(
L
, "");

139 c⁄° *
e
 = 
	`°rchr
(
fmt
, '%');

140 i‡(
e
 =
NULL
) ;

141 
	`£tsvÆue2s
(
L
, L->
t›
, 
	`luaS_√wl°r
(L, 
fmt
, 
e
-fmt));

142 
	`ö¸_t›
(
L
);

143 *(
e
+1)) {

145 c⁄° *
s
 = 
	`va_¨g
(
¨gp
, *);

146 i‡(
s
 =
NULL
) s = "(null)";

147 
	`push°r
(
L
, 
s
);

151 
buff
[2];

152 
buff
[0] = 
	`ˇ°
(, 
	`va_¨g
(
¨gp
, ));

153 
buff
[1] = '\0';

154 
	`push°r
(
L
, 
buff
);

158 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°_num
(
	`va_¨g
(
¨gp
, )));

159 
	`ö¸_t›
(
L
);

163 
	`£ävÆue
(
L
->
t›
, 
	`ˇ°_num
(
	`va_¨g
(
¨gp
, 
l_uacNumbî
)));

164 
	`ö¸_t›
(
L
);

168 
buff
[4*(*) + 8];

169 
	`•rötf
(
buff
, "%p", 
	`va_¨g
(
¨gp
, *));

170 
	`push°r
(
L
, 
buff
);

174 
	`push°r
(
L
, "%");

178 
buff
[3];

179 
buff
[0] = '%';

180 
buff
[1] = *(
e
+1);

181 
buff
[2] = '\0';

182 
	`push°r
(
L
, 
buff
);

186 
n
 += 2;

187 
fmt
 = 
e
+2;

189 
	`push°r
(
L
, 
fmt
);

190 
	`luaV_c⁄ˇt
(
L
, 
n
+1, 
	`ˇ°_öt
(L->
t›
 - L->
ba£
) - 1);

191 
L
->
t›
 -
n
;

192  
	`svÆue
(
L
->
t›
 - 1);

193 
	}
}

196 c⁄° *
	$luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...) {

197 c⁄° *
msg
;

198 
va_li°
 
¨gp
;

199 
	`va_°¨t
(
¨gp
, 
fmt
);

200 
msg
 = 
	`luaO_pushvf°rög
(
L
, 
fmt
, 
¨gp
);

201 
	`va_íd
(
¨gp
);

202  
msg
;

203 
	}
}

206 
	$luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
bufÊí
) {

207 i‡(*
sour˚
 == '=') {

208 
	`°∫˝y
(
out
, 
sour˚
+1, 
bufÊí
);

209 
out
[
bufÊí
-1] = '\0';

212 i‡(*
sour˚
 == '@') {

213 
size_t
 
l
;

214 
sour˚
++;

215 
bufÊí
 -= (" '...' ");

216 
l
 = 
	`°æí
(
sour˚
);

217 
	`°r˝y
(
out
, "");

218 i‡(
l
 > 
bufÊí
) {

219 
sour˚
 +(
l
-
bufÊí
);

220 
	`°rˇt
(
out
, "...");

222 
	`°rˇt
(
out
, 
sour˚
);

225 
size_t
 
Àn
 = 
	`°rc•n
(
sour˚
, "\n\r");

226 
bufÊí
 -= (" [string \"...\"] ");

227 i‡(
Àn
 > 
bufÊí
)Üen = bufflen;

228 
	`°r˝y
(
out
, "[string \"");

229 i‡(
sour˚
[
Àn
] != '\0') {

230 
	`°∫ˇt
(
out
, 
sour˚
, 
Àn
);

231 
	`°rˇt
(
out
, "...");

234 
	`°rˇt
(
out
, 
sour˚
);

235 
	`°rˇt
(
out
, "\"]");

238 
	}
}

	@src/lobject.h

8 #i‚de‡
lobje˘_h


9 
	#lobje˘_h


	)

12 
	~<°d¨g.h
>

15 
	~"Œimôs.h
"

16 
	~"lua.h
"

20 
	#LAST_TAG
 
LUA_TTHREAD


	)

22 
	#NUM_TAGS
 (
LAST_TAG
+1)

	)

28 
	#LUA_TPROTO
 (
LAST_TAG
+1)

	)

29 
	#LUA_TUPVAL
 (
LAST_TAG
+2)

	)

30 
	#LUA_TDEADKEY
 (
LAST_TAG
+3)

	)

36 
GCObje˘
 
	tGCObje˘
;

43 
	#Comm⁄Hódî
 
GCObje˘
 *
√xt
; 
lu_byã
 
â
;Üu_byã 
m¨ked


	)

49 
	sGChódî
 {

50 
	mComm⁄Hódî
;

51 } 
	tGChódî
;

60 
GCObje˘
 *
	mgc
;

61 *
	mp
;

62 
lua_Numbî
 
	mn
;

63 
	mb
;

64 } 
	tVÆue
;

71 
	#TVÆuefõlds
 
VÆue
 
vÆue
; 
â


	)

73 
	slua_TVÆue
 {

74 
	mTVÆuefõlds
;

75 } 
	tTVÆue
;

82 
	#âi¢û
(
o
Ë(
	`ây≥
(oË=
LUA_TNIL
)

	)

83 
	#âi¢umbî
(
o
Ë(
	`ây≥
(oË=
LUA_TNUMBER
)

	)

84 
	#âis°rög
(
o
Ë(
	`ây≥
(oË=
LUA_TSTRING
)

	)

85 
	#âi°abÀ
(
o
Ë(
	`ây≥
(oË=
LUA_TTABLE
)

	)

86 
	#âisfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
)

	)

87 
	#âisboﬁón
(
o
Ë(
	`ây≥
(oË=
LUA_TBOOLEAN
)

	)

88 
	#âisu£rd©a
(
o
Ë(
	`ây≥
(oË=
LUA_TUSERDATA
)

	)

89 
	#âi°hªad
(
o
Ë(
	`ây≥
(oË=
LUA_TTHREAD
)

	)

90 
	#âi¶ightu£rd©a
(
o
Ë(
	`ây≥
(oË=
LUA_TLIGHTUSERDATA
)

	)

93 
	#ây≥
(
o
Ë((o)->
â
)

	)

94 
	#gcvÆue
(
o
Ë
	`check_exp
(
	`iscﬁÀ˘abÀ
(o), (o)->
vÆue
.
gc
)

	)

95 
	#pvÆue
(
o
Ë
	`check_exp
(
	`âi¶ightu£rd©a
(o), (o)->
vÆue
.
p
)

	)

96 
	#nvÆue
(
o
Ë
	`check_exp
(
	`âi¢umbî
(o), (o)->
vÆue
.
n
)

	)

97 
	#øwtsvÆue
(
o
Ë
	`check_exp
(
	`âis°rög
(o), &(o)->
vÆue
.
gc
->
ts
)

	)

98 
	#tsvÆue
(
o
Ë(&
	`øwtsvÆue
(o)->
tsv
)

	)

99 
	#øwuvÆue
(
o
Ë
	`check_exp
(
	`âisu£rd©a
(o), &(o)->
vÆue
.
gc
->
u
)

	)

100 
	#uvÆue
(
o
Ë(&
	`øwuvÆue
(o)->
uv
)

	)

101 
	#˛vÆue
(
o
Ë
	`check_exp
(
	`âisfun˘i⁄
(o), &(o)->
vÆue
.
gc
->
˛
)

	)

102 
	#hvÆue
(
o
Ë
	`check_exp
(
	`âi°abÀ
(o), &(o)->
vÆue
.
gc
->
h
)

	)

103 
	#bvÆue
(
o
Ë
	`check_exp
(
	`âisboﬁón
(o), (o)->
vÆue
.
b
)

	)

104 
	#thvÆue
(
o
Ë
	`check_exp
(
	`âi°hªad
(o), &(o)->
vÆue
.
gc
->
th
)

	)

106 
	#l_isÁl£
(
o
Ë(
	`âi¢û
(oË|| (
	`âisboﬁón
(oË&& 
	`bvÆue
(oË=0))

	)

111 
	#checkc⁄si°ícy
(
obj
) \

112 
	`lua_as£π
(!
	`iscﬁÀ˘abÀ
(
obj
Ë|| (
	`ây≥
(objË=(obj)->
vÆue
.
gc
->
gch
.
â
))

	)

114 
	#checklivíess
(
g
,
obj
) \

115 
	`lua_as£π
(!
	`iscﬁÀ˘abÀ
(
obj
) || \

116 ((
	`ây≥
(
obj
Ë=(obj)->
vÆue
.
gc
->
gch
.
â
Ë&& !
	`isdód
(
g
, (obj)->vÆue.gc)))

	)

123 
	#£äûvÆue
(
obj
Ë((obj)->
â
=
LUA_TNIL
)

	)

125 
	#£ävÆue
(
obj
,
x
) \

126 { 
TVÆue
 *
i_o
=(
obj
); i_o->
vÆue
.
n
=(
x
); i_o->
â
=
LUA_TNUMBER
; }

	)

128 
	#£çvÆue
(
obj
,
x
) \

129 { 
TVÆue
 *
i_o
=(
obj
); i_o->
vÆue
.
p
=(
x
); i_o->
â
=
LUA_TLIGHTUSERDATA
; }

	)

131 
	#£tbvÆue
(
obj
,
x
) \

132 { 
TVÆue
 *
i_o
=(
obj
); i_o->
vÆue
.
b
=(
x
); i_o->
â
=
LUA_TBOOLEAN
; }

	)

134 
	#£tsvÆue
(
L
,
obj
,
x
) \

135 { 
TVÆue
 *
i_o
=(
obj
); \

136 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TSTRING
; \

137 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

139 
	#£tuvÆue
(
L
,
obj
,
x
) \

140 { 
TVÆue
 *
i_o
=(
obj
); \

141 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TUSERDATA
; \

142 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

144 
	#£âhvÆue
(
L
,
obj
,
x
) \

145 { 
TVÆue
 *
i_o
=(
obj
); \

146 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TTHREAD
; \

147 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

149 
	#£t˛vÆue
(
L
,
obj
,
x
) \

150 { 
TVÆue
 *
i_o
=(
obj
); \

151 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TFUNCTION
; \

152 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

154 
	#£thvÆue
(
L
,
obj
,
x
) \

155 { 
TVÆue
 *
i_o
=(
obj
); \

156 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TTABLE
; \

157 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

159 
	#£çtvÆue
(
L
,
obj
,
x
) \

160 { 
TVÆue
 *
i_o
=(
obj
); \

161 
i_o
->
vÆue
.
gc
=
	`ˇ°
(
GCObje˘
 *, (
x
)); i_o->
â
=
LUA_TPROTO
; \

162 
	`checklivíess
(
	`G
(
L
),
i_o
); }

	)

167 
	#£tobj
(
L
,
obj1
,
obj2
) \

168 { c⁄° 
TVÆue
 *
o2
=(
obj2
); TVÆuê*
o1
=(
obj1
); \

169 
o1
->
vÆue
 = 
o2
->vÆue; o1->
â
=o2->tt; \

170 
	`checklivíess
(
	`G
(
L
),
o1
); }

	)

178 
	#£tobjs2s
 
£tobj


	)

180 
	#£tobj2s
 
£tobj


	)

181 
	#£tsvÆue2s
 
£tsvÆue


	)

182 
	#£thvÆue2s
 
£thvÆue


	)

183 
	#£çtvÆue2s
 
£çtvÆue


	)

185 
	#£tobjt2t
 
£tobj


	)

187 
	#£tobj2t
 
£tobj


	)

189 
	#£tobj2n
 
£tobj


	)

190 
	#£tsvÆue2n
 
£tsvÆue


	)

192 
	#£âty≥
(
obj
, 
â
Ë(
	`ây≥
(objË—t))

	)

195 
	#iscﬁÀ˘abÀ
(
o
Ë(
	`ây≥
(oË>
LUA_TSTRING
)

	)

199 
TVÆue
 *
	tStkId
;

205 
	uTSåög
 {

206 
L_UmaxÆign
 
	mdummy
;

208 
	mComm⁄Hódî
;

209 
lu_byã
 
	mª£rved
;

210 
	mhash
;

211 
size_t
 
	mÀn
;

212 } 
	mtsv
;

213 } 
	tTSåög
;

216 
	#gë°r
(
ts
Ë
	`ˇ°
(c⁄° *, (tsË+ 1)

	)

227 
	#svÆue
(
o
Ë
	`gë°r
(
	`øwtsvÆue
(o))

	)

231 
	uUd©a
 {

232 
L_UmaxÆign
 
	mdummy
;

234 
	mComm⁄Hódî
;

235 
TabÀ
 *
	mmë©abÀ
;

236 
TabÀ
 *
	mív
;

237 
size_t
 
	mÀn
;

238 } 
	muv
;

239 } 
	tUd©a
;

248 
	sPrŸo
 {

249 
	mComm⁄Hódî
;

250 
TVÆue
 *
	mk
;

251 
In°ru˘i⁄
 *
	mcode
;

252 
PrŸo
 **
	mp
;

253 *
	mlöeöfo
;

254 
LocV¨
 *
	mlocv¨s
;

255 
TSåög
 **
	mupvÆues
;

256 
TSåög
 *
	msour˚
;

257 
	msizeupvÆues
;

258 
	msizek
;

259 
	msizecode
;

260 
	msizñöeöfo
;

261 
	msizï
;

262 
	msizñocv¨s
;

263 
	mlöedeföed
;

264 
	mœ°löedeföed
;

265 
GCObje˘
 *
	mg˛i°
;

266 
lu_byã
 
	mnups
;

267 
lu_byã
 
	mnum∑øms
;

268 
lu_byã
 
	mis_v¨¨g
;

269 
lu_byã
 
	mmax°acksize
;

270 } 
	tPrŸo
;

274 
	#VARARG_HASARG
 1

	)

275 
	#VARARG_ISVARARG
 2

	)

276 
	#VARARG_NEEDSARG
 4

	)

279 
	sLocV¨
 {

280 
TSåög
 *
	mv¨«me
;

281 
	m°¨çc
;

282 
	mídpc
;

283 } 
	tLocV¨
;

291 
	sUpVÆ
 {

292 
	mComm⁄Hódî
;

293 
TVÆue
 *
	mv
;

295 
TVÆue
 
	mvÆue
;

297 
UpVÆ
 *
	m¥ev
;

298 
UpVÆ
 *
	m√xt
;

299 } 
	ml
;

300 } 
	mu
;

301 } 
	tUpVÆ
;

310 
	#ClosuªHódî
 \

311 
Comm⁄Hódî
; 
lu_byã
 
isC
;Üu_byã 
nupvÆues
; 
GCObje˘
 *
g˛i°
; \

312 
TabÀ
 *
ív


	)

314 
	sCClosuª
 {

315 
	mClosuªHódî
;

316 
lua_CFun˘i⁄
 
	mf
;

317 
TVÆue
 
	mupvÆue
[1];

318 } 
	tCClosuª
;

321 
	sLClosuª
 {

322 
	mClosuªHódî
;

323 
PrŸo
 *
	mp
;

324 
UpVÆ
 *
	mupvÆs
[1];

325 } 
	tLClosuª
;

328 
	uClosuª
 {

329 
CClosuª
 
	mc
;

330 
LClosuª
 
	ml
;

331 } 
	tClosuª
;

334 
	#iscfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
 && 
	`˛vÆue
(o)->
c
.
isC
)

	)

335 
	#isLfun˘i⁄
(
o
Ë(
	`ây≥
(oË=
LUA_TFUNCTION
 && !
	`˛vÆue
(o)->
c
.
isC
)

	)

342 
	uTKey
 {

344 
	mTVÆuefõlds
;

345 
Node
 *
	m√xt
;

346 } 
	mnk
;

347 
TVÆue
 
	mtvk
;

348 } 
	tTKey
;

351 
	sNode
 {

352 
TVÆue
 
	mi_vÆ
;

353 
TKey
 
	mi_key
;

354 } 
	tNode
;

361 
	sTabÀ
 {

362 
	mComm⁄Hódî
;

363 
lu_byã
 
	mÊags
;

364 
lu_byã
 
	mlsizíode
;

365 
TabÀ
 *
	mmë©abÀ
;

366 
TVÆue
 *
	m¨øy
;

367 
Node
 *
	mnode
;

368 
Node
 *
	mœ°‰ì
;

369 
GCObje˘
 *
	mg˛i°
;

370 
	msizóºay
;

371 } 
	tTabÀ
;

378 
	#lmod
(
s
,
size
) \

379 (
	`check_exp
((
size
&(size-1))==0, (
	`ˇ°
(, (
s
Ë& ((size)-1)))))

	)

388 
	#twŸo
(
x
Ë(1<<(x))

	)

389 
	#sizíode
(
t
Ë(
	`twŸo
(—)->
lsizíode
))

	)

392 
	#luaO_nûobje˘
 (&
luaO_nûobje˘_
)

	)

394 
LUAI_DATA
 c⁄° 
TVÆue
 
	gluaO_nûobje˘_
;

397 
	#˚ûlog2
(
x
Ë(
	`luaO_log2
((x)-1Ë+ 1)

	)

399 
LUAI_FUNC
 
luaO_log2
 (
x
);

400 
LUAI_FUNC
 
luaO_öt2fb
 (
x
);

401 
LUAI_FUNC
 
luaO_fb2öt
 (
x
);

402 
LUAI_FUNC
 
luaO_øwequÆObj
 (c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
);

403 
LUAI_FUNC
 
luaO_°r2d
 (c⁄° *
s
, 
lua_Numbî
 *
ªsu…
);

404 
LUAI_FUNC
 c⁄° *
luaO_pushvf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
,

405 
va_li°
 
¨gp
);

406 
LUAI_FUNC
 c⁄° *
luaO_pushf°rög
 (
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

407 
LUAI_FUNC
 
luaO_chunkid
 (*
out
, c⁄° *
sour˚
, 
size_t
 
Àn
);

	@src/lopcodes.c

7 
	#l›codes_c


	)

8 
	#LUA_CORE


	)

11 
	~"l›codes.h
"

16 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1] = {

55 
NULL


59 
	#›mode
(
t
,
a
,
b
,
c
,
m
Ë((—)<<7Ë| (◊)<<6Ë| ((b)<<4Ë| ((c)<<2Ë| (m))

	)

61 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
] = {

63 
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

64 ,
›mode
(0, 1, 
OpArgK
, 
OpArgN
, 
iABx
)

65 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

66 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

67 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

68 ,
›mode
(0, 1, 
OpArgK
, 
OpArgN
, 
iABx
)

69 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

70 ,
›mode
(0, 0, 
OpArgK
, 
OpArgN
, 
iABx
)

71 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

72 ,
›mode
(0, 0, 
OpArgK
, OpArgK, 
iABC
)

73 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

74 ,
›mode
(0, 1, 
OpArgR
, 
OpArgK
, 
iABC
)

75 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

76 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

77 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

78 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

79 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

80 ,
›mode
(0, 1, 
OpArgK
, OpArgK, 
iABC
)

81 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

82 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

83 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iABC
)

84 ,
›mode
(0, 1, 
OpArgR
, OpArgR, 
iABC
)

85 ,
›mode
(0, 0, 
OpArgR
, 
OpArgN
, 
iAsBx
)

86 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

87 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

88 ,
›mode
(1, 0, 
OpArgK
, OpArgK, 
iABC
)

89 ,
›mode
(1, 1, 
OpArgR
, 
OpArgU
, 
iABC
)

90 ,
›mode
(1, 1, 
OpArgR
, 
OpArgU
, 
iABC
)

91 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

92 ,
›mode
(0, 1, 
OpArgU
, OpArgU, 
iABC
)

93 ,
›mode
(0, 0, 
OpArgU
, 
OpArgN
, 
iABC
)

94 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

95 ,
›mode
(0, 1, 
OpArgR
, 
OpArgN
, 
iAsBx
)

96 ,
›mode
(1, 0, 
OpArgN
, 
OpArgU
, 
iABC
)

97 ,
›mode
(0, 0, 
OpArgU
, OpArgU, 
iABC
)

98 ,
›mode
(0, 0, 
OpArgN
, OpArgN, 
iABC
)

99 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABx
)

100 ,
›mode
(0, 1, 
OpArgU
, 
OpArgN
, 
iABC
)

	@src/lopcodes.h

7 #i‚de‡
l›codes_h


8 
	#l›codes_h


	)

10 
	~"Œimôs.h
"

31 
	eOpMode
 {
	miABC
, 
	miABx
, 
	miAsBx
};

37 
	#SIZE_C
 9

	)

38 
	#SIZE_B
 9

	)

39 
	#SIZE_Bx
 (
SIZE_C
 + 
SIZE_B
)

	)

40 
	#SIZE_A
 8

	)

42 
	#SIZE_OP
 6

	)

44 
	#POS_OP
 0

	)

45 
	#POS_A
 (
POS_OP
 + 
SIZE_OP
)

	)

46 
	#POS_C
 (
POS_A
 + 
SIZE_A
)

	)

47 
	#POS_B
 (
POS_C
 + 
SIZE_C
)

	)

48 
	#POS_Bx
 
POS_C


	)

56 #i‡
SIZE_Bx
 < 
LUAI_BITSINT
-1

57 
	#MAXARG_Bx
 ((1<<
SIZE_Bx
)-1)

	)

58 
	#MAXARG_sBx
 (
MAXARG_Bx
>>1Ë

	)

60 
	#MAXARG_Bx
 
MAX_INT


	)

61 
	#MAXARG_sBx
 
MAX_INT


	)

65 
	#MAXARG_A
 ((1<<
SIZE_A
)-1)

	)

66 
	#MAXARG_B
 ((1<<
SIZE_B
)-1)

	)

67 
	#MAXARG_C
 ((1<<
SIZE_C
)-1)

	)

71 
	#MASK1
(
n
,
p
Ë((~((~(
In°ru˘i⁄
)0)<<n))<<p)

	)

74 
	#MASK0
(
n
,
p
Ë(~
	`MASK1
“,p))

	)

80 
	#GET_OPCODE
(
i
Ë(
	`ˇ°
(
OpCode
, ((i)>>
POS_OP
Ë& 
	`MASK1
(
SIZE_OP
,0)))

	)

81 
	#SET_OPCODE
(
i
,
o
Ë((iË(((i)&
	`MASK0
(
SIZE_OP
,
POS_OP
)) | \

82 ((
	`ˇ°
(
In°ru˘i⁄
, 
o
)<<
POS_OP
)&
	`MASK1
(
SIZE_OP
,POS_OP))))

	)

84 
	#GETARG_A
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_A
Ë& 
	`MASK1
(
SIZE_A
,0)))

	)

85 
	#SETARG_A
(
i
,
u
Ë((iË(((i)&
	`MASK0
(
SIZE_A
,
POS_A
)) | \

86 ((
	`ˇ°
(
In°ru˘i⁄
, 
u
)<<
POS_A
)&
	`MASK1
(
SIZE_A
,POS_A))))

	)

88 
	#GETARG_B
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_B
Ë& 
	`MASK1
(
SIZE_B
,0)))

	)

89 
	#SETARG_B
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_B
,
POS_B
)) | \

90 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
)&
	`MASK1
(
SIZE_B
,POS_B))))

	)

92 
	#GETARG_C
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_C
Ë& 
	`MASK1
(
SIZE_C
,0)))

	)

93 
	#SETARG_C
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_C
,
POS_C
)) | \

94 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_C
)&
	`MASK1
(
SIZE_C
,POS_C))))

	)

96 
	#GETARG_Bx
(
i
Ë(
	`ˇ°
(, ((i)>>
POS_Bx
Ë& 
	`MASK1
(
SIZE_Bx
,0)))

	)

97 
	#SETARG_Bx
(
i
,
b
Ë((iË(((i)&
	`MASK0
(
SIZE_Bx
,
POS_Bx
)) | \

98 ((
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_Bx
)&
	`MASK1
(
SIZE_Bx
,POS_Bx))))

	)

100 
	#GETARG_sBx
(
i
Ë(
	`GETARG_Bx
(i)-
MAXARG_sBx
)

	)

101 
	#SETARG_sBx
(
i
,
b
Ë
	`SETARG_Bx
((i),
	`ˇ°
(, (b)+
MAXARG_sBx
))

	)

104 
	#CREATE_ABC
(
o
,
a
,
b
,
c
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

105 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

106 | (
	`ˇ°
(
In°ru˘i⁄
, 
b
)<<
POS_B
) \

107 | (
	`ˇ°
(
In°ru˘i⁄
, 
c
)<<
POS_C
))

	)

109 
	#CREATE_ABx
(
o
,
a
,
bc
Ë((
	`ˇ°
(
In°ru˘i⁄
, o)<<
POS_OP
) \

110 | (
	`ˇ°
(
In°ru˘i⁄
, 
a
)<<
POS_A
) \

111 | (
	`ˇ°
(
In°ru˘i⁄
, 
bc
)<<
POS_Bx
))

	)

119 
	#BITRK
 (1 << (
SIZE_B
 - 1))

	)

122 
	#ISK
(
x
Ë((xË& 
BITRK
Ë

	)

125 
	#INDEXK
(
r
Ë(()‘Ë& ~
BITRK
)

	)

127 
	#MAXINDEXRK
 (
BITRK
 - 1)

	)

130 
	#RKASK
(
x
Ë((xË| 
BITRK
)

	)

136 
	#NO_REG
 
MAXARG_A


	)

154 
	mOP_MOVE
,

155 
	mOP_LOADK
,

156 
	mOP_LOADBOOL
,

157 
	mOP_LOADNIL
,

158 
	mOP_GETUPVAL
,

160 
	mOP_GETGLOBAL
,

161 
	mOP_GETTABLE
,

163 
	mOP_SETGLOBAL
,

164 
	mOP_SETUPVAL
,

165 
	mOP_SETTABLE
,

167 
	mOP_NEWTABLE
,

169 
	mOP_SELF
,

171 
	mOP_ADD
,

172 
	mOP_SUB
,

173 
	mOP_MUL
,

174 
	mOP_DIV
,

175 
	mOP_MOD
,

176 
	mOP_POW
,

177 
	mOP_UNM
,

178 
	mOP_NOT
,

179 
	mOP_LEN
,

181 
	mOP_CONCAT
,

183 
	mOP_JMP
,

185 
	mOP_EQ
,

186 
	mOP_LT
,

187 
	mOP_LE
,

189 
	mOP_TEST
,

190 
	mOP_TESTSET
,

192 
	mOP_CALL
,

193 
	mOP_TAILCALL
,

194 
	mOP_RETURN
,

196 
	mOP_FORLOOP
,

198 
	mOP_FORPREP
,

200 
	mOP_TFORLOOP
,

202 
	mOP_SETLIST
,

204 
	mOP_CLOSE
,

205 
	mOP_CLOSURE
,

207 
	mOP_VARARG


208 } 
	tOpCode
;

211 
	#NUM_OPCODES
 (
	`ˇ°
(, 
OP_VARARG
Ë+ 1)

	)

246 
	eOpArgMask
 {

247 
	mOpArgN
,

248 
	mOpArgU
,

249 
	mOpArgR
,

250 
	mOpArgK


253 
LUAI_DATA
 c⁄° 
lu_byã
 
	gluaP_›modes
[
NUM_OPCODES
];

259 
	#gëOpMode
(
m
Ë(
	`ˇ°
(
OpMode
, 
luaP_›modes
[m] & 3))

	)

260 
	#gëBMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 4Ë& 3))

	)

261 
	#gëCMode
(
m
Ë(
	`ˇ°
(
OpArgMask
, (
luaP_›modes
[m] >> 2Ë& 3))

	)

262 
	#ã°AMode
(
m
Ë(
luaP_›modes
[m] & (1 << 6))

	)

263 
	#ã°TMode
(
m
Ë(
luaP_›modes
[m] & (1 << 7))

	)

266 
LUAI_DATA
 c⁄° *c⁄° 
	gluaP_›«mes
[
NUM_OPCODES
+1];

270 
	#LFIELDS_PER_FLUSH
 50

	)

	@src/loslib.c

8 
	~<î∫o.h
>

9 
	~<loˇÀ.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

12 
	~<time.h
>

14 
	#lo¶ib_c


	)

15 
	#LUA_LIB


	)

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

23 
	$os_pushªsu…
 (
lua_Sèã
 *
L
, 
i
, c⁄° *
fûíame
) {

24 
í
 = 
î∫o
;

25 i‡(
i
) {

26 
	`lua_pushboﬁón
(
L
, 1);

30 
	`lua_pushnû
(
L
);

31 
	`lua_pushf°rög
(
L
, "%s: %s", 
fûíame
, 
	`°ªº‹
(
í
));

32 
	`lua_pushöãgî
(
L
, 
í
);

35 
	}
}

38 
	$os_execuã
 (
lua_Sèã
 *
L
) {

39 
	`lua_pushöãgî
(
L
, 
	`sy°em
(
	`luaL_›t°rög
(L, 1, 
NULL
)));

41 
	}
}

44 
	$os_ªmove
 (
lua_Sèã
 *
L
) {

45 c⁄° *
fûíame
 = 
	`luaL_check°rög
(
L
, 1);

46  
	`os_pushªsu…
(
L
, 
	`ªmove
(
fûíame
) == 0, filename);

47 
	}
}

50 
	$os_ª«me
 (
lua_Sèã
 *
L
) {

51 c⁄° *
‰om«me
 = 
	`luaL_check°rög
(
L
, 1);

52 c⁄° *
t⁄ame
 = 
	`luaL_check°rög
(
L
, 2);

53  
	`os_pushªsu…
(
L
, 
	`ª«me
(
‰om«me
, 
t⁄ame
) == 0, fromname);

54 
	}
}

57 
	$os_tm≤ame
 (
lua_Sèã
 *
L
) {

58 
buff
[
LUA_TMPNAMBUFSIZE
];

59 
îr
;

60 
	`lua_tm≤am
(
buff
, 
îr
);

61 i‡(
îr
)

62  
	`luaL_îr‹
(
L
, "unableÅo generateá unique filename");

63 
	`lua_push°rög
(
L
, 
buff
);

65 
	}
}

68 
	$os_gëív
 (
lua_Sèã
 *
L
) {

69 
	`lua_push°rög
(
L
, 
	`gëív
(
	`luaL_check°rög
(L, 1)));

71 
	}
}

74 
	$os_˛ock
 (
lua_Sèã
 *
L
) {

75 
	`lua_pushnumbî
(
L
, ((
lua_Numbî
)
	`˛ock
())/÷ua_Numbî)
CLOCKS_PER_SEC
);

77 
	}
}

88 
	$£tfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

89 
	`lua_pushöãgî
(
L
, 
vÆue
);

90 
	`lua_£tfõld
(
L
, -2, 
key
);

91 
	}
}

93 
	$£tboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
vÆue
) {

94 i‡(
vÆue
 < 0)

96 
	`lua_pushboﬁón
(
L
, 
vÆue
);

97 
	`lua_£tfõld
(
L
, -2, 
key
);

98 
	}
}

100 
	$gëboﬁfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
) {

101 
ªs
;

102 
	`lua_gëfõld
(
L
, -1, 
key
);

103 
ªs
 = 
	`lua_i¢û
(
L
, -1Ë? -1 : 
	`lua_toboﬁón
(L, -1);

104 
	`lua_p›
(
L
, 1);

105  
ªs
;

106 
	}
}

109 
	$gëfõld
 (
lua_Sèã
 *
L
, c⁄° *
key
, 
d
) {

110 
ªs
;

111 
	`lua_gëfõld
(
L
, -1, 
key
);

112 i‡(
	`lua_i¢umbî
(
L
, -1))

113 
ªs
 = ()
	`lua_toöãgî
(
L
, -1);

115 i‡(
d
 < 0)

116  
	`luaL_îr‹
(
L
, "fõld " 
LUA_QS
 " missög i¿d©êèbÀ", 
key
);

117 
ªs
 = 
d
;

119 
	`lua_p›
(
L
, 1);

120  
ªs
;

121 
	}
}

124 
	$os_d©e
 (
lua_Sèã
 *
L
) {

125 c⁄° *
s
 = 
	`luaL_›t°rög
(
L
, 1, "%c");

126 
time_t
 
t
 = 
	`luaL_›t
(
L
, (time_t)
luaL_checknumbî
, 2, 
	`time
(
NULL
));

127 
tm
 *
°m
;

128 i‡(*
s
 == '!') {

129 
°m
 = 
	`gmtime
(&
t
);

130 
s
++;

133 
°m
 = 
	`loˇ…ime
(&
t
);

134 i‡(
°m
 =
NULL
)

135 
	`lua_pushnû
(
L
);

136 i‡(
	`°rcmp
(
s
, "*t") == 0) {

137 
	`lua_¸óãèbÀ
(
L
, 0, 9);

138 
	`£tfõld
(
L
, "£c", 
°m
->
tm_£c
);

139 
	`£tfõld
(
L
, "mö", 
°m
->
tm_mö
);

140 
	`£tfõld
(
L
, "hour", 
°m
->
tm_hour
);

141 
	`£tfõld
(
L
, "day", 
°m
->
tm_mday
);

142 
	`£tfõld
(
L
, "m⁄th", 
°m
->
tm_m⁄
+1);

143 
	`£tfõld
(
L
, "yór", 
°m
->
tm_yór
+1900);

144 
	`£tfõld
(
L
, "wday", 
°m
->
tm_wday
+1);

145 
	`£tfõld
(
L
, "yday", 
°m
->
tm_yday
+1);

146 
	`£tboﬁfõld
(
L
, "isd°", 
°m
->
tm_isd°
);

149 
cc
[3];

150 
luaL_Buf„r
 
b
;

151 
cc
[0] = '%'; cc[2] = '\0';

152 
	`luaL_bufföô
(
L
, &
b
);

153 ; *
s
; s++) {

154 i‡(*
s
 != '%' || *(s + 1) == '\0')

155 
	`luaL_addch¨
(&
b
, *
s
);

157 
size_t
 
ª¶í
;

158 
buff
[200];

159 
cc
[1] = *(++
s
);

160 
ª¶í
 = 
	`°r·ime
(
buff
, (buff), 
cc
, 
°m
);

161 
	`luaL_addl°rög
(&
b
, 
buff
, 
ª¶í
);

164 
	`luaL_pushªsu…
(&
b
);

167 
	}
}

170 
	$os_time
 (
lua_Sèã
 *
L
) {

171 
time_t
 
t
;

172 i‡(
	`lua_i¢⁄e‹nû
(
L
, 1))

173 
t
 = 
	`time
(
NULL
);

175 
tm
 
ts
;

176 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

177 
	`lua_£â›
(
L
, 1);

178 
ts
.
tm_£c
 = 
	`gëfõld
(
L
, "sec", 0);

179 
ts
.
tm_mö
 = 
	`gëfõld
(
L
, "min", 0);

180 
ts
.
tm_hour
 = 
	`gëfõld
(
L
, "hour", 12);

181 
ts
.
tm_mday
 = 
	`gëfõld
(
L
, "day", -1);

182 
ts
.
tm_m⁄
 = 
	`gëfõld
(
L
, "month", -1) - 1;

183 
ts
.
tm_yór
 = 
	`gëfõld
(
L
, "year", -1) - 1900;

184 
ts
.
tm_isd°
 = 
	`gëboﬁfõld
(
L
, "isdst");

185 
t
 = 
	`mktime
(&
ts
);

187 i‡(
t
 =(
time_t
)(-1))

188 
	`lua_pushnû
(
L
);

190 
	`lua_pushnumbî
(
L
, (
lua_Numbî
)
t
);

192 
	}
}

195 
	$os_dif·ime
 (
lua_Sèã
 *
L
) {

196 
	`lua_pushnumbî
(
L
, 
	`dif·ime
((
time_t
)(
	`luaL_checknumbî
(L, 1)),

197 (
time_t
)(
	`luaL_›äumbî
(
L
, 2, 0))));

199 
	}
}

204 
	$os_£éoˇÀ
 (
lua_Sèã
 *
L
) {

205 c⁄° 
ˇt
[] = {
LC_ALL
, 
LC_COLLATE
, 
LC_CTYPE
, 
LC_MONETARY
,

206 
LC_NUMERIC
, 
LC_TIME
};

207 c⁄° *c⁄° 
ˇäames
[] = {"all", "collate", "ctype", "monetary",

208 "numîic", "time", 
NULL
};

209 c⁄° *
l
 = 
	`luaL_›t°rög
(
L
, 1, 
NULL
);

210 
›
 = 
	`luaL_check›ti⁄
(
L
, 2, "Æl", 
ˇäames
);

211 
	`lua_push°rög
(
L
, 
	`£éoˇÀ
(
ˇt
[
›
], 
l
));

213 
	}
}

216 
	$os_exô
 (
lua_Sèã
 *
L
) {

217 
	`exô
(
	`luaL_›töt
(
L
, 1, 
EXIT_SUCCESS
));

218 
	}
}

220 c⁄° 
luaL_Reg
 
	gsy¶ib
[] = {

221 {"˛ock", 
os_˛ock
},

222 {"d©e", 
os_d©e
},

223 {"dif·ime", 
os_dif·ime
},

224 {"execuã", 
os_execuã
},

225 {"exô", 
os_exô
},

226 {"gëív", 
os_gëív
},

227 {"ªmove", 
os_ªmove
},

228 {"ª«me", 
os_ª«me
},

229 {"£éoˇÀ", 
os_£éoˇÀ
},

230 {"time", 
os_time
},

231 {"tm≤ame", 
os_tm≤ame
},

232 {
NULL
, NULL}

239 
LUALIB_API
 
	$lua›í_os
 (
lua_Sèã
 *
L
) {

240 
	`¥ötf
("debug: 5.luaopen_os\n");

241 
	`luaL_ªgi°î
(
L
, 
LUA_OSLIBNAME
, 
sy¶ib
);

243 
	}
}

	@src/lparser.c

8 
	~<°rög.h
>

10 
	#Õ¨£r_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lcode.h
"

16 
	~"ldebug.h
"

17 
	~"ldo.h
"

18 
	~"lfunc.h
"

19 
	~"Œex.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"Õ¨£r.h
"

24 
	~"l°©e.h
"

25 
	~"l°rög.h
"

26 
	~"…abÀ.h
"

30 
	#hasmu…ªt
(
k
Ë((kË=
VCALL
 || (kË=
VVARARG
)

	)

32 
	#gëlocv¨
(
fs
, 
i
Ë((fs)->
f
->
locv¨s
[(fs)->
a˘v¨
[i]])

	)

34 
	#luaY_checklimô
(
fs
,
v
,
l
,
m
Ëi‡((v)>÷)Ë
	`îr‹limô
(fs,l,m)

	)

40 
	sBlockC¡
 {

41 
BlockC¡
 *
	m¥evious
;

42 
	mbªakli°
;

43 
lu_byã
 
	m«˘v¨
;

44 
lu_byã
 
	mupvÆ
;

45 
lu_byã
 
	misbªakabÀ
;

46 } 
	tBlockC¡
;

53 
chunk
 (
LexSèã
 *
ls
);

54 
ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
);

57 
	$™ch‹_tokí
 (
LexSèã
 *
ls
) {

58 i‡(
ls
->
t
.
tokí
 =
TK_NAME
 ||Üs->t.tokí =
TK_STRING
) {

59 
TSåög
 *
ts
 = 
ls
->
t
.
£möfo
.ts;

60 
	`luaX_√w°rög
(
ls
, 
	`gë°r
(
ts
),Ås->
tsv
.
Àn
);

62 
	}
}

65 
	$îr‹_ex≥˘ed
 (
LexSèã
 *
ls
, 
tokí
) {

66 
	`luaX_sy¡axîr‹
(
ls
,

67 
	`luaO_pushf°rög
(
ls
->
L
, 
LUA_QS
 "Éx≥˘ed", 
	`luaX_tokí2°r
÷s, 
tokí
)));

68 
	}
}

71 
	$îr‹limô
 (
FuncSèã
 *
fs
, 
limô
, c⁄° *
wh©
) {

72 c⁄° *
msg
 = (
fs
->
f
->
löedeföed
 == 0) ?

73 
	`luaO_pushf°rög
(
fs
->
L
, "maö fun˘i⁄ ha†m‹êth™ %d %s", 
limô
, 
wh©
) :

74 
	`luaO_pushf°rög
(
fs
->
L
, "functionátÜine %d has moreÅhan %d %s",

75 
fs
->
f
->
löedeföed
, 
limô
, 
wh©
);

76 
	`luaX_Àxîr‹
(
fs
->
ls
, 
msg
, 0);

77 
	}
}

80 
	$ã°√xt
 (
LexSèã
 *
ls
, 
c
) {

81 i‡(
ls
->
t
.
tokí
 =
c
) {

82 
	`luaX_√xt
(
ls
);

86 
	}
}

89 
	$check
 (
LexSèã
 *
ls
, 
c
) {

90 i‡(
ls
->
t
.
tokí
 !
c
)

91 
	`îr‹_ex≥˘ed
(
ls
, 
c
);

92 
	}
}

94 
	$check√xt
 (
LexSèã
 *
ls
, 
c
) {

95 
	`check
(
ls
, 
c
);

96 
	`luaX_√xt
(
ls
);

97 
	}
}

100 
	#check_c⁄dôi⁄
(
ls
,
c
,
msg
Ë{ i‡(!(c)Ë
	`luaX_sy¡axîr‹
÷s, msg); }

	)

104 
	$check_m©ch
 (
LexSèã
 *
ls
, 
wh©
, 
who
, 
whîe
) {

105 i‡(!
	`ã°√xt
(
ls
, 
wh©
)) {

106 i‡(
whîe
 =
ls
->
löíumbî
)

107 
	`îr‹_ex≥˘ed
(
ls
, 
wh©
);

109 
	`luaX_sy¡axîr‹
(
ls
, 
	`luaO_pushf°rög
÷s->
L
,

110 
LUA_QS
 "Éxpected (to close " LUA_QS "átÜine %d)",

111 
	`luaX_tokí2°r
(
ls
, 
wh©
),ÜuaX_tokí2°r÷s, 
who
), 
whîe
));

114 
	}
}

125 
TSåög
 *
	$°r_check«me
 (
LexSèã
 *
ls
) {

126 
TSåög
 *
ts
;

127 
	`check
(
ls
, 
TK_NAME
);

128 
ts
 = 
ls
->
t
.
£möfo
.ts;

129 
	`luaX_√xt
(
ls
);

130  
ts
;

131 
	}
}

136 
	$öô_exp
 (
expdesc
 *
e
, 
expköd
 
k
, 
i
) {

137 
e
->
f
 =É->
t
 = 
NO_JUMP
;

138 
e
->
k
 = k;

139 
e
->
u
.
s
.
öfo
 = 
i
;

140 
	}
}

143 
	$code°rög
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
TSåög
 *
s
) {

144 
	`öô_exp
(
e
, 
VK
, 
	`luaK_°rögK
(
ls
->
fs
, 
s
));

145 
	}
}

148 
	$check«me
(
LexSèã
 *
ls
, 
expdesc
 *
e
) {

149 
	`code°rög
(
ls
, 
e
, 
	`°r_check«me
(ls));

150 
	}
}

155 
	$ªgi°îloˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
) {

156 
FuncSèã
 *
fs
 = 
ls
->fs;

157 
PrŸo
 *
f
 = 
fs
->f;

158 
ﬁdsize
 = 
f
->
sizñocv¨s
;

159 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
locv¨s
, 
fs
->
∆ocv¨s
, f->
sizñocv¨s
,

160 
LocV¨
, 
SHRT_MAX
, "too manyÜocal variables");

162 
ﬁdsize
 < 
f
->
sizñocv¨s
Ëf->
locv¨s
[ﬁdsize++].
v¨«me
 = 
NULL
;

163 
f
->
locv¨s
[
fs
->
∆ocv¨s
].
v¨«me
 = varname;

164 
	`luaC_objb¨rõr
(
ls
->
L
, 
f
, 
v¨«me
);

165  
fs
->
∆ocv¨s
++;

166 
	}
}

169 
	#√w_loˇlv¨lôîÆ
(
ls
,
v
,
n
) \

170 
	`√w_loˇlv¨
(
ls
, 
	`luaX_√w°rög
÷s, "" 
v
, ((v)/())-1), 
n
)

	)

173 
	$√w_loˇlv¨
 (
LexSèã
 *
ls
, 
TSåög
 *
«me
, 
n
) {

174 
FuncSèã
 *
fs
 = 
ls
->fs;

175 
	`luaY_checklimô
(
fs
, fs->
«˘v¨
+
n
+1, 
LUAI_MAXVARS
, "local variables");

176 
fs
->
a˘v¨
[fs->
«˘v¨
+
n
] = 
	`ˇ°
(, 
	`ªgi°îloˇlv¨
(
ls
, 
«me
));

177 
	}
}

182 
	$adju°loˇlv¨s
 (
LexSèã
 *
ls
, 
nv¨s
) {

183 
FuncSèã
 *
fs
 = 
ls
->fs;

184 
fs
->
«˘v¨
 = 
	`ˇ°_byã
(fs->«˘v¨ + 
nv¨s
);

185 ; 
nv¨s
;Çvars--) {

186 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 
nv¨s
).
°¨çc
 = fs->
pc
;

188 
	}
}

191 
	$ªmovev¨s
 (
LexSèã
 *
ls
, 
tﬁevñ
) {

192 
FuncSèã
 *
fs
 = 
ls
->fs;

193 
fs
->
«˘v¨
 > 
tﬁevñ
)

194 
	`gëlocv¨
(
fs
, --fs->
«˘v¨
).
ídpc
 = fs->
pc
;

195 
	}
}

201 
	$ödexupvÆue
 (
FuncSèã
 *
fs
, 
TSåög
 *
«me
, 
expdesc
 *
v
) {

202 
i
;

203 
PrŸo
 *
f
 = 
fs
->f;

204 
ﬁdsize
 = 
f
->
sizeupvÆues
;

205 
i
=0; i<
f
->
nups
; i++) {

206 i‡(
fs
->
upvÆues
[
i
].
k
 =
v
->k && fs->upvÆues[i].
öfo
 =v->
u
.
s
.info) {

207 
	`lua_as£π
(
f
->
upvÆues
[
i
] =
«me
);

208  
i
;

212 
	`luaY_checklimô
(
fs
, 
f
->
nups
 + 1, 
LUAI_MAXUPVALUES
, "upvalues");

213 
	`luaM_growve˘‹
(
fs
->
L
, 
f
->
upvÆues
, f->
nups
, f->
sizeupvÆues
,

214 
TSåög
 *, 
MAX_INT
, "");

215 
ﬁdsize
 < 
f
->
sizeupvÆues
Ëf->
upvÆues
[ﬁdsize++] = 
NULL
;

216 
f
->
upvÆues
[f->
nups
] = 
«me
;

217 
	`luaC_objb¨rõr
(
fs
->
L
, 
f
, 
«me
);

218 
	`lua_as£π
(
v
->
k
 =
VLOCAL
 || v->k =
VUPVAL
);

219 
fs
->
upvÆues
[
f
->
nups
].
k
 = 
	`ˇ°_byã
(
v
->k);

220 
fs
->
upvÆues
[
f
->
nups
].
öfo
 = 
	`ˇ°_byã
(
v
->
u
.
s
.info);

221  
f
->
nups
++;

222 
	}
}

227 
	$£¨chv¨
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
) {

228 
i
;

229 
i
=
fs
->
«˘v¨
-1; i >= 0; i--) {

230 i‡(
n
 =
	`gëlocv¨
(
fs
, 
i
).
v¨«me
)

231  
i
;

234 
	}
}

237 
	$m¨kupvÆ
 (
FuncSèã
 *
fs
, 
Àvñ
) {

238 
BlockC¡
 *
bl
 = 
fs
->bl;

239 
bl
 && bl->
«˘v¨
 > 
Àvñ
Ëb»bl->
¥evious
;

240 i‡(
bl
Ëbl->
upvÆ
 = 1;

241 
	}
}

261 
	$sögÀv¨aux
 (
FuncSèã
 *
fs
, 
TSåög
 *
n
, 
expdesc
 *
v¨
, 
ba£
) {

262 i‡(
fs
 =
NULL
) {

263 
	`öô_exp
(
v¨
, 
VGLOBAL
, 
NO_REG
);

264  
VGLOBAL
;

267 
v
 = 
	`£¨chv¨
(
fs
, 
n
);

268 i‡(
v
 >= 0) {

269 
	`öô_exp
(
v¨
, 
VLOCAL
, 
v
);

270 i‡(!
ba£
)

271 
	`m¨kupvÆ
(
fs
, 
v
);

272  
VLOCAL
;

275 i‡(
	`sögÀv¨aux
(
fs
->
¥ev
, 
n
, 
v¨
, 0Ë=
VGLOBAL
)

276  
VGLOBAL
;

277 
v¨
->
u
.
s
.
öfo
 = 
	`ödexupvÆue
(
fs
, 
n
, var);

278 
v¨
->
k
 = 
VUPVAL
;

279  
VUPVAL
;

282 
	}
}

287 
	$sögÀv¨
 (
LexSèã
 *
ls
, 
expdesc
 *
v¨
) {

288 
TSåög
 *
v¨«me
 = 
	`°r_check«me
(
ls
);

289 
FuncSèã
 *
fs
 = 
ls
->fs;

295 i‡(
	`sögÀv¨aux
(
fs
, 
v¨«me
, 
v¨
, 1Ë=
VGLOBAL
)

296 
v¨
->
u
.
s
.
öfo
 = 
	`luaK_°rögK
(
fs
, 
v¨«me
);

297 
	}
}

302 
	$adju°_assign
 (
LexSèã
 *
ls
, 
nv¨s
, 
√xps
, 
expdesc
 *
e
) {

303 
FuncSèã
 *
fs
 = 
ls
->fs;

304 
exåa
 = 
nv¨s
 - 
√xps
;

305 i‡(
	`hasmu…ªt
(
e
->
k
)) {

306 
exåa
++;

307 i‡(
exåa
 < 0)Éxtra = 0;

308 
	`luaK_£åëu∫s
(
fs
, 
e
, 
exåa
);

309 i‡(
exåa
 > 1Ë
	`luaK_ª£rvîegs
(
fs
,Éxtra-1);

312 i‡(
e
->
k
 !
VVOID
Ë
	`luaK_exp2√xåeg
(
fs
,É);

313 i‡(
exåa
 > 0) {

314 
ªg
 = 
fs
->
‰ìªg
;

315 
	`luaK_ª£rvîegs
(
fs
, 
exåa
);

316 
	`luaK_nû
(
fs
, 
ªg
, 
exåa
);

319 
	}
}

322 
	$íãæevñ
 (
LexSèã
 *
ls
) {

323 i‡(++
ls
->
L
->
nCˇŒs
 > 
LUAI_MAXCCALLS
)

324 
	`luaX_Àxîr‹
(
ls
, "chunk hasÅoo many syntaxÜevels", 0);

325 
	}
}

328 
	#Àavñevñ
(
ls
Ë(÷s)->
L
->
nCˇŒs
--)

	)

331 
	$íãrblock
 (
FuncSèã
 *
fs
, 
BlockC¡
 *
bl
, 
lu_byã
 
isbªakabÀ
) {

332 
bl
->
bªakli°
 = 
NO_JUMP
;

333 
bl
->
isbªakabÀ
 = isbreakable;

334 
bl
->
«˘v¨
 = 
fs
->nactvar;

335 
bl
->
upvÆ
 = 0;

336 
bl
->
¥evious
 = 
fs
->bl;

337 
fs
->
bl
 = bl;

338 
	`lua_as£π
(
fs
->
‰ìªg
 =fs->
«˘v¨
);

339 
	}
}

342 
	$Àaveblock
 (
FuncSèã
 *
fs
) {

343 
BlockC¡
 *
bl
 = 
fs
->bl;

344 
fs
->
bl
 = bl->
¥evious
;

345 
	`ªmovev¨s
(
fs
->
ls
, 
bl
->
«˘v¨
);

346 i‡(
bl
->
upvÆ
)

347 
	`luaK_codeABC
(
fs
, 
OP_CLOSE
, 
bl
->
«˘v¨
, 0, 0);

349 
	`lua_as£π
(!
bl
->
isbªakabÀ
 || !bl->
upvÆ
);

350 
	`lua_as£π
(
bl
->
«˘v¨
 =
fs
->nactvar);

351 
fs
->
‰ìªg
 = fs->
«˘v¨
;

352 
	`luaK_∑tchtohîe
(
fs
, 
bl
->
bªakli°
);

353 
	}
}

356 
	$push˛osuª
 (
LexSèã
 *
ls
, 
FuncSèã
 *
func
, 
expdesc
 *
v
) {

357 
FuncSèã
 *
fs
 = 
ls
->fs;

358 
PrŸo
 *
f
 = 
fs
->f;

359 
ﬁdsize
 = 
f
->
sizï
;

360 
i
;

361 
	`luaM_growve˘‹
(
ls
->
L
, 
f
->
p
, 
fs
->
≈
, f->
sizï
, 
PrŸo
 *,

362 
MAXARG_Bx
, "constantÅable overflow");

363 
ﬁdsize
 < 
f
->
sizï
Ëf->
p
[ﬁdsize++] = 
NULL
;

364 
f
->
p
[
fs
->
≈
++] = 
func
->f;

365 
	`luaC_objb¨rõr
(
ls
->
L
, 
f
, 
func
->f);

366 
	`öô_exp
(
v
, 
VRELOCABLE
, 
	`luaK_codeABx
(
fs
, 
OP_CLOSURE
, 0, fs->
≈
-1));

367 
i
=0; i<
func
->
f
->
nups
; i++) {

368 
OpCode
 
o
 = (
func
->
upvÆues
[
i
].
k
 =
VLOCAL
Ë? 
OP_MOVE
 : 
OP_GETUPVAL
;

369 
	`luaK_codeABC
(
fs
, 
o
, 0, 
func
->
upvÆues
[
i
].
öfo
, 0);

371 
	}
}

380 
	$›í_func
 (
LexSèã
 *
ls
, 
FuncSèã
 *
fs
) {

381 
lua_Sèã
 *
L
 = 
ls
->L;

382 
PrŸo
 *
f
 = 
	`luaF_√w¥Ÿo
(
L
);

383 
fs
->
f
 = f;

384 
fs
->
¥ev
 = 
ls
->fs;

385 
fs
->
ls
 =Üs;

386 
fs
->
L
 = L;

387 
ls
->
fs
 = fs;

388 
fs
->
pc
 = 0;

389 
fs
->
œ°èrgë
 = -1;

390 
fs
->
jpc
 = 
NO_JUMP
;

391 
fs
->
‰ìªg
 = 0;

392 
fs
->
nk
 = 0;

393 
fs
->
≈
 = 0;

394 
fs
->
∆ocv¨s
 = 0;

395 
fs
->
«˘v¨
 = 0;

396 
fs
->
bl
 = 
NULL
;

397 
f
->
sour˚
 = 
ls
->source;

398 
f
->
max°acksize
 = 2;

399 
fs
->
h
 = 
	`luaH_√w
(
L
, 0, 0);

401 
	`£thvÆue2s
(
L
, L->
t›
, 
fs
->
h
);

402 
	`ö¸_t›
(
L
);

403 
	`£çtvÆue2s
(
L
, L->
t›
, 
f
);

404 
	`ö¸_t›
(
L
);

405 
	}
}

408 
	$˛o£_func
 (
LexSèã
 *
ls
) {

409 
lua_Sèã
 *
L
 = 
ls
->L;

410 
FuncSèã
 *
fs
 = 
ls
->fs;

411 
PrŸo
 *
f
 = 
fs
->f;

412 
	`ªmovev¨s
(
ls
, 0);

413 
	`luaK_ªt
(
fs
, 0, 0);

414 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
code
, f->
sizecode
, 
fs
->
pc
, 
In°ru˘i⁄
);

415 
f
->
sizecode
 = 
fs
->
pc
;

416 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
löeöfo
, f->
sizñöeöfo
, 
fs
->
pc
, );

417 
f
->
sizñöeöfo
 = 
fs
->
pc
;

418 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
k
, f->
sizek
, 
fs
->
nk
, 
TVÆue
);

419 
f
->
sizek
 = 
fs
->
nk
;

420 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
p
, f->
sizï
, 
fs
->
≈
, 
PrŸo
 *);

421 
f
->
sizï
 = 
fs
->
≈
;

422 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
locv¨s
, f->
sizñocv¨s
, 
fs
->
∆ocv¨s
, 
LocV¨
);

423 
f
->
sizñocv¨s
 = 
fs
->
∆ocv¨s
;

424 
	`luaM_ªÆlocve˘‹
(
L
, 
f
->
upvÆues
, f->
sizeupvÆues
, f->
nups
, 
TSåög
 *);

425 
f
->
sizeupvÆues
 = f->
nups
;

426 
	`lua_as£π
(
	`luaG_checkcode
(
f
));

427 
	`lua_as£π
(
fs
->
bl
 =
NULL
);

428 
ls
->
fs
 = fs->
¥ev
;

430 i‡(
fs
Ë
	`™ch‹_tokí
(
ls
);

431 
L
->
t›
 -= 2;

432 
	}
}

438 
PrŸo
 *
	$luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
, c⁄° *
«me
) {

439 
LexSèã
 
Àx°©e
;

440 
FuncSèã
 
func°©e
;

441 
Àx°©e
.
buff
 = buff;

442 
	`luaX_£töput
(
L
, &
Àx°©e
, 
z
, 
	`luaS_√w
(L, 
«me
));

443 
	`›í_func
(&
Àx°©e
, &
func°©e
);

444 
func°©e
.
f
->
is_v¨¨g
 = 
VARARG_ISVARARG
;

445 
	`luaX_√xt
(&
Àx°©e
);

446 
	`chunk
(&
Àx°©e
);

447 
	`check
(&
Àx°©e
, 
TK_EOS
);

448 
	`˛o£_func
(&
Àx°©e
);

449 
	`lua_as£π
(
func°©e
.
¥ev
 =
NULL
);

450 
	`lua_as£π
(
func°©e
.
f
->
nups
 == 0);

451 
	`lua_as£π
(
Àx°©e
.
fs
 =
NULL
);

452  
func°©e
.
f
;

453 
	}
}

462 
	$fõld
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

464 
FuncSèã
 *
fs
 = 
ls
->fs;

465 
expdesc
 
key
;

466 
	`luaK_exp2™yªg
(
fs
, 
v
);

467 
	`luaX_√xt
(
ls
);

468 
	`check«me
(
ls
, &
key
);

469 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

470 
	}
}

473 
	$yödex
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

475 
	`luaX_√xt
(
ls
);

476 
	`ex¥
(
ls
, 
v
);

477 
	`luaK_exp2vÆ
(
ls
->
fs
, 
v
);

478 
	`check√xt
(
ls
, ']');

479 
	}
}

489 
	sC⁄sC⁄åﬁ
 {

490 
expdesc
 
	mv
;

491 
expdesc
 *
	mt
;

492 
	mnh
;

493 
	m«
;

494 
	mto°‹e
;

498 
	$ªcfõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

500 
FuncSèã
 *
fs
 = 
ls
->fs;

501 
ªg
 = 
ls
->
fs
->
‰ìªg
;

502 
expdesc
 
key
, 
vÆ
;

503 
rkkey
;

504 i‡(
ls
->
t
.
tokí
 =
TK_NAME
) {

505 
	`luaY_checklimô
(
fs
, 
cc
->
nh
, 
MAX_INT
, "items iná constructor");

506 
	`check«me
(
ls
, &
key
);

509 
	`yödex
(
ls
, &
key
);

510 
cc
->
nh
++;

511 
	`check√xt
(
ls
, '=');

512 
rkkey
 = 
	`luaK_exp2RK
(
fs
, &
key
);

513 
	`ex¥
(
ls
, &
vÆ
);

514 
	`luaK_codeABC
(
fs
, 
OP_SETTABLE
, 
cc
->
t
->
u
.
s
.
öfo
, 
rkkey
, 
	`luaK_exp2RK
(fs, &
vÆ
));

515 
fs
->
‰ìªg
 = 
ªg
;

516 
	}
}

519 
	$˛o£li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

520 i‡(
cc
->
v
.
k
 =
VVOID
) ;

521 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

522 
cc
->
v
.
k
 = 
VVOID
;

523 i‡(
cc
->
to°‹e
 =
LFIELDS_PER_FLUSH
) {

524 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
s
.
öfo
, cc->
«
, cc->
to°‹e
);

525 
cc
->
to°‹e
 = 0;

527 
	}
}

530 
	$œ°li°fõld
 (
FuncSèã
 *
fs
, 
C⁄sC⁄åﬁ
 *
cc
) {

531 i‡(
cc
->
to°‹e
 == 0) ;

532 i‡(
	`hasmu…ªt
(
cc
->
v
.
k
)) {

533 
	`luaK_£tmu…ªt
(
fs
, &
cc
->
v
);

534 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
s
.
öfo
, cc->
«
, 
LUA_MULTRET
);

535 
cc
->
«
--;

538 i‡(
cc
->
v
.
k
 !
VVOID
)

539 
	`luaK_exp2√xåeg
(
fs
, &
cc
->
v
);

540 
	`luaK_£éi°
(
fs
, 
cc
->
t
->
u
.
s
.
öfo
, cc->
«
, cc->
to°‹e
);

542 
	}
}

545 
	$li°fõld
 (
LexSèã
 *
ls
, 
C⁄sC⁄åﬁ
 *
cc
) {

546 
	`ex¥
(
ls
, &
cc
->
v
);

547 
	`luaY_checklimô
(
ls
->
fs
, 
cc
->
«
, 
MAX_INT
, "items iná constructor");

548 
cc
->
«
++;

549 
cc
->
to°‹e
++;

550 
	}
}

553 
	$c⁄°ru˘‹
 (
LexSèã
 *
ls
, 
expdesc
 *
t
) {

555 
FuncSèã
 *
fs
 = 
ls
->fs;

556 
löe
 = 
ls
->
löíumbî
;

557 
pc
 = 
	`luaK_codeABC
(
fs
, 
OP_NEWTABLE
, 0, 0, 0);

558 
C⁄sC⁄åﬁ
 
cc
;

559 
cc
.
«
 = cc.
nh
 = cc.
to°‹e
 = 0;

560 
cc
.
t
 =Å;

561 
	`öô_exp
(
t
, 
VRELOCABLE
, 
pc
);

562 
	`öô_exp
(&
cc
.
v
, 
VVOID
, 0);

563 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
t
);

564 
	`check√xt
(
ls
, '{');

566 
	`lua_as£π
(
cc
.
v
.
k
 =
VVOID
 || cc.
to°‹e
 > 0);

567 i‡(
ls
->
t
.
tokí
 == '}') ;

568 
	`˛o£li°fõld
(
fs
, &
cc
);

569 
ls
->
t
.
tokí
) {

570 
TK_NAME
: {

571 
	`luaX_lookahód
(
ls
);

572 i‡(
ls
->
lookahód
.
tokí
 != '=')

573 
	`li°fõld
(
ls
, &
cc
);

575 
	`ªcfõld
(
ls
, &
cc
);

579 
	`ªcfõld
(
ls
, &
cc
);

583 
	`li°fõld
(
ls
, &
cc
);

587 } 
	`ã°√xt
(
ls
, ',') ||Åestnext(ls, ';'));

588 
	`check_m©ch
(
ls
, '}', '{', 
löe
);

589 
	`œ°li°fõld
(
fs
, &
cc
);

590 
	`SETARG_B
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
«
));

591 
	`SETARG_C
(
fs
->
f
->
code
[
pc
], 
	`luaO_öt2fb
(
cc
.
nh
));

592 
	}
}

598 
	$∑æi°
 (
LexSèã
 *
ls
) {

600 
FuncSèã
 *
fs
 = 
ls
->fs;

601 
PrŸo
 *
f
 = 
fs
->f;

602 
≈¨ams
 = 0;

603 
f
->
is_v¨¨g
 = 0;

604 i‡(
ls
->
t
.
tokí
 != ')') {

606 
ls
->
t
.
tokí
) {

607 
TK_NAME
: {

608 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
≈¨ams
++);

611 
TK_DOTS
: {

612 
	`luaX_√xt
(
ls
);

613 #i‡
	`deföed
(
LUA_COMPAT_VARARG
)

615 
	`√w_loˇlv¨lôîÆ
(
ls
, "¨g", 
≈¨ams
++);

616 
f
->
is_v¨¨g
 = 
VARARG_HASARG
 | 
VARARG_NEEDSARG
;

618 
f
->
is_v¨¨g
 |
VARARG_ISVARARG
;

621 : 
	`luaX_sy¡axîr‹
(
ls
, "<«me> o∏" 
	`LUA_QL
("...") "Éxpected");

623 } !
f
->
is_v¨¨g
 && 
	`ã°√xt
(
ls
, ','));

625 
	`adju°loˇlv¨s
(
ls
, 
≈¨ams
);

626 
f
->
num∑øms
 = 
	`ˇ°_byã
(
fs
->
«˘v¨
 - (f->
is_v¨¨g
 & 
VARARG_HASARG
));

627 
	`luaK_ª£rvîegs
(
fs
, fs->
«˘v¨
);

628 
	}
}

631 
	$body
 (
LexSèã
 *
ls
, 
expdesc
 *
e
, 
√ed£lf
, 
löe
) {

633 
FuncSèã
 
√w_fs
;

634 
	`›í_func
(
ls
, &
√w_fs
);

635 
√w_fs
.
f
->
löedeföed
 = 
löe
;

636 
	`check√xt
(
ls
, '(');

637 i‡(
√ed£lf
) {

638 
	`√w_loˇlv¨lôîÆ
(
ls
, "self", 0);

639 
	`adju°loˇlv¨s
(
ls
, 1);

641 
	`∑æi°
(
ls
);

642 
	`check√xt
(
ls
, ')');

643 
	`chunk
(
ls
);

644 
√w_fs
.
f
->
œ°löedeföed
 = 
ls
->
löíumbî
;

645 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FUNCTION
, 
löe
);

646 
	`˛o£_func
(
ls
);

647 
	`push˛osuª
(
ls
, &
√w_fs
, 
e
);

648 
	}
}

651 
	$ex∂i°1
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

653 
n
 = 1;

654 
	`ex¥
(
ls
, 
v
);

655 
	`ã°√xt
(
ls
, ',')) {

656 
	`luaK_exp2√xåeg
(
ls
->
fs
, 
v
);

657 
	`ex¥
(
ls
, 
v
);

658 
n
++;

660  
n
;

661 
	}
}

664 
	$funˇrgs
 (
LexSèã
 *
ls
, 
expdesc
 *
f
) {

665 
FuncSèã
 *
fs
 = 
ls
->fs;

666 
expdesc
 
¨gs
;

667 
ba£
, 
≈¨ams
;

668 
löe
 = 
ls
->
löíumbî
;

669 
ls
->
t
.
tokí
) {

671 i‡(
löe
 !
ls
->
œ°löe
)

672 
	`luaX_sy¡axîr‹
(
ls
,"ambiguous syntax (function call xÇew statement)");

673 
	`luaX_√xt
(
ls
);

674 i‡(
ls
->
t
.
tokí
 == ')')

675 
¨gs
.
k
 = 
VVOID
;

677 
	`ex∂i°1
(
ls
, &
¨gs
);

678 
	`luaK_£tmu…ªt
(
fs
, &
¨gs
);

680 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

684 
	`c⁄°ru˘‹
(
ls
, &
¨gs
);

687 
TK_STRING
: {

688 
	`code°rög
(
ls
, &
¨gs
,Üs->
t
.
£möfo
.
ts
);

689 
	`luaX_√xt
(
ls
);

693 
	`luaX_sy¡axîr‹
(
ls
, "functionárgumentsÉxpected");

697 
	`lua_as£π
(
f
->
k
 =
VNONRELOC
);

698 
ba£
 = 
f
->
u
.
s
.
öfo
;

699 i‡(
	`hasmu…ªt
(
¨gs
.
k
))

700 
≈¨ams
 = 
LUA_MULTRET
;

702 i‡(
¨gs
.
k
 !
VVOID
)

703 
	`luaK_exp2√xåeg
(
fs
, &
¨gs
);

704 
≈¨ams
 = 
fs
->
‰ìªg
 - (
ba£
+1);

706 
	`öô_exp
(
f
, 
VCALL
, 
	`luaK_codeABC
(
fs
, 
OP_CALL
, 
ba£
, 
≈¨ams
+1, 2));

707 
	`luaK_fixlöe
(
fs
, 
löe
);

708 
fs
->
‰ìªg
 = 
ba£
+1;

710 
	}
}

722 
	$¥efixexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

724 
ls
->
t
.
tokí
) {

726 
löe
 = 
ls
->
löíumbî
;

727 
	`luaX_√xt
(
ls
);

728 
	`ex¥
(
ls
, 
v
);

729 
	`check_m©ch
(
ls
, ')', '(', 
löe
);

730 
	`luaK_disch¨gev¨s
(
ls
->
fs
, 
v
);

733 
TK_NAME
: {

734 
	`sögÀv¨
(
ls
, 
v
);

738 
	`luaX_sy¡axîr‹
(
ls
, "unexpected symbol");

742 
	}
}

745 
	$¥im¨yexp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

748 
FuncSèã
 *
fs
 = 
ls
->fs;

749 
	`¥efixexp
(
ls
, 
v
);

751 
ls
->
t
.
tokí
) {

753 
	`fõld
(
ls
, 
v
);

757 
expdesc
 
key
;

758 
	`luaK_exp2™yªg
(
fs
, 
v
);

759 
	`yödex
(
ls
, &
key
);

760 
	`luaK_ödexed
(
fs
, 
v
, &
key
);

764 
expdesc
 
key
;

765 
	`luaX_√xt
(
ls
);

766 
	`check«me
(
ls
, &
key
);

767 
	`luaK_£lf
(
fs
, 
v
, &
key
);

768 
	`funˇrgs
(
ls
, 
v
);

771 '(': 
TK_STRING
: '{': {

772 
	`luaK_exp2√xåeg
(
fs
, 
v
);

773 
	`funˇrgs
(
ls
, 
v
);

779 
	}
}

789 
	$sim∂ìxp
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

792 
ls
->
t
.
tokí
) {

793 
TK_NUMBER
: {

794 
	`öô_exp
(
v
, 
VKNUM
, 0);

795 
v
->
u
.
nvÆ
 = 
ls
->
t
.
£möfo
.
r
;

798 
TK_STRING
: {

799 
	`code°rög
(
ls
, 
v
,Üs->
t
.
£möfo
.
ts
);

802 
TK_NIL
: {

803 
	`öô_exp
(
v
, 
VNIL
, 0);

806 
TK_TRUE
: {

807 
	`öô_exp
(
v
, 
VTRUE
, 0);

810 
TK_FALSE
: {

811 
	`öô_exp
(
v
, 
VFALSE
, 0);

814 
TK_DOTS
: {

815 
FuncSèã
 *
fs
 = 
ls
->fs;

816 
	`check_c⁄dôi⁄
(
ls
, 
fs
->
f
->
is_v¨¨g
,

817 "ˇ¬Ÿ u£ " 
	`LUA_QL
("...") " outsideá vararg function");

818 
fs
->
f
->
is_v¨¨g
 &~
VARARG_NEEDSARG
;

819 
	`öô_exp
(
v
, 
VVARARG
, 
	`luaK_codeABC
(
fs
, 
OP_VARARG
, 0, 1, 0));

823 
	`c⁄°ru˘‹
(
ls
, 
v
);

826 
TK_FUNCTION
: {

827 
	`luaX_√xt
(
ls
);

828 
	`body
(
ls
, 
v
, 0,Üs->
löíumbî
);

832 
	`¥im¨yexp
(
ls
, 
v
);

837 
	`luaX_√xt
(
ls
);

838 
	}
}

841 
UnO¥
 
	$gëun›r
 (
›
) {

842 
›
) {

843 
TK_NOT
:  
OPR_NOT
;

844 '-':  
OPR_MINUS
;

845 '#':  
OPR_LEN
;

846 :  
OPR_NOUNOPR
;

848 
	}
}

851 
BöO¥
 
	$gëbö›r
 (
›
) {

852 
›
) {

853 '+':  
OPR_ADD
;

854 '-':  
OPR_SUB
;

855 '*':  
OPR_MUL
;

856 '/':  
OPR_DIV
;

857 '%':  
OPR_MOD
;

858 '^':  
OPR_POW
;

859 
TK_CONCAT
:  
OPR_CONCAT
;

860 
TK_NE
:  
OPR_NE
;

861 
TK_EQ
:  
OPR_EQ
;

862 '<':  
OPR_LT
;

863 
TK_LE
:  
OPR_LE
;

864 '>':  
OPR_GT
;

865 
TK_GE
:  
OPR_GE
;

866 
TK_AND
:  
OPR_AND
;

867 
TK_OR
:  
OPR_OR
;

868 :  
OPR_NOBINOPR
;

870 
	}
}

874 
lu_byã
 
	mÀ·
;

875 
lu_byã
 
	mright
;

876 } 
	g¥i‹ôy
[] = {

884 
	#UNARY_PRIORITY
 8

	)

902 
BöO¥
 
	$subex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
, 
limô
) {

903 
BöO¥
 
›
;

904 
UnO¥
 
u›
;

905 
	`íãæevñ
(
ls
);

906 
u›
 = 
	`gëun›r
(
ls
->
t
.
tokí
);

907 i‡(
u›
 !
OPR_NOUNOPR
) {

908 
	`luaX_√xt
(
ls
);

909 
	`subex¥
(
ls
, 
v
, 
UNARY_PRIORITY
);

910 
	`luaK_¥efix
(
ls
->
fs
, 
u›
, 
v
);

912 
	`sim∂ìxp
(
ls
, 
v
);

914 
›
 = 
	`gëbö›r
(
ls
->
t
.
tokí
);

916 
›
 !
OPR_NOBINOPR
 && 
¥i‹ôy
[›].
À·
 > 
limô
) {

917 
expdesc
 
v2
;

918 
BöO¥
 
√xt›
;

919 
	`luaX_√xt
(
ls
);

920 
	`luaK_öfix
(
ls
->
fs
, 
›
, 
v
);

922 
√xt›
 = 
	`subex¥
(
ls
, &
v2
, 
¥i‹ôy
[
›
].
right
);

923 
	`luaK_posfix
(
ls
->
fs
, 
›
, 
v
, &
v2
);

924 
›
 = 
√xt›
;

926 
	`Àavñevñ
(
ls
);

927  
›
;

928 
	}
}

931 
	$ex¥
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

932 
	`subex¥
(
ls
, 
v
, 0);

933 
	}
}

946 
	$block_fﬁlow
 (
tokí
) {

947 
tokí
) {

948 
TK_ELSE
: 
TK_ELSEIF
: 
TK_END
:

949 
TK_UNTIL
: 
TK_EOS
:

953 
	}
}

956 
	$block
 (
LexSèã
 *
ls
) {

958 
FuncSèã
 *
fs
 = 
ls
->fs;

959 
BlockC¡
 
bl
;

960 
	`íãrblock
(
fs
, &
bl
, 0);

961 
	`chunk
(
ls
);

962 
	`lua_as£π
(
bl
.
bªakli°
 =
NO_JUMP
);

963 
	`Àaveblock
(
fs
);

964 
	}
}

971 
	sLHS_assign
 {

972 
LHS_assign
 *
	m¥ev
;

973 
expdesc
 
	mv
;

983 
	$check_c⁄Êi˘
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
expdesc
 *
v
) {

984 
FuncSèã
 *
fs
 = 
ls
->fs;

985 
exåa
 = 
fs
->
‰ìªg
;

986 
c⁄Êi˘
 = 0;

987 ; 
lh
;Üh =Üh->
¥ev
) {

988 i‡(
lh
->
v
.
k
 =
VINDEXED
) {

989 i‡(
lh
->
v
.
u
.
s
.
öfo
 == v->u.s.info) {

990 
c⁄Êi˘
 = 1;

991 
lh
->
v
.
u
.
s
.
öfo
 = 
exåa
;

993 i‡(
lh
->
v
.
u
.
s
.
aux
 =v->u.s.
öfo
) {

994 
c⁄Êi˘
 = 1;

995 
lh
->
v
.
u
.
s
.
aux
 = 
exåa
;

999 i‡(
c⁄Êi˘
) {

1000 
	`luaK_codeABC
(
fs
, 
OP_MOVE
, fs->
‰ìªg
, 
v
->
u
.
s
.
öfo
, 0);

1001 
	`luaK_ª£rvîegs
(
fs
, 1);

1003 
	}
}

1010 
	$assignmít
 (
LexSèã
 *
ls
, 
LHS_assign
 *
lh
, 
nv¨s
) {

1011 
expdesc
 
e
;

1012 
	`check_c⁄dôi⁄
(
ls
, 
VLOCAL
 <
lh
->
v
.
k
 &&Üh->v.k <
VINDEXED
,

1014 i‡(
	`ã°√xt
(
ls
, ',')) {

1015 
LHS_assign
 
nv
;

1016 
nv
.
¥ev
 = 
lh
;

1017 
	`¥im¨yexp
(
ls
, &
nv
.
v
);

1018 i‡(
nv
.
v
.
k
 =
VLOCAL
)

1019 
	`check_c⁄Êi˘
(
ls
, 
lh
, &
nv
.
v
);

1020 
	`luaY_checklimô
(
ls
->
fs
, 
nv¨s
, 
LUAI_MAXCCALLS
 -Üs->
L
->
nCˇŒs
,

1022 
	`assignmít
(
ls
, &
nv
, 
nv¨s
+1);

1025 
√xps
;

1026 
	`check√xt
(
ls
, '=');

1027 
√xps
 = 
	`ex∂i°1
(
ls
, &
e
);

1029 i‡(
√xps
 !
nv¨s
) {

1030 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1031 i‡(
√xps
 > 
nv¨s
)

1032 
ls
->
fs
->
‰ìªg
 -
√xps
 - 
nv¨s
;

1035 
	`luaK_£t⁄îë
(
ls
->
fs
, &
e
);

1037 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1041 
	`öô_exp
(&
e
, 
VNONRELOC
, 
ls
->
fs
->
‰ìªg
-1);

1042 
	`luaK_°‹ev¨
(
ls
->
fs
, &
lh
->
v
, &
e
);

1043 
	}
}

1046 
	$c⁄d
 (
LexSèã
 *
ls
) {

1048 
expdesc
 
v
;

1049 
	`ex¥
(
ls
, &
v
);

1050 i‡(
v
.
k
 =
VNIL
Ëv.k = 
VFALSE
;

1051 
	`luaK_goi·rue
(
ls
->
fs
, &
v
);

1052  
v
.
f
;

1053 
	}
}

1056 
	$bªak°©
 (
LexSèã
 *
ls
) {

1057 
FuncSèã
 *
fs
 = 
ls
->fs;

1058 
BlockC¡
 *
bl
 = 
fs
->bl;

1059 
upvÆ
 = 0;

1060 
bl
 && !bl->
isbªakabÀ
) {

1061 
upvÆ
 |
bl
->upval;

1062 
bl
 = bl->
¥evious
;

1064 i‡(!
bl
)

1065 
	`luaX_sy¡axîr‹
(
ls
, "noÜoopÅo break");

1066 i‡(
upvÆ
)

1067 
	`luaK_codeABC
(
fs
, 
OP_CLOSE
, 
bl
->
«˘v¨
, 0, 0);

1068 
	`luaK_c⁄ˇt
(
fs
, &
bl
->
bªakli°
, 
	`luaK_jump
(fs));

1069 
	}
}

1072 
	$whûe°©
 (
LexSèã
 *
ls
, 
löe
) {

1074 
FuncSèã
 *
fs
 = 
ls
->fs;

1075 
whûeöô
;

1076 
c⁄dexô
;

1077 
BlockC¡
 
bl
;

1078 
	`luaX_√xt
(
ls
);

1079 
whûeöô
 = 
	`luaK_gëœbñ
(
fs
);

1080 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1081 
	`íãrblock
(
fs
, &
bl
, 1);

1082 
	`check√xt
(
ls
, 
TK_DO
);

1083 
	`block
(
ls
);

1084 
	`luaK_∑tchli°
(
fs
, 
	`luaK_jump
(fs), 
whûeöô
);

1085 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_WHILE
, 
löe
);

1086 
	`Àaveblock
(
fs
);

1087 
	`luaK_∑tchtohîe
(
fs
, 
c⁄dexô
);

1088 
	}
}

1091 
	$ª≥©°©
 (
LexSèã
 *
ls
, 
löe
) {

1093 
c⁄dexô
;

1094 
FuncSèã
 *
fs
 = 
ls
->fs;

1095 
ª≥©_öô
 = 
	`luaK_gëœbñ
(
fs
);

1096 
BlockC¡
 
bl1
, 
bl2
;

1097 
	`íãrblock
(
fs
, &
bl1
, 1);

1098 
	`íãrblock
(
fs
, &
bl2
, 0);

1099 
	`luaX_√xt
(
ls
);

1100 
	`chunk
(
ls
);

1101 
	`check_m©ch
(
ls
, 
TK_UNTIL
, 
TK_REPEAT
, 
löe
);

1102 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1103 i‡(!
bl2
.
upvÆ
) {

1104 
	`Àaveblock
(
fs
);

1105 
	`luaK_∑tchli°
(
ls
->
fs
, 
c⁄dexô
, 
ª≥©_öô
);

1108 
	`bªak°©
(
ls
);

1109 
	`luaK_∑tchtohîe
(
ls
->
fs
, 
c⁄dexô
);

1110 
	`Àaveblock
(
fs
);

1111 
	`luaK_∑tchli°
(
ls
->
fs
, 
	`luaK_jump
(fs), 
ª≥©_öô
);

1113 
	`Àaveblock
(
fs
);

1114 
	}
}

1117 
	$exp1
 (
LexSèã
 *
ls
) {

1118 
expdesc
 
e
;

1119 
k
;

1120 
	`ex¥
(
ls
, &
e
);

1121 
k
 = 
e
.k;

1122 
	`luaK_exp2√xåeg
(
ls
->
fs
, &
e
);

1123  
k
;

1124 
	}
}

1127 
	$f‹body
 (
LexSèã
 *
ls
, 
ba£
, 
löe
, 
nv¨s
, 
i¢um
) {

1129 
BlockC¡
 
bl
;

1130 
FuncSèã
 *
fs
 = 
ls
->fs;

1131 
¥ï
, 
ídf‹
;

1132 
	`adju°loˇlv¨s
(
ls
, 3);

1133 
	`check√xt
(
ls
, 
TK_DO
);

1134 
¥ï
 = 
i¢um
 ? 
	`luaK_codeAsBx
(
fs
, 
OP_FORPREP
, 
ba£
, 
NO_JUMP
Ë: 
	`luaK_jump
(fs);

1135 
	`íãrblock
(
fs
, &
bl
, 0);

1136 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1137 
	`luaK_ª£rvîegs
(
fs
, 
nv¨s
);

1138 
	`block
(
ls
);

1139 
	`Àaveblock
(
fs
);

1140 
	`luaK_∑tchtohîe
(
fs
, 
¥ï
);

1141 
ídf‹
 = (
i¢um
Ë? 
	`luaK_codeAsBx
(
fs
, 
OP_FORLOOP
, 
ba£
, 
NO_JUMP
) :

1142 
	`luaK_codeABC
(
fs
, 
OP_TFORLOOP
, 
ba£
, 0, 
nv¨s
);

1143 
	`luaK_fixlöe
(
fs
, 
löe
);

1144 
	`luaK_∑tchli°
(
fs
, (
i¢um
 ? 
ídf‹
 : 
	`luaK_jump
(fs)), 
¥ï
 + 1);

1145 
	}
}

1148 
	$f‹num
 (
LexSèã
 *
ls
, 
TSåög
 *
v¨«me
, 
löe
) {

1150 
FuncSèã
 *
fs
 = 
ls
->fs;

1151 
ba£
 = 
fs
->
‰ìªg
;

1152 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for index)", 0);

1153 
	`√w_loˇlv¨lôîÆ
(
ls
, "(forÜimit)", 1);

1154 
	`√w_loˇlv¨lôîÆ
(
ls
, "(for step)", 2);

1155 
	`√w_loˇlv¨
(
ls
, 
v¨«me
, 3);

1156 
	`check√xt
(
ls
, '=');

1157 
	`exp1
(
ls
);

1158 
	`check√xt
(
ls
, ',');

1159 
	`exp1
(
ls
);

1160 i‡(
	`ã°√xt
(
ls
, ','))

1161 
	`exp1
(
ls
);

1163 
	`luaK_codeABx
(
fs
, 
OP_LOADK
, fs->
‰ìªg
, 
	`luaK_numbîK
(fs, 1));

1164 
	`luaK_ª£rvîegs
(
fs
, 1);

1166 
	`f‹body
(
ls
, 
ba£
, 
löe
, 1, 1);

1167 
	}
}

1170 
	$f‹li°
 (
LexSèã
 *
ls
, 
TSåög
 *
ödex«me
) {

1172 
FuncSèã
 *
fs
 = 
ls
->fs;

1173 
expdesc
 
e
;

1174 
nv¨s
 = 0;

1175 
löe
;

1176 
ba£
 = 
fs
->
‰ìªg
;

1178 
	`√w_loˇlv¨lôîÆ
(
ls
, "(f‹ gíî©‹)", 
nv¨s
++);

1179 
	`√w_loˇlv¨lôîÆ
(
ls
, "(f‹ sèã)", 
nv¨s
++);

1180 
	`√w_loˇlv¨lôîÆ
(
ls
, "(f‹ c⁄åﬁ)", 
nv¨s
++);

1182 
	`√w_loˇlv¨
(
ls
, 
ödex«me
, 
nv¨s
++);

1183 
	`ã°√xt
(
ls
, ','))

1184 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
nv¨s
++);

1185 
	`check√xt
(
ls
, 
TK_IN
);

1186 
löe
 = 
ls
->
löíumbî
;

1187 
	`adju°_assign
(
ls
, 3, 
	`ex∂i°1
÷s, &
e
), &e);

1188 
	`luaK_check°ack
(
fs
, 3);

1189 
	`f‹body
(
ls
, 
ba£
, 
löe
, 
nv¨s
 - 3, 0);

1190 
	}
}

1193 
	$f‹°©
 (
LexSèã
 *
ls
, 
löe
) {

1195 
FuncSèã
 *
fs
 = 
ls
->fs;

1196 
TSåög
 *
v¨«me
;

1197 
BlockC¡
 
bl
;

1198 
	`íãrblock
(
fs
, &
bl
, 1);

1199 
	`luaX_√xt
(
ls
);

1200 
v¨«me
 = 
	`°r_check«me
(
ls
);

1201 
ls
->
t
.
tokí
) {

1202 '=': 
	`f‹num
(
ls
, 
v¨«me
, 
löe
); ;

1203 ',': 
TK_IN
: 
	`f‹li°
(
ls
, 
v¨«me
); ;

1204 : 
	`luaX_sy¡axîr‹
(
ls
, 
	`LUA_QL
("=") " or " LUA_QL("in") "Éxpected");

1206 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_FOR
, 
löe
);

1207 
	`Àaveblock
(
fs
);

1208 
	}
}

1211 
	$ã°_thí_block
 (
LexSèã
 *
ls
) {

1213 
c⁄dexô
;

1214 
	`luaX_√xt
(
ls
);

1215 
c⁄dexô
 = 
	`c⁄d
(
ls
);

1216 
	`check√xt
(
ls
, 
TK_THEN
);

1217 
	`block
(
ls
);

1218  
c⁄dexô
;

1219 
	}
}

1222 
	$if°©
 (
LexSèã
 *
ls
, 
löe
) {

1224 
FuncSèã
 *
fs
 = 
ls
->fs;

1225 
Êi°
;

1226 
esˇ≥li°
 = 
NO_JUMP
;

1228 
Êi°
 = 
	`ã°_thí_block
(
ls
);

1229 
ls
->
t
.
tokí
 =
TK_ELSEIF
) {

1230 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
	`luaK_jump
(fs));

1231 
	`luaK_∑tchtohîe
(
fs
, 
Êi°
);

1232 
Êi°
 = 
	`ã°_thí_block
(
ls
);

1234 i‡(
ls
->
t
.
tokí
 =
TK_ELSE
) {

1235 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
	`luaK_jump
(fs));

1236 
	`luaK_∑tchtohîe
(
fs
, 
Êi°
);

1237 
	`luaX_√xt
(
ls
);

1238 
	`block
(
ls
);

1241 
	`luaK_c⁄ˇt
(
fs
, &
esˇ≥li°
, 
Êi°
);

1242 
	`luaK_∑tchtohîe
(
fs
, 
esˇ≥li°
);

1243 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_IF
, 
löe
);

1244 
	}
}

1247 
	$loˇlfunc
 (
LexSèã
 *
ls
) {

1248 
expdesc
 
v
, 
b
;

1249 
FuncSèã
 *
fs
 = 
ls
->fs;

1250 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
(ls), 0);

1251 
	`öô_exp
(&
v
, 
VLOCAL
, 
fs
->
‰ìªg
);

1252 
	`luaK_ª£rvîegs
(
fs
, 1);

1253 
	`adju°loˇlv¨s
(
ls
, 1);

1254 
	`body
(
ls
, &
b
, 0,Üs->
löíumbî
);

1255 
	`luaK_°‹ev¨
(
fs
, &
v
, &
b
);

1257 
	`gëlocv¨
(
fs
, fs->
«˘v¨
 - 1).
°¨çc
 = fs->
pc
;

1258 
	}
}

1261 
	$loˇl°©
 (
LexSèã
 *
ls
) {

1263 
nv¨s
 = 0;

1264 
√xps
;

1265 
expdesc
 
e
;

1267 
	`√w_loˇlv¨
(
ls
, 
	`°r_check«me
÷s), 
nv¨s
++);

1268 } 
	`ã°√xt
(
ls
, ','));

1269 i‡(
	`ã°√xt
(
ls
, '='))

1270 
√xps
 = 
	`ex∂i°1
(
ls
, &
e
);

1272 
e
.
k
 = 
VVOID
;

1273 
√xps
 = 0;

1275 
	`adju°_assign
(
ls
, 
nv¨s
, 
√xps
, &
e
);

1276 
	`adju°loˇlv¨s
(
ls
, 
nv¨s
);

1277 
	}
}

1280 
	$fun˙ame
 (
LexSèã
 *
ls
, 
expdesc
 *
v
) {

1282 
√ed£lf
 = 0;

1283 
	`sögÀv¨
(
ls
, 
v
);

1284 
ls
->
t
.
tokí
 == '.')

1285 
	`fõld
(
ls
, 
v
);

1286 i‡(
ls
->
t
.
tokí
 == ':') {

1287 
√ed£lf
 = 1;

1288 
	`fõld
(
ls
, 
v
);

1290  
√ed£lf
;

1291 
	}
}

1294 
	$func°©
 (
LexSèã
 *
ls
, 
löe
) {

1296 
√ed£lf
;

1297 
expdesc
 
v
, 
b
;

1298 
	`luaX_√xt
(
ls
);

1299 
√ed£lf
 = 
	`fun˙ame
(
ls
, &
v
);

1300 
	`body
(
ls
, &
b
, 
√ed£lf
, 
löe
);

1301 
	`luaK_°‹ev¨
(
ls
->
fs
, &
v
, &
b
);

1302 
	`luaK_fixlöe
(
ls
->
fs
, 
löe
);

1303 
	}
}

1311 
	$ex¥°©
 (
LexSèã
 *
ls
) {

1313 
FuncSèã
 *
fs
 = 
ls
->fs;

1314 
LHS_assign
 
v
;

1315 
	`¥im¨yexp
(
ls
, &
v
.v);

1316 i‡(
v
.v.
k
 =
VCALL
)

1317 
	`SETARG_C
(
	`gëcode
(
fs
, &
v
.v), 1);

1319 
v
.
¥ev
 = 
NULL
;

1320 
	`assignmít
(
ls
, &
v
, 1);

1322 
	}
}

1325 
	$ªt°©
 (
LexSèã
 *
ls
) {

1327 
FuncSèã
 *
fs
 = 
ls
->fs;

1328 
expdesc
 
e
;

1329 
fú°
, 
ƒë
;

1330 
	`luaX_√xt
(
ls
);

1331 i‡(
	`block_fﬁlow
(
ls
->
t
.
tokí
) ||Üs->t.token == ';')

1332 
fú°
 = 
ƒë
 = 0;

1334 
ƒë
 = 
	`ex∂i°1
(
ls
, &
e
);

1335 i‡(
	`hasmu…ªt
(
e
.
k
)) {

1336 
	`luaK_£tmu…ªt
(
fs
, &
e
);

1337 i‡(
e
.
k
 =
VCALL
 && 
ƒë
 == 1) {

1338 
	`SET_OPCODE
(
	`gëcode
(
fs
,&
e
), 
OP_TAILCALL
);

1339 
	`lua_as£π
(
	`GETARG_A
(
	`gëcode
(
fs
,&
e
)Ë=fs->
«˘v¨
);

1341 
fú°
 = 
fs
->
«˘v¨
;

1342 
ƒë
 = 
LUA_MULTRET
;

1345 i‡(
ƒë
 == 1)

1346 
fú°
 = 
	`luaK_exp2™yªg
(
fs
, &
e
);

1348 
	`luaK_exp2√xåeg
(
fs
, &
e
);

1349 
fú°
 = 
fs
->
«˘v¨
;

1350 
	`lua_as£π
(
ƒë
 =
fs
->
‰ìªg
 - 
fú°
);

1354 
	`luaK_ªt
(
fs
, 
fú°
, 
ƒë
);

1355 
	}
}

1358 
	$°©emít
 (
LexSèã
 *
ls
) {

1359 
löe
 = 
ls
->
löíumbî
;

1360 
ls
->
t
.
tokí
) {

1361 
TK_IF
: {

1362 
	`if°©
(
ls
, 
löe
);

1365 
TK_WHILE
: {

1366 
	`whûe°©
(
ls
, 
löe
);

1369 
TK_DO
: {

1370 
	`luaX_√xt
(
ls
);

1371 
	`block
(
ls
);

1372 
	`check_m©ch
(
ls
, 
TK_END
, 
TK_DO
, 
löe
);

1375 
TK_FOR
: {

1376 
	`f‹°©
(
ls
, 
löe
);

1379 
TK_REPEAT
: {

1380 
	`ª≥©°©
(
ls
, 
löe
);

1383 
TK_FUNCTION
: {

1384 
	`func°©
(
ls
, 
löe
);

1387 
TK_LOCAL
: {

1388 
	`luaX_√xt
(
ls
);

1389 i‡(
	`ã°√xt
(
ls
, 
TK_FUNCTION
))

1390 
	`loˇlfunc
(
ls
);

1392 
	`loˇl°©
(
ls
);

1395 
TK_RETURN
: {

1396 
	`ªt°©
(
ls
);

1399 
TK_BREAK
: {

1400 
	`luaX_√xt
(
ls
);

1401 
	`bªak°©
(
ls
);

1405 
	`ex¥°©
(
ls
);

1409 
	}
}

1412 
	$chunk
 (
LexSèã
 *
ls
) {

1414 
i¶a°
 = 0;

1415 
	`íãæevñ
(
ls
);

1416 !
i¶a°
 && !
	`block_fﬁlow
(
ls
->
t
.
tokí
)) {

1417 
i¶a°
 = 
	`°©emít
(
ls
);

1418 
	`ã°√xt
(
ls
, ';');

1419 
	`lua_as£π
(
ls
->
fs
->
f
->
max°acksize
 >ls->fs->
‰ìªg
 &&

1420 
ls
->
fs
->
‰ìªg
 >ls->fs->
«˘v¨
);

1421 
ls
->
fs
->
‰ìªg
 =Üs->fs->
«˘v¨
;

1423 
	`Àavñevñ
(
ls
);

1424 
	}
}

	@src/lparser.h

7 #i‚de‡
Õ¨£r_h


8 
	#Õ¨£r_h


	)

10 
	~"Œimôs.h
"

11 
	~"lobje˘.h
"

12 
	~"lzio.h
"

20 
	mVVOID
,

21 
	mVNIL
,

22 
	mVTRUE
,

23 
	mVFALSE
,

24 
	mVK
,

25 
	mVKNUM
,

26 
	mVLOCAL
,

27 
	mVUPVAL
,

28 
	mVGLOBAL
,

29 
	mVINDEXED
,

30 
	mVJMP
,

31 
	mVRELOCABLE
,

32 
	mVNONRELOC
,

33 
	mVCALL
,

34 
	mVVARARG


35 } 
	texpköd
;

37 
	sexpdesc
 {

38 
expköd
 
	mk
;

40 °ru˘ { 
	möfo
, 
	maux
; } 
	ms
;

41 
lua_Numbî
 
	mnvÆ
;

42 } 
	mu
;

43 
	mt
;

44 
	mf
;

45 } 
	texpdesc
;

48 
	supvÆdesc
 {

49 
lu_byã
 
	mk
;

50 
lu_byã
 
	möfo
;

51 } 
	tupvÆdesc
;

54 
	gBlockC¡
;

58 
	sFuncSèã
 {

59 
PrŸo
 *
	mf
;

60 
TabÀ
 *
	mh
;

61 
FuncSèã
 *
	m¥ev
;

62 
LexSèã
 *
	mls
;

63 
lua_Sèã
 *
	mL
;

64 
BlockC¡
 *
	mbl
;

65 
	mpc
;

66 
	mœ°èrgë
;

67 
	mjpc
;

68 
	m‰ìªg
;

69 
	mnk
;

70 
	m≈
;

71 
	m∆ocv¨s
;

72 
lu_byã
 
	m«˘v¨
;

73 
upvÆdesc
 
	mupvÆues
[
LUAI_MAXUPVALUES
];

74 
	ma˘v¨
[
LUAI_MAXVARS
];

75 } 
	tFuncSèã
;

78 
LUAI_FUNC
 
PrŸo
 *
luaY_∑r£r
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
Mbuf„r
 *
buff
,

79 c⁄° *
«me
);

	@src/lstate.c

8 
	~<°ddef.h
>

10 
	#l°©e_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"ldebug.h
"

16 
	~"ldo.h
"

17 
	~"lfunc.h
"

18 
	~"lgc.h
"

19 
	~"Œex.h
"

20 
	~"lmem.h
"

21 
	~"l°©e.h
"

22 
	~"l°rög.h
"

23 
	~"…abÀ.h
"

24 
	~"…m.h
"

27 
	#°©e_size
(
x
Ë((xË+ 
LUAI_EXTRASPACE
)

	)

28 
	#‰om°©e
(
l
Ë(
	`ˇ°
(
lu_byã
 *, (l)Ë- 
LUAI_EXTRASPACE
)

	)

29 
	#to°©e
(
l
Ë(
	`ˇ°
(
lua_Sèã
 *, ca°(
lu_byã
 *,ÜË+ 
LUAI_EXTRASPACE
))

	)

35 
	sLG
 {

36 
lua_Sèã
 
	ml
;

37 
globÆ_Sèã
 
	mg
;

38 } 
	tLG
;

42 
	$°ack_öô
 (
lua_Sèã
 *
L1
,Üua_Sèã *
L
) {

44 
L1
->
ba£_ci
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_CI_SIZE
, 
CÆlInfo
);

45 
L1
->
ci
 = L1->
ba£_ci
;

46 
L1
->
size_ci
 = 
BASIC_CI_SIZE
;

47 
L1
->
íd_ci
 = L1->
ba£_ci
 + L1->
size_ci
 - 1;

49 
L1
->
°ack
 = 
	`luaM_√wve˘‹
(
L
, 
BASIC_STACK_SIZE
 + 
EXTRA_STACK
, 
TVÆue
);

50 
L1
->
°acksize
 = 
BASIC_STACK_SIZE
 + 
EXTRA_STACK
;

51 
L1
->
t›
 = L1->
°ack
;

52 
L1
->
°ack_œ°
 = L1->
°ack
+(L1->
°acksize
 - 
EXTRA_STACK
)-1;

54 
L1
->
ci
->
func
 = L1->
t›
;

55 
	`£äûvÆue
(
L1
->
t›
++);

56 
L1
->
ba£
 = L1->
ci
->ba£ = L1->
t›
;

57 
L1
->
ci
->
t›
 = L1->t› + 
LUA_MINSTACK
;

58 
	}
}

61 
	$‰ì°ack
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
) {

62 
	`luaM_‰ì¨øy
(
L
, 
L1
->
ba£_ci
, L1->
size_ci
, 
CÆlInfo
);

63 
	`luaM_‰ì¨øy
(
L
, 
L1
->
°ack
, L1->
°acksize
, 
TVÆue
);

64 
	}
}

79 
	$f_lua›í
 (
lua_Sèã
 *
L
, *
ud
) {

80 
	`¥ötf
("debug: in f_luaopen\n");

81 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

82 
	`UNUSED
(
ud
);

83 
	`°ack_öô
(
L
, L);

84 
	`£thvÆue
(
L
, 
	`gt
(L), 
	`luaH_√w
(L, 0, 2));

85 
	`£thvÆue
(
L
, 
	`ªgi°ry
(L), 
	`luaH_√w
(L, 0, 2));

86 
	`luaS_ªsize
(
L
, 
MINSTRTABSIZE
);

87 
	`luaT_öô
(
L
);

88 
	`luaX_öô
(
L
);

89 
	`luaS_fix
(
	`luaS_√wlôîÆ
(
L
, 
MEMERRMSG
));

90 
g
->
GCthªshﬁd
 = 4*g->
tŸÆbyãs
;

91 
	}
}

98 
	$¥eöô_°©e
 (
lua_Sèã
 *
L
, 
globÆ_Sèã
 *
g
) {

99 
	`G
(
L
Ë
g
;

100 
L
->
°ack
 = 
NULL
;

101 
L
->
°acksize
 = 0;

102 
L
->
îr‹Jmp
 = 
NULL
;

103 
L
->
hook
 = 
NULL
;

104 
L
->
hookmask
 = 0;

105 
L
->
ba£hookcou¡
 = 0;

106 
L
->
Ælowhook
 = 1;

107 
	`ª£thookcou¡
(
L
);

108 
L
->
›íupvÆ
 = 
NULL
;

109 
L
->
size_ci
 = 0;

110 
L
->
nCˇŒs
 = L->
ba£CˇŒs
 = 0;

111 
L
->
°©us
 = 0;

112 
L
->
ba£_ci
 = L->
ci
 = 
NULL
;

113 
L
->
ßvedpc
 = 
NULL
;

114 
L
->
îrfunc
 = 0;

115 
	`£äûvÆue
(
	`gt
(
L
));

116 
	}
}

119 
	$˛o£_°©e
 (
lua_Sèã
 *
L
) {

120 
globÆ_Sèã
 *
g
 = 
	`G
(
L
);

121 
	`luaF_˛o£
(
L
, L->
°ack
);

122 
	`luaC_‰ìÆl
(
L
);

123 
	`lua_as£π
(
g
->
roŸgc
 =
	`obj2gco
(
L
));

124 
	`lua_as£π
(
g
->
°π
.
nu£
 == 0);

125 
	`luaM_‰ì¨øy
(
L
, 
	`G
(L)->
°π
.
hash
, G(L)->°π.
size
, 
TSåög
 *);

126 
	`luaZ_‰ìbuf„r
(
L
, &
g
->
buff
);

127 
	`‰ì°ack
(
L
, L);

128 
	`lua_as£π
(
g
->
tŸÆbyãs
 =(
LG
));

129 (*
g
->
‰óŒoc
)(g->
ud
, 
	`‰om°©e
(
L
), 
	`°©e_size
(
LG
), 0);

130 
	}
}

133 
lua_Sèã
 *
	$luaE_√wthªad
 (
lua_Sèã
 *
L
) {

134 
lua_Sèã
 *
L1
 = 
	`to°©e
(
	`luaM_mÆloc
(
L
, 
	`°©e_size
(lua_State)));

135 
	`luaC_lök
(
L
, 
	`obj2gco
(
L1
), 
LUA_TTHREAD
);

136 
	`¥eöô_°©e
(
L1
, 
	`G
(
L
));

137 
	`°ack_öô
(
L1
, 
L
);

138 
	`£tobj2n
(
L
, 
	`gt
(
L1
), gt(L));

139 
L1
->
hookmask
 = 
L
->hookmask;

140 
L1
->
ba£hookcou¡
 = 
L
->basehookcount;

141 
L1
->
hook
 = 
L
->hook;

142 
	`ª£thookcou¡
(
L1
);

143 
	`lua_as£π
(
	`iswhôe
(
	`obj2gco
(
L1
)));

144  
L1
;

145 
	}
}

148 
	$luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
) {

149 
	`luaF_˛o£
(
L1
, L1->
°ack
);

150 
	`lua_as£π
(
L1
->
›íupvÆ
 =
NULL
);

151 
	`luai_u£r°©e‰ì
(
L1
);

152 
	`‰ì°ack
(
L
, 
L1
);

153 
	`luaM_‰ìmem
(
L
, 
	`‰om°©e
(
L1
), 
	`°©e_size
(
lua_Sèã
));

154 
	}
}

166 
LUA_API
 
lua_Sèã
 *
	$lua_√w°©e
 (
lua_AŒoc
 
f
, *
ud
) {

167 
i
;

168 
lua_Sèã
 *
L
;

169 
globÆ_Sèã
 *
g
;

170 *
l
 = (*
f
)(
ud
, 
NULL
, 0, 
	`°©e_size
(
LG
));

171 i‡(
l
 =
NULL
)  NULL;

172 
L
 = 
	`to°©e
(
l
);

173 
g
 = &((
LG
 *)
L
)->g;

174 
L
->
√xt
 = 
NULL
;

175 
L
->
â
 = 
LUA_TTHREAD
;

176 
g
->
cuºítwhôe
 = 
	`bô2mask
(
WHITE0BIT
, 
FIXEDBIT
);

177 
L
->
m¨ked
 = 
	`luaC_whôe
(
g
);

178 
	`£t2bôs
(
L
->
m¨ked
, 
FIXEDBIT
, 
SFIXEDBIT
);

179 
	`¥eöô_°©e
(
L
, 
g
);

180 
g
->
‰óŒoc
 = 
f
;

181 
g
->
ud
 = ud;

182 
g
->
maöthªad
 = 
L
;

183 
g
->
uvhód
.
u
.
l
.
¥ev
 = &g->uvhead;

184 
g
->
uvhód
.
u
.
l
.
√xt
 = &g->uvhead;

185 
g
->
GCthªshﬁd
 = 0;

186 
g
->
°π
.
size
 = 0;

187 
g
->
°π
.
nu£
 = 0;

188 
g
->
°π
.
hash
 = 
NULL
;

190 
	`£äûvÆue
(
	`ªgi°ry
(
L
));

191 
	`luaZ_öôbuf„r
(
L
, &
g
->
buff
);

192 
g
->
∑nic
 = 
NULL
;

193 
g
->
gc°©e
 = 
GCS∑u£
;

194 
g
->
roŸgc
 = 
	`obj2gco
(
L
);

195 
g
->
swìp°rgc
 = 0;

196 
g
->
swìpgc
 = &g->
roŸgc
;

197 
g
->
gøy
 = 
NULL
;

198 
g
->
gøyagaö
 = 
NULL
;

199 
g
->
wók
 = 
NULL
;

200 
g
->
tmud©a
 = 
NULL
;

201 
g
->
tŸÆbyãs
 = (
LG
);

202 
g
->
g˝au£
 = 
LUAI_GCPAUSE
;

203 
g
->
gc°ïmul
 = 
LUAI_GCMUL
;

204 
g
->
gcdït
 = 0;

206 
i
=0; i<
NUM_TAGS
; i++Ë
g
->
mt
[i] = 
NULL
;

207 i‡(
	`luaD_øwru≈rŸe˘ed
(
L
, 
f_lua›í
, 
NULL
) != 0) {

209 
	`˛o£_°©e
(
L
);

210 
L
 = 
NULL
;

213 
	`luai_u£r°©e›í
(
L
);

214  
L
;

215 
	}
}

218 
	$ˇŒÆlgcTM
 (
lua_Sèã
 *
L
, *
ud
) {

219 
	`UNUSED
(
ud
);

220 
	`luaC_ˇŒGCTM
(
L
);

221 
	}
}

224 
LUA_API
 
	$lua_˛o£
 (
lua_Sèã
 *
L
) {

225 
L
 = 
	`G
(L)->
maöthªad
;

226 
	`lua_lock
(
L
);

227 
	`luaF_˛o£
(
L
, L->
°ack
);

228 
	`luaC_£∑øãud©a
(
L
, 1);

229 
L
->
îrfunc
 = 0;

231 
L
->
ci
 = L->
ba£_ci
;

232 
L
->
ba£
 = L->
t›
 = L->
ci
->base;

233 
L
->
nCˇŒs
 = L->
ba£CˇŒs
 = 0;

234 } 
	`luaD_øwru≈rŸe˘ed
(
L
, 
ˇŒÆlgcTM
, 
NULL
) != 0);

235 
	`lua_as£π
(
	`G
(
L
)->
tmud©a
 =
NULL
);

236 
	`luai_u£r°©e˛o£
(
L
);

237 
	`˛o£_°©e
(
L
);

238 
	}
}

	@src/lstate.h

7 #i‚de‡
l°©e_h


8 
	#l°©e_h


	)

10 
	~"lua.h
"

12 
	~"lobje˘.h
"

13 
	~"…m.h
"

14 
	~"lzio.h
"

18 
	glua_l⁄gjmp
;

22 
	#gt
(
L
Ë(&L->
l_gt
)

	)

25 
	#ªgi°ry
(
L
Ë(&
	`G
(L)->
l_ªgi°ry
)

	)

29 
	#EXTRA_STACK
 5

	)

32 
	#BASIC_CI_SIZE
 8

	)

34 
	#BASIC_STACK_SIZE
 (2*
LUA_MINSTACK
)

	)

38 
	s°rögèbÀ
 {

39 
GCObje˘
 **
	mhash
;

40 
lu_öt32
 
	mnu£
;

41 
	msize
;

42 } 
	t°rögèbÀ
;

48 
	sCÆlInfo
 {

49 
StkId
 
	mba£
;

50 
StkId
 
	mfunc
;

51 
StkId
 
	mt›
;

52 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

53 
	mƒesu…s
;

54 
	mèûˇŒs
;

55 } 
	tCÆlInfo
;

59 
	#cuº_func
(
L
Ë(
	`˛vÆue
(L->
ci
->
func
))

	)

60 
	#ci_func
(
ci
Ë(
	`˛vÆue
((ci)->
func
))

	)

61 
	#f_isLua
(
ci
Ë(!
	`ci_func
(ci)->
c
.
isC
)

	)

62 
	#isLua
(
ci
Ë(
	`âisfun˘i⁄
((ci)->
func
Ë&& 
	`f_isLua
(ci))

	)

68 
	sglobÆ_Sèã
 {

69 
°rögèbÀ
 
	m°π
;

70 
lua_AŒoc
 
	m‰óŒoc
;

71 *
	mud
;

72 
lu_byã
 
	mcuºítwhôe
;

73 
lu_byã
 
	mgc°©e
;

74 
	mswìp°rgc
;

75 
GCObje˘
 *
	mroŸgc
;

76 
GCObje˘
 **
	mswìpgc
;

77 
GCObje˘
 *
	mgøy
;

78 
GCObje˘
 *
	mgøyagaö
;

79 
GCObje˘
 *
	mwók
;

80 
GCObje˘
 *
	mtmud©a
;

81 
Mbuf„r
 
	mbuff
;

82 
lu_mem
 
	mGCthªshﬁd
;

83 
lu_mem
 
	mtŸÆbyãs
;

84 
lu_mem
 
	me°im©e
;

85 
lu_mem
 
	mgcdït
;

86 
	mg˝au£
;

87 
	mgc°ïmul
;

88 
lua_CFun˘i⁄
 
	m∑nic
;

89 
TVÆue
 
	ml_ªgi°ry
;

90 
lua_Sèã
 *
	mmaöthªad
;

91 
UpVÆ
 
	muvhód
;

92 
TabÀ
 *
	mmt
[
NUM_TAGS
];

94 
TSåög
 *
	mtm«me
[
TM_N
];

95 } 
	tglobÆ_Sèã
;

102 
	slua_Sèã
 {

103 
	mComm⁄Hódî
;

104 
lu_byã
 
	m°©us
;

105 
StkId
 
	mt›
;

106 
StkId
 
	mba£
;

107 
globÆ_Sèã
 *
	ml_G
;

108 
CÆlInfo
 *
	mci
;

109 c⁄° 
In°ru˘i⁄
 *
	mßvedpc
;

110 
StkId
 
	m°ack_œ°
;

111 
StkId
 
	m°ack
;

112 
CÆlInfo
 *
	míd_ci
;

113 
CÆlInfo
 *
	mba£_ci
;

114 
	m°acksize
;

115 
	msize_ci
;

116 
	mnCˇŒs
;

117 
	mba£CˇŒs
;

118 
lu_byã
 
	mhookmask
;

119 
lu_byã
 
	mÆlowhook
;

120 
	mba£hookcou¡
;

121 
	mhookcou¡
;

122 
lua_Hook
 
	mhook
;

123 
TVÆue
 
	ml_gt
;

124 
TVÆue
 
	mív
;

125 
GCObje˘
 *
	m›íupvÆ
;

126 
GCObje˘
 *
	mg˛i°
;

127 
lua_l⁄gjmp
 *
	mîr‹Jmp
;

128 
±rdiff_t
 
	mîrfunc
;

132 
	#G
(
L
Ë(L->
l_G
)

	)

138 
	uGCObje˘
 {

139 
GChódî
 
	mgch
;

140 
TSåög
 
	mts
;

141 
Ud©a
 
	mu
;

142 
Closuª
 
	m˛
;

143 
TabÀ
 
	mh
;

144 
PrŸo
 
	mp
;

145 
UpVÆ
 
	muv
;

146 
lua_Sèã
 
	mth
;

151 
	#øwgco2ts
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TSTRING
, &((o)->
ts
))

	)

152 
	#gco2ts
(
o
Ë(&
	`øwgco2ts
(o)->
tsv
)

	)

153 
	#øwgco2u
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TUSERDATA
, &((o)->
u
))

	)

154 
	#gco2u
(
o
Ë(&
	`øwgco2u
(o)->
uv
)

	)

155 
	#gco2˛
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TFUNCTION
, &((o)->
˛
))

	)

156 
	#gco2h
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TTABLE
, &((o)->
h
))

	)

157 
	#gco2p
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TPROTO
, &((o)->
p
))

	)

158 
	#gco2uv
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TUPVAL
, &((o)->
uv
))

	)

159 
	#ngcŸouv
(
o
) \

160 
	`check_exp
((
o
Ë=
NULL
 || (o)->
gch
.
â
 =
LUA_TUPVAL
, &((o)->
uv
))

	)

161 
	#gco2th
(
o
Ë
	`check_exp
((o)->
gch
.
â
 =
LUA_TTHREAD
, &((o)->
th
))

	)

164 
	#obj2gco
(
v
Ë(
	`ˇ°
(
GCObje˘
 *, (v)))

	)

167 
LUAI_FUNC
 
lua_Sèã
 *
luaE_√wthªad
 (lua_Sèã *
L
);

168 
LUAI_FUNC
 
luaE_‰ìthªad
 (
lua_Sèã
 *
L
,Üua_Sèã *
L1
);

	@src/lstring.c

8 
	~<°rög.h
>

10 
	#l°rög_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lmem.h
"

16 
	~"lobje˘.h
"

17 
	~"l°©e.h
"

18 
	~"l°rög.h
"

21 
	$luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
) {

22 
GCObje˘
 **
√whash
;

23 
°rögèbÀ
 *
tb
;

24 
i
;

25 i‡(
	`G
(
L
)->
gc°©e
 =
GCSswìp°rög
)

27 
√whash
 = 
	`luaM_√wve˘‹
(
L
, 
√wsize
, 
GCObje˘
 *);

28 
tb
 = &
	`G
(
L
)->
°π
;

29 
i
=0; i<
√wsize
; i++Ë
√whash
[i] = 
NULL
;

31 
i
=0; i<
tb
->
size
; i++) {

32 
GCObje˘
 *
p
 = 
tb
->
hash
[
i
];

33 
p
) {

34 
GCObje˘
 *
√xt
 = 
p
->
gch
.next;

35 
h
 = 
	`gco2ts
(
p
)->
hash
;

36 
h1
 = 
	`lmod
(
h
, 
√wsize
);

37 
	`lua_as£π
(
	`ˇ°_öt
(
h
%
√wsize
Ë=
	`lmod
(h,Çewsize));

38 
p
->
gch
.
√xt
 = 
√whash
[
h1
];

39 
√whash
[
h1
] = 
p
;

40 
p
 = 
√xt
;

43 
	`luaM_‰ì¨øy
(
L
, 
tb
->
hash
,Åb->
size
, 
TSåög
 *);

44 
tb
->
size
 = 
√wsize
;

45 
tb
->
hash
 = 
√whash
;

46 
	}
}

49 
TSåög
 *
	$√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
,

50 
h
) {

51 
TSåög
 *
ts
;

52 
°rögèbÀ
 *
tb
;

53 i‡(
l
+1 > (
MAX_SIZET
 - (
TSåög
))/())

54 
	`luaM_toobig
(
L
);

55 
ts
 = 
	`ˇ°
(
TSåög
 *, 
	`luaM_mÆloc
(
L
, (
l
+1)*()+(TString)));

56 
ts
->
tsv
.
Àn
 = 
l
;

57 
ts
->
tsv
.
hash
 = 
h
;

58 
ts
->
tsv
.
m¨ked
 = 
	`luaC_whôe
(
	`G
(
L
));

59 
ts
->
tsv
.
â
 = 
LUA_TSTRING
;

60 
ts
->
tsv
.
ª£rved
 = 0;

61 
	`mem˝y
(
ts
+1, 
°r
, 
l
*());

62 ((*)(
ts
+1))[
l
] = '\0';

63 
tb
 = &
	`G
(
L
)->
°π
;

64 
h
 = 
	`lmod
(h, 
tb
->
size
);

65 
ts
->
tsv
.
√xt
 = 
tb
->
hash
[
h
];

66 
tb
->
hash
[
h
] = 
	`obj2gco
(
ts
);

67 
tb
->
nu£
++;

68 i‡(
tb
->
nu£
 > 
	`ˇ°
(
lu_öt32
,Åb->
size
Ë&&Åb->sizê<
MAX_INT
/2)

69 
	`luaS_ªsize
(
L
, 
tb
->
size
*2);

70  
ts
;

71 
	}
}

74 
TSåög
 *
	$luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
) {

75 
GCObje˘
 *
o
;

77 
h
 = 
	`ˇ°
(, 
l
);

78 
size_t
 
°ï
 = (
l
>>5)+1;

79 
size_t
 
l1
;

80 
l1
=
l
;Ü1>=
°ï
;Ü1-=step)

81 
h
 = h ^ ((h<<5)+(h>>2)+
	`ˇ°
(, 
°r
[
l1
-1]));

82 
o
 = 
	`G
(
L
)->
°π
.
hash
[
	`lmod
(
h
, G(L)->°π.
size
)];

83 
o
 !
NULL
;

84 
o
 = o->
gch
.
√xt
) {

85 
TSåög
 *
ts
 = 
	`øwgco2ts
(
o
);

87 i‡(
ts
->
tsv
.
Àn
 =
l
 && (
	`memcmp
(
°r
, 
	`gë°r
(ts),Ü) == 0)) {

89 i‡(
	`isdód
(
	`G
(
L
), 
o
)Ë
	`ch™gewhôe
(o);

90  
ts
;

93  
	`√wl°r
(
L
, 
°r
, 
l
, 
h
);

94 
	}
}

97 
Ud©a
 *
	$luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
, 
TabÀ
 *
e
) {

98 
Ud©a
 *
u
;

99 i‡(
s
 > 
MAX_SIZET
 - (
Ud©a
))

100 
	`luaM_toobig
(
L
);

101 
u
 = 
	`ˇ°
(
Ud©a
 *, 
	`luaM_mÆloc
(
L
, 
s
 + (Udata)));

102 
u
->
uv
.
m¨ked
 = 
	`luaC_whôe
(
	`G
(
L
));

103 
u
->
uv
.
â
 = 
LUA_TUSERDATA
;

104 
u
->
uv
.
Àn
 = 
s
;

105 
u
->
uv
.
më©abÀ
 = 
NULL
;

106 
u
->
uv
.
ív
 = 
e
;

108 
u
->
uv
.
√xt
 = 
	`G
(
L
)->
maöthªad
->next;

109 
	`G
(
L
)->
maöthªad
->
√xt
 = 
	`obj2gco
(
u
);

110  
u
;

111 
	}
}

	@src/lstring.h

7 #i‚de‡
l°rög_h


8 
	#l°rög_h


	)

11 
	~"lgc.h
"

12 
	~"lobje˘.h
"

13 
	~"l°©e.h
"

16 
	#size°rög
(
s
Ë((
TSåög
)+((s)->
Àn
+1)*())

	)

18 
	#sizeud©a
(
u
Ë((
Ud©a
)+(u)->
Àn
)

	)

20 
	#luaS_√w
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, s, 
	`°æí
(s)))

	)

21 
	#luaS_√wlôîÆ
(
L
, 
s
Ë(
	`luaS_√wl°r
(L, "" s, \

22 ((
s
)/())-1))

	)

24 
	#luaS_fix
(
s
Ë
	`l_£tbô
((s)->
tsv
.
m¨ked
, 
FIXEDBIT
)

	)

26 
LUAI_FUNC
 
luaS_ªsize
 (
lua_Sèã
 *
L
, 
√wsize
);

27 
LUAI_FUNC
 
Ud©a
 *
luaS_√wud©a
 (
lua_Sèã
 *
L
, 
size_t
 
s
, 
TabÀ
 *
e
);

28 
LUAI_FUNC
 
TSåög
 *
luaS_√wl°r
 (
lua_Sèã
 *
L
, c⁄° *
°r
, 
size_t
 
l
);

	@src/lstrlib.c

8 
	~<˘y≥.h
>

9 
	~<°ddef.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

14 
	#l°æib_c


	)

15 
	#LUA_LIB


	)

17 
	~"lua.h
"

19 
	~"œuxlib.h
"

20 
	~"luÆib.h
"

24 
	#uch¨
(
c
Ë(()(c))

	)

28 
	$°r_Àn
 (
lua_Sèã
 *
L
) {

29 
size_t
 
l
;

30 
	`luaL_checkl°rög
(
L
, 1, &
l
);

31 
	`lua_pushöãgî
(
L
, 
l
);

33 
	}
}

36 
±rdiff_t
 
	$po§ñ©
 (
±rdiff_t
 
pos
, 
size_t
 
Àn
) {

38 i‡(
pos
 < 0Ëpo†+(
±rdiff_t
)
Àn
 + 1;

39  (
pos
 >= 0) ?Öos : 0;

40 
	}
}

43 
	$°r_sub
 (
lua_Sèã
 *
L
) {

44 
size_t
 
l
;

45 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

46 
±rdiff_t
 
°¨t
 = 
	`po§ñ©
(
	`luaL_checköãgî
(
L
, 2), 
l
);

47 
±rdiff_t
 
íd
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, -1), 
l
);

48 i‡(
°¨t
 < 1) start = 1;

49 i‡(
íd
 > (
±rdiff_t
)
l
)Énd = (ptrdiff_t)l;

50 i‡(
°¨t
 <
íd
)

51 
	`lua_pushl°rög
(
L
, 
s
+
°¨t
-1, 
íd
-start+1);

52 
	`lua_pushlôîÆ
(
L
, "");

54 
	}
}

57 
	$°r_ªvî£
 (
lua_Sèã
 *
L
) {

58 
size_t
 
l
;

59 
luaL_Buf„r
 
b
;

60 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

61 
	`luaL_bufföô
(
L
, &
b
);

62 
l
--Ë
	`luaL_addch¨
(&
b
, 
s
[l]);

63 
	`luaL_pushªsu…
(&
b
);

65 
	}
}

68 
	$°r_lowî
 (
lua_Sèã
 *
L
) {

69 
size_t
 
l
;

70 
size_t
 
i
;

71 
luaL_Buf„r
 
b
;

72 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

73 
	`luaL_bufföô
(
L
, &
b
);

74 
i
=0; i<
l
; i++)

75 
	`luaL_addch¨
(&
b
, 
	`tﬁowî
(
	`uch¨
(
s
[
i
])));

76 
	`luaL_pushªsu…
(&
b
);

78 
	}
}

81 
	$°r_uµî
 (
lua_Sèã
 *
L
) {

82 
size_t
 
l
;

83 
size_t
 
i
;

84 
luaL_Buf„r
 
b
;

85 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

86 
	`luaL_bufföô
(
L
, &
b
);

87 
i
=0; i<
l
; i++)

88 
	`luaL_addch¨
(&
b
, 
	`touµî
(
	`uch¨
(
s
[
i
])));

89 
	`luaL_pushªsu…
(&
b
);

91 
	}
}

93 
	$°r_ªp
 (
lua_Sèã
 *
L
) {

94 
size_t
 
l
;

95 
luaL_Buf„r
 
b
;

96 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

97 
n
 = 
	`luaL_checköt
(
L
, 2);

98 
	`luaL_bufföô
(
L
, &
b
);

99 
n
-- > 0)

100 
	`luaL_addl°rög
(&
b
, 
s
, 
l
);

101 
	`luaL_pushªsu…
(&
b
);

103 
	}
}

106 
	$°r_byã
 (
lua_Sèã
 *
L
) {

107 
size_t
 
l
;

108 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l
);

109 
±rdiff_t
 
posi
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 2, 1), 
l
);

110 
±rdiff_t
 
po£
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 
posi
), 
l
);

111 
n
, 
i
;

112 i‡(
posi
 <= 0)Öosi = 1;

113 i‡((
size_t
)
po£
 > 
l
)Öose =Ü;

114 i‡(
posi
 > 
po£
)  0;

115 
n
 = ()(
po£
 - 
posi
 + 1);

116 i‡(
posi
 + 
n
 <
po£
)

117 
	`luaL_îr‹
(
L
, "string sliceÅooÜong");

118 
	`luaL_check°ack
(
L
, 
n
, "string sliceÅooÜong");

119 
i
=0; i<
n
; i++)

120 
	`lua_pushöãgî
(
L
, 
	`uch¨
(
s
[
posi
+
i
-1]));

121  
n
;

122 
	}
}

125 
	$°r_ch¨
 (
lua_Sèã
 *
L
) {

126 
n
 = 
	`lua_gët›
(
L
);

127 
i
;

128 
luaL_Buf„r
 
b
;

129 
	`luaL_bufföô
(
L
, &
b
);

130 
i
=1; i<=
n
; i++) {

131 
c
 = 
	`luaL_checköt
(
L
, 
i
);

132 
	`luaL_¨gcheck
(
L
, 
	`uch¨
(
c
Ë=c, 
i
, "invalid value");

133 
	`luaL_addch¨
(&
b
, 
	`uch¨
(
c
));

135 
	`luaL_pushªsu…
(&
b
);

137 
	}
}

140 
	$wrôî
 (
lua_Sèã
 *
L
, c⁄° * 
b
, 
size_t
 
size
, * 
B
) {

141 ()
L
;

142 
	`luaL_addl°rög
((
luaL_Buf„r
*Ë
B
, (c⁄° *)
b
, 
size
);

144 
	}
}

147 
	$°r_dump
 (
lua_Sèã
 *
L
) {

148 
luaL_Buf„r
 
b
;

149 
	`luaL_checkty≥
(
L
, 1, 
LUA_TFUNCTION
);

150 
	`lua_£â›
(
L
, 1);

151 
	`luaL_bufföô
(
L
,&
b
);

152 i‡(
	`lua_dump
(
L
, 
wrôî
, &
b
) != 0)

153 
	`luaL_îr‹
(
L
, "unableÅo dump given function");

154 
	`luaL_pushªsu…
(&
b
);

156 
	}
}

167 
	#CAP_UNFINISHED
 (-1)

	)

168 
	#CAP_POSITION
 (-2)

	)

170 
	sM©chSèã
 {

171 c⁄° *
	m§c_öô
;

172 c⁄° *
	m§c_íd
;

173 
lua_Sèã
 *
	mL
;

174 
	mÀvñ
;

176 c⁄° *
	möô
;

177 
±rdiff_t
 
	mÀn
;

178 } 
	mˇ±uª
[
LUA_MAXCAPTURES
];

179 } 
	tM©chSèã
;

182 
	#L_ESC
 '%'

	)

183 
	#SPECIALS
 "^$*+?.([%-"

	)

186 
	$check_ˇ±uª
 (
M©chSèã
 *
ms
, 
l
) {

187 
l
 -= '1';

188 i‡(
l
 < 0 ||Ü >
ms
->
Àvñ
 || ms->
ˇ±uª
[l].
Àn
 =
CAP_UNFINISHED
)

189  
	`luaL_îr‹
(
ms
->
L
, "invalid capture index");

190  
l
;

191 
	}
}

194 
	$ˇ±uª_to_˛o£
 (
M©chSèã
 *
ms
) {

195 
Àvñ
 = 
ms
->level;

196 
Àvñ
--;Üevel>=0;Üevel--)

197 i‡(
ms
->
ˇ±uª
[
Àvñ
].
Àn
 =
CAP_UNFINISHED
) Üevel;

198  
	`luaL_îr‹
(
ms
->
L
, "invalidÖattern capture");

199 
	}
}

202 c⁄° *
	$˛as£nd
 (
M©chSèã
 *
ms
, c⁄° *
p
) {

203 *
p
++) {

204 
L_ESC
: {

205 i‡(*
p
 == '\0')

206 
	`luaL_îr‹
(
ms
->
L
, "mÆf‹medÖ©ã∫ (íd†wôh " 
	`LUA_QL
("%%") ")");

207  
p
+1;

210 i‡(*
p
 == '^')Ö++;

212 i‡(*
p
 == '\0')

213 
	`luaL_îr‹
(
ms
->
L
, "mÆf‹medÖ©ã∫ (missög " 
	`LUA_QL
("]") ")");

214 i‡(*(
p
++Ë=
L_ESC
 && *p != '\0')

215 
p
++;

216 } *
p
 != ']');

217  
p
+1;

220  
p
;

223 
	}
}

226 
	$m©ch_˛ass
 (
c
, 
˛
) {

227 
ªs
;

228 
	`tﬁowî
(
˛
)) {

229 'a' : 
ªs
 = 
	`ißÕha
(
c
); ;

230 'c' : 
ªs
 = 
	`is˙ål
(
c
); ;

231 'd' : 
ªs
 = 
	`isdigô
(
c
); ;

232 'l' : 
ªs
 = 
	`i¶owî
(
c
); ;

233 'p' : 
ªs
 = 
	`i•un˘
(
c
); ;

234 's' : 
ªs
 = 
	`is•a˚
(
c
); ;

235 'u' : 
ªs
 = 
	`isuµî
(
c
); ;

236 'w' : 
ªs
 = 
	`iß um
(
c
); ;

237 'x' : 
ªs
 = 
	`isxdigô
(
c
); ;

238 'z' : 
ªs
 = (
c
 == 0); ;

239 :  (
˛
 =
c
);

241  (
	`i¶owî
(
˛
Ë? 
ªs
 : !res);

242 
	}
}

245 
	$m©chbøckë˛ass
 (
c
, c⁄° *
p
, c⁄° *
ec
) {

246 
sig
 = 1;

247 i‡(*(
p
+1) == '^') {

248 
sig
 = 0;

249 
p
++;

251 ++
p
 < 
ec
) {

252 i‡(*
p
 =
L_ESC
) {

253 
p
++;

254 i‡(
	`m©ch_˛ass
(
c
, 
	`uch¨
(*
p
)))

255  
sig
;

257 i‡((*(
p
+1Ë='-'Ë&& (p+2 < 
ec
)) {

258 
p
+=2;

259 i‡(
	`uch¨
(*(
p
-2)Ë<
c
 && c <= uchar(*p))

260  
sig
;

262 i‡(
	`uch¨
(*
p
Ë=
c
Ë 
sig
;

264  !
sig
;

265 
	}
}

268 
	$sögÀm©ch
 (
c
, c⁄° *
p
, c⁄° *
ï
) {

269 *
p
) {

271 
L_ESC
:  
	`m©ch_˛ass
(
c
, 
	`uch¨
(*(
p
+1)));

272 '[':  
	`m©chbøckë˛ass
(
c
, 
p
, 
ï
-1);

273 :  (
	`uch¨
(*
p
Ë=
c
);

275 
	}
}

278 c⁄° *
m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
);

281 c⁄° *
	$m©chbÆ™˚
 (
M©chSèã
 *
ms
, c⁄° *
s
,

282 c⁄° *
p
) {

283 i‡(*
p
 == 0 || *(p+1) == 0)

284 
	`luaL_îr‹
(
ms
->
L
, "unbalancedÖattern");

285 i‡(*
s
 !*
p
Ë 
NULL
;

287 
b
 = *
p
;

288 
e
 = *(
p
+1);

289 
c⁄t
 = 1;

290 ++
s
 < 
ms
->
§c_íd
) {

291 i‡(*
s
 =
e
) {

292 i‡(--
c⁄t
 =0Ë 
s
+1;

294 i‡(*
s
 =
b
Ë
c⁄t
++;

297  
NULL
;

298 
	}
}

301 c⁄° *
	$max_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

302 c⁄° *
p
, c⁄° *
ï
) {

303 
±rdiff_t
 
i
 = 0;

304 (
s
+
i
)<
ms
->
§c_íd
 && 
	`sögÀm©ch
(
	`uch¨
(*(s+i)), 
p
, 
ï
))

305 
i
++;

307 
i
>=0) {

308 c⁄° *
ªs
 = 
	`m©ch
(
ms
, (
s
+
i
), 
ï
+1);

309 i‡(
ªs
) Ñes;

310 
i
--;

312  
NULL
;

313 
	}
}

316 c⁄° *
	$mö_ex∑nd
 (
M©chSèã
 *
ms
, c⁄° *
s
,

317 c⁄° *
p
, c⁄° *
ï
) {

319 c⁄° *
ªs
 = 
	`m©ch
(
ms
, 
s
, 
ï
+1);

320 i‡(
ªs
 !
NULL
)

321  
ªs
;

322 i‡(
s
<
ms
->
§c_íd
 && 
	`sögÀm©ch
(
	`uch¨
(*s), 
p
, 
ï
))

323 
s
++;

324  
NULL
;

326 
	}
}

329 c⁄° *
	$°¨t_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

330 c⁄° *
p
, 
wh©
) {

331 c⁄° *
ªs
;

332 
Àvñ
 = 
ms
->level;

333 i‡(
Àvñ
 >
LUA_MAXCAPTURES
Ë
	`luaL_îr‹
(
ms
->
L
, "too many captures");

334 
ms
->
ˇ±uª
[
Àvñ
].
öô
 = 
s
;

335 
ms
->
ˇ±uª
[
Àvñ
].
Àn
 = 
wh©
;

336 
ms
->
Àvñ
 =Üevel+1;

337 i‡((
ªs
=
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

338 
ms
->
Àvñ
--;

339  
ªs
;

340 
	}
}

343 c⁄° *
	$íd_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
,

344 c⁄° *
p
) {

345 
l
 = 
	`ˇ±uª_to_˛o£
(
ms
);

346 c⁄° *
ªs
;

347 
ms
->
ˇ±uª
[
l
].
Àn
 = 
s
 - ms->ˇ±uª[l].
öô
;

348 i‡((
ªs
 = 
	`m©ch
(
ms
, 
s
, 
p
)Ë=
NULL
)

349 
ms
->
ˇ±uª
[
l
].
Àn
 = 
CAP_UNFINISHED
;

350  
ªs
;

351 
	}
}

354 c⁄° *
	$m©ch_ˇ±uª
 (
M©chSèã
 *
ms
, c⁄° *
s
, 
l
) {

355 
size_t
 
Àn
;

356 
l
 = 
	`check_ˇ±uª
(
ms
,Ü);

357 
Àn
 = 
ms
->
ˇ±uª
[
l
].len;

358 i‡((
size_t
)(
ms
->
§c_íd
-
s
Ë>
Àn
 &&

359 
	`memcmp
(
ms
->
ˇ±uª
[
l
].
öô
, 
s
, 
Àn
) == 0)

360  
s
+
Àn
;

361  
NULL
;

362 
	}
}

365 c⁄° *
	$m©ch
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
p
) {

366 
öô
:

367 *
p
) {

369 i‡(*(
p
+1) == ')')

370  
	`°¨t_ˇ±uª
(
ms
, 
s
, 
p
+2, 
CAP_POSITION
);

372  
	`°¨t_ˇ±uª
(
ms
, 
s
, 
p
+1, 
CAP_UNFINISHED
);

375  
	`íd_ˇ±uª
(
ms
, 
s
, 
p
+1);

377 
L_ESC
: {

378 *(
p
+1)) {

380 
s
 = 
	`m©chbÆ™˚
(
ms
, s, 
p
+2);

381 i‡(
s
 =
NULL
)  NULL;

382 
p
+=4; 
öô
;

385 c⁄° *
ï
; 
¥evious
;

386 
p
 += 2;

387 i‡(*
p
 != '[')

388 
	`luaL_îr‹
(
ms
->
L
, "missög " 
	`LUA_QL
("[") "áfter "

389 
	`LUA_QL
("%%f") " inÖattern");

390 
ï
 = 
	`˛as£nd
(
ms
, 
p
);

391 
¥evious
 = (
s
 =
ms
->
§c_öô
) ? '\0' : *(s-1);

392 i‡(
	`m©chbøckë˛ass
(
	`uch¨
(
¥evious
), 
p
, 
ï
-1) ||

393 !
	`m©chbøckë˛ass
(
	`uch¨
(*
s
), 
p
, 
ï
-1)Ë 
NULL
;

394 
p
=
ï
; 
öô
;

397 i‡(
	`isdigô
(
	`uch¨
(*(
p
+1)))) {

398 
s
 = 
	`m©ch_ˇ±uª
(
ms
, s, 
	`uch¨
(*(
p
+1)));

399 i‡(
s
 =
NULL
)  NULL;

400 
p
+=2; 
öô
;

402 
dÊt
;

407  
s
;

410 i‡(*(
p
+1) == '\0')

411  (
s
 =
ms
->
§c_íd
Ë? s : 
NULL
;

412 
dÊt
;

414 : 
dÊt
: {

415 c⁄° *
ï
 = 
	`˛as£nd
(
ms
, 
p
);

416 
m
 = 
s
<
ms
->
§c_íd
 && 
	`sögÀm©ch
(
	`uch¨
(*s), 
p
, 
ï
);

417 *
ï
) {

419 c⁄° *
ªs
;

420 i‡(
m
 && ((
ªs
=
	`m©ch
(
ms
, 
s
+1, 
ï
+1)Ë!
NULL
))

421  
ªs
;

422 
p
=
ï
+1; 
öô
;

425  
	`max_ex∑nd
(
ms
, 
s
, 
p
, 
ï
);

428  (
m
 ? 
	`max_ex∑nd
(
ms
, 
s
+1, 
p
, 
ï
Ë: 
NULL
);

431  
	`mö_ex∑nd
(
ms
, 
s
, 
p
, 
ï
);

434 i‡(!
m
Ë 
NULL
;

435 
s
++; 
p
=
ï
; 
öô
;

440 
	}
}

444 c⁄° *
	$lmemföd
 (c⁄° *
s1
, 
size_t
 
l1
,

445 c⁄° *
s2
, 
size_t
 
l2
) {

446 i‡(
l2
 =0Ë 
s1
;

447 i‡(
l2
 > 
l1
Ë 
NULL
;

449 c⁄° *
öô
;

450 
l2
--;

451 
l1
 =Ü1-
l2
;

452 
l1
 > 0 && (
öô
 = (c⁄° *)
	`memchr
(
s1
, *
s2
,Ü1)Ë!
NULL
) {

453 
öô
++;

454 i‡(
	`memcmp
(
öô
, 
s2
+1, 
l2
) == 0)

455  
öô
-1;

457 
l1
 -
öô
-
s1
;

458 
s1
 = 
öô
;

461  
NULL
;

463 
	}
}

466 
	$push_⁄eˇ±uª
 (
M©chSèã
 *
ms
, 
i
, c⁄° *
s
,

467 c⁄° *
e
) {

468 i‡(
i
 >
ms
->
Àvñ
) {

469 i‡(
i
 == 0)

470 
	`lua_pushl°rög
(
ms
->
L
, 
s
, 
e
 - s);

472 
	`luaL_îr‹
(
ms
->
L
, "invalid capture index");

475 
±rdiff_t
 
l
 = 
ms
->
ˇ±uª
[
i
].
Àn
;

476 i‡(
l
 =
CAP_UNFINISHED
Ë
	`luaL_îr‹
(
ms
->
L
, "unfinished capture");

477 i‡(
l
 =
CAP_POSITION
)

478 
	`lua_pushöãgî
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
 - ms->
§c_öô
 + 1);

480 
	`lua_pushl°rög
(
ms
->
L
, ms->
ˇ±uª
[
i
].
öô
, 
l
);

482 
	}
}

485 
	$push_ˇ±uªs
 (
M©chSèã
 *
ms
, c⁄° *
s
, c⁄° *
e
) {

486 
i
;

487 
∆evñs
 = (
ms
->
Àvñ
 =0 && 
s
) ? 1 : ms->level;

488 
	`luaL_check°ack
(
ms
->
L
, 
∆evñs
, "too many captures");

489 
i
 = 0; i < 
∆evñs
; i++)

490 
	`push_⁄eˇ±uª
(
ms
, 
i
, 
s
, 
e
);

491  
∆evñs
;

492 
	}
}

495 
	$°r_föd_aux
 (
lua_Sèã
 *
L
, 
föd
) {

496 
size_t
 
l1
, 
l2
;

497 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 1, &
l1
);

498 c⁄° *
p
 = 
	`luaL_checkl°rög
(
L
, 2, &
l2
);

499 
±rdiff_t
 
öô
 = 
	`po§ñ©
(
	`luaL_›töãgî
(
L
, 3, 1), 
l1
) - 1;

500 i‡(
öô
 < 0) init = 0;

501 i‡((
size_t
)(
öô
Ë> 
l1
Ëöô = (
±rdiff_t
)l1;

502 i‡(
föd
 && (
	`lua_toboﬁón
(
L
, 4) ||

503 
	`°Ωbrk
(
p
, 
SPECIALS
Ë=
NULL
)) {

505 c⁄° *
s2
 = 
	`lmemföd
(
s
+
öô
, 
l1
-öô, 
p
, 
l2
);

506 i‡(
s2
) {

507 
	`lua_pushöãgî
(
L
, 
s2
-
s
+1);

508 
	`lua_pushöãgî
(
L
, 
s2
-
s
+
l2
);

513 
M©chSèã
 
ms
;

514 
™ch‹
 = (*
p
 == '^') ? (p++, 1) : 0;

515 c⁄° *
s1
=
s
+
öô
;

516 
ms
.
L
 = L;

517 
ms
.
§c_öô
 = 
s
;

518 
ms
.
§c_íd
 = 
s
+
l1
;

520 c⁄° *
ªs
;

521 
ms
.
Àvñ
 = 0;

522 i‡((
ªs
=
	`m©ch
(&
ms
, 
s1
, 
p
)Ë!
NULL
) {

523 i‡(
föd
) {

524 
	`lua_pushöãgî
(
L
, 
s1
-
s
+1);

525 
	`lua_pushöãgî
(
L
, 
ªs
-
s
);

526  
	`push_ˇ±uªs
(&
ms
, 
NULL
, 0) + 2;

529  
	`push_ˇ±uªs
(&
ms
, 
s1
, 
ªs
);

531 } 
s1
++ < 
ms
.
§c_íd
 && !
™ch‹
);

533 
	`lua_pushnû
(
L
);

535 
	}
}

538 
	$°r_föd
 (
lua_Sèã
 *
L
) {

539  
	`°r_föd_aux
(
L
, 1);

540 
	}
}

543 
	$°r_m©ch
 (
lua_Sèã
 *
L
) {

544  
	`°r_föd_aux
(
L
, 0);

545 
	}
}

548 
	$gm©ch_aux
 (
lua_Sèã
 *
L
) {

549 
M©chSèã
 
ms
;

550 
size_t
 
ls
;

551 c⁄° *
s
 = 
	`lua_tﬁ°rög
(
L
, 
	`lua_upvÆueödex
(1), &
ls
);

552 c⁄° *
p
 = 
	`lua_to°rög
(
L
, 
	`lua_upvÆueödex
(2));

553 c⁄° *
§c
;

554 
ms
.
L
 = L;

555 
ms
.
§c_öô
 = 
s
;

556 
ms
.
§c_íd
 = 
s
+
ls
;

557 
§c
 = 
s
 + (
size_t
)
	`lua_toöãgî
(
L
, 
	`lua_upvÆueödex
(3));

558 
§c
 <
ms
.
§c_íd
;

559 
§c
++) {

560 c⁄° *
e
;

561 
ms
.
Àvñ
 = 0;

562 i‡((
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
)Ë!
NULL
) {

563 
lua_I¡egî
 
√w°¨t
 = 
e
-
s
;

564 i‡(
e
 =
§c
Ë
√w°¨t
++;

565 
	`lua_pushöãgî
(
L
, 
√w°¨t
);

566 
	`lua_ª∂a˚
(
L
, 
	`lua_upvÆueödex
(3));

567  
	`push_ˇ±uªs
(&
ms
, 
§c
, 
e
);

571 
	}
}

574 
	$gm©ch
 (
lua_Sèã
 *
L
) {

575 
	`luaL_check°rög
(
L
, 1);

576 
	`luaL_check°rög
(
L
, 2);

577 
	`lua_£â›
(
L
, 2);

578 
	`lua_pushöãgî
(
L
, 0);

579 
	`lua_pushc˛osuª
(
L
, 
gm©ch_aux
, 3);

581 
	}
}

584 
	$gföd_nodef
 (
lua_Sèã
 *
L
) {

585  
	`luaL_îr‹
(
L
, 
	`LUA_QL
("string.gfind") " wasÑenamedÅo "

586 
	`LUA_QL
("string.gmatch"));

587 
	}
}

590 
	$add_s
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

591 c⁄° *
e
) {

592 
size_t
 
l
, 
i
;

593 c⁄° *
√ws
 = 
	`lua_tﬁ°rög
(
ms
->
L
, 3, &
l
);

594 
i
 = 0; i < 
l
; i++) {

595 i‡(
√ws
[
i
] !
L_ESC
)

596 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

598 
i
++;

599 i‡(!
	`isdigô
(
	`uch¨
(
√ws
[
i
])))

600 
	`luaL_addch¨
(
b
, 
√ws
[
i
]);

601 i‡(
√ws
[
i
] == '0')

602 
	`luaL_addl°rög
(
b
, 
s
, 
e
 - s);

604 
	`push_⁄eˇ±uª
(
ms
, 
√ws
[
i
] - '1', 
s
, 
e
);

605 
	`luaL_addvÆue
(
b
);

609 
	}
}

612 
	$add_vÆue
 (
M©chSèã
 *
ms
, 
luaL_Buf„r
 *
b
, c⁄° *
s
,

613 c⁄° *
e
) {

614 
lua_Sèã
 *
L
 = 
ms
->L;

615 
	`lua_ty≥
(
L
, 3)) {

616 
LUA_TNUMBER
:

617 
LUA_TSTRING
: {

618 
	`add_s
(
ms
, 
b
, 
s
, 
e
);

621 
LUA_TFUNCTION
: {

622 
n
;

623 
	`lua_pushvÆue
(
L
, 3);

624 
n
 = 
	`push_ˇ±uªs
(
ms
, 
s
, 
e
);

625 
	`lua_ˇŒ
(
L
, 
n
, 1);

628 
LUA_TTABLE
: {

629 
	`push_⁄eˇ±uª
(
ms
, 0, 
s
, 
e
);

630 
	`lua_gëèbÀ
(
L
, 3);

634 i‡(!
	`lua_toboﬁón
(
L
, -1)) {

635 
	`lua_p›
(
L
, 1);

636 
	`lua_pushl°rög
(
L
, 
s
, 
e
 - s);

638 i‡(!
	`lua_is°rög
(
L
, -1))

639 
	`luaL_îr‹
(
L
, "övÆidÑïœ˚míàvÆuê◊ %s)", 
	`luaL_ty≥«me
(L, -1));

640 
	`luaL_addvÆue
(
b
);

641 
	}
}

644 
	$°r_gsub
 (
lua_Sèã
 *
L
) {

645 
size_t
 
§˛
;

646 c⁄° *
§c
 = 
	`luaL_checkl°rög
(
L
, 1, &
§˛
);

647 c⁄° *
p
 = 
	`luaL_check°rög
(
L
, 2);

648 
å
 = 
	`lua_ty≥
(
L
, 3);

649 
max_s
 = 
	`luaL_›töt
(
L
, 4, 
§˛
+1);

650 
™ch‹
 = (*
p
 == '^') ? (p++, 1) : 0;

651 
n
 = 0;

652 
M©chSèã
 
ms
;

653 
luaL_Buf„r
 
b
;

654 
	`luaL_¨gcheck
(
L
, 
å
 =
LUA_TNUMBER
 ||Å∏=
LUA_TSTRING
 ||

655 
å
 =
LUA_TFUNCTION
 ||Å∏=
LUA_TTABLE
, 3,

657 
	`luaL_bufföô
(
L
, &
b
);

658 
ms
.
L
 = L;

659 
ms
.
§c_öô
 = 
§c
;

660 
ms
.
§c_íd
 = 
§c
+
§˛
;

661 
n
 < 
max_s
) {

662 c⁄° *
e
;

663 
ms
.
Àvñ
 = 0;

664 
e
 = 
	`m©ch
(&
ms
, 
§c
, 
p
);

665 i‡(
e
) {

666 
n
++;

667 
	`add_vÆue
(&
ms
, &
b
, 
§c
, 
e
);

669 i‡(
e
 &&É>
§c
)

670 
§c
 = 
e
;

671 i‡(
§c
 < 
ms
.
§c_íd
)

672 
	`luaL_addch¨
(&
b
, *
§c
++);

674 i‡(
™ch‹
) ;

676 
	`luaL_addl°rög
(&
b
, 
§c
, 
ms
.
§c_íd
-src);

677 
	`luaL_pushªsu…
(&
b
);

678 
	`lua_pushöãgî
(
L
, 
n
);

680 
	}
}

686 
	#MAX_ITEM
 512

	)

688 
	#FLAGS
 "-+ #0"

	)

693 
	#MAX_FORMAT
 ((
FLAGS
Ë+ (
LUA_INTFRMLEN
Ë+ 10)

	)

696 
	$addquŸed
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
¨g
) {

697 
size_t
 
l
;

698 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

699 
	`luaL_addch¨
(
b
, '"');

700 
l
--) {

701 *
s
) {

703 
	`luaL_addch¨
(
b
, '\\');

704 
	`luaL_addch¨
(
b
, *
s
);

708 
	`luaL_addl°rög
(
b
, "\\r", 2);

712 
	`luaL_addl°rög
(
b
, "\\000", 4);

716 
	`luaL_addch¨
(
b
, *
s
);

720 
s
++;

722 
	`luaL_addch¨
(
b
, '"');

723 
	}
}

725 c⁄° *
	$sˇnf‹m©
 (
lua_Sèã
 *
L
, c⁄° *
°r‰mt
, *
f‹m
) {

726 c⁄° *
p
 = 
°r‰mt
;

727 *
p
 !'\0' && 
	`°rchr
(
FLAGS
, *pË!
NULL
)Ö++;

728 i‡((
size_t
)(
p
 - 
°r‰mt
Ë>(
FLAGS
))

729 
	`luaL_îr‹
(
L
, "invalid format (repeated flags)");

730 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

731 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

732 i‡(*
p
 == '.') {

733 
p
++;

734 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

735 i‡(
	`isdigô
(
	`uch¨
(*
p
)))Ö++;

737 i‡(
	`isdigô
(
	`uch¨
(*
p
)))

738 
	`luaL_îr‹
(
L
, "invalid format (width orÖrecisionÅooÜong)");

739 *(
f‹m
++) = '%';

740 
	`°∫˝y
(
f‹m
, 
°r‰mt
, 
p
 - strfrmt + 1);

741 
f‹m
 +
p
 - 
°r‰mt
 + 1;

742 *
f‹m
 = '\0';

743  
p
;

744 
	}
}

747 
	$addöéí
 (*
f‹m
) {

748 
size_t
 
l
 = 
	`°æí
(
f‹m
);

749 
•ec
 = 
f‹m
[
l
 - 1];

750 
	`°r˝y
(
f‹m
 + 
l
 - 1, 
LUA_INTFRMLEN
);

751 
f‹m
[
l
 + (
LUA_INTFRMLEN
Ë- 2] = 
•ec
;

752 
f‹m
[
l
 + (
LUA_INTFRMLEN
) - 1] = '\0';

753 
	}
}

756 
	$°r_f‹m©
 (
lua_Sèã
 *
L
) {

757 
t›
 = 
	`lua_gët›
(
L
);

758 
¨g
 = 1;

759 
size_t
 
sÊ
;

760 c⁄° *
°r‰mt
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
sÊ
);

761 c⁄° *
°r‰mt_íd
 = 
°r‰mt
+
sÊ
;

762 
luaL_Buf„r
 
b
;

763 
	`luaL_bufföô
(
L
, &
b
);

764 
°r‰mt
 < 
°r‰mt_íd
) {

765 i‡(*
°r‰mt
 !
L_ESC
)

766 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

767 i‡(*++
°r‰mt
 =
L_ESC
)

768 
	`luaL_addch¨
(&
b
, *
°r‰mt
++);

770 
f‹m
[
MAX_FORMAT
];

771 
buff
[
MAX_ITEM
];

772 i‡(++
¨g
 > 
t›
)

773 
	`luaL_¨gîr‹
(
L
, 
¨g
, "no value");

774 
°r‰mt
 = 
	`sˇnf‹m©
(
L
, så‰mt, 
f‹m
);

775 *
°r‰mt
++) {

777 
	`•rötf
(
buff
, 
f‹m
, ()
	`luaL_checknumbî
(
L
, 
¨g
));

781 
	`addöéí
(
f‹m
);

782 
	`•rötf
(
buff
, 
f‹m
, (
LUA_INTFRM_T
)
	`luaL_checknumbî
(
L
, 
¨g
));

786 
	`addöéí
(
f‹m
);

787 
	`•rötf
(
buff
, 
f‹m
, (
LUA_INTFRM_T
)
	`luaL_checknumbî
(
L
, 
¨g
));

792 
	`•rötf
(
buff
, 
f‹m
, ()
	`luaL_checknumbî
(
L
, 
¨g
));

796 
	`addquŸed
(
L
, &
b
, 
¨g
);

800 
size_t
 
l
;

801 c⁄° *
s
 = 
	`luaL_checkl°rög
(
L
, 
¨g
, &
l
);

802 i‡(!
	`°rchr
(
f‹m
, '.'Ë&& 
l
 >= 100) {

805 
	`lua_pushvÆue
(
L
, 
¨g
);

806 
	`luaL_addvÆue
(&
b
);

810 
	`•rötf
(
buff
, 
f‹m
, 
s
);

815  
	`luaL_îr‹
(
L
, "övÆid o±i⁄ " 
	`LUA_QL
("%%%c") "Åo "

816 
	`LUA_QL
("f‹m©"), *(
°r‰mt
 - 1));

819 
	`luaL_addl°rög
(&
b
, 
buff
, 
	`°æí
(buff));

822 
	`luaL_pushªsu…
(&
b
);

824 
	}
}

827 c⁄° 
luaL_Reg
 
	g°æib
[] = {

828 {"byã", 
°r_byã
},

829 {"ch¨", 
°r_ch¨
},

830 {"dump", 
°r_dump
},

831 {"föd", 
°r_föd
},

832 {"f‹m©", 
°r_f‹m©
},

833 {"gföd", 
gföd_nodef
},

834 {"gm©ch", 
gm©ch
},

835 {"gsub", 
°r_gsub
},

836 {"Àn", 
°r_Àn
},

837 {"lowî", 
°r_lowî
},

838 {"m©ch", 
°r_m©ch
},

839 {"ªp", 
°r_ªp
},

840 {"ªvî£", 
°r_ªvî£
},

841 {"sub", 
°r_sub
},

842 {"uµî", 
°r_uµî
},

843 {
NULL
, NULL}

847 
	$¸óãmë©abÀ
 (
lua_Sèã
 *
L
) {

848 
	`lua_¸óãèbÀ
(
L
, 0, 1);

849 
	`lua_pushlôîÆ
(
L
, "");

850 
	`lua_pushvÆue
(
L
, -2);

851 
	`lua_£tmë©abÀ
(
L
, -2);

852 
	`lua_p›
(
L
, 1);

853 
	`lua_pushvÆue
(
L
, -2);

854 
	`lua_£tfõld
(
L
, -2, "__index");

855 
	`lua_p›
(
L
, 1);

856 
	}
}

862 
LUALIB_API
 
	$lua›í_°rög
 (
lua_Sèã
 *
L
) {

863 
	`¥ötf
("debug: 6.luaopen_string\n");

864 
	`luaL_ªgi°î
(
L
, 
LUA_STRLIBNAME
, 
°æib
);

865 #i‡
	`deföed
(
LUA_COMPAT_GFIND
)

866 
	`lua_gëfõld
(
L
, -1, "gmatch");

867 
	`lua_£tfõld
(
L
, -2, "gfind");

869 
	`¸óãmë©abÀ
(
L
);

871 
	}
}

	@src/ltable.c

21 
	~<m©h.h
>

22 
	~<°rög.h
>

24 
	#…abÀ_c


	)

25 
	#LUA_CORE


	)

27 
	~"lua.h
"

29 
	~"ldebug.h
"

30 
	~"ldo.h
"

31 
	~"lgc.h
"

32 
	~"lmem.h
"

33 
	~"lobje˘.h
"

34 
	~"l°©e.h
"

35 
	~"…abÀ.h
"

41 #i‡
LUAI_BITSINT
 > 26

42 
	#MAXBITS
 26

	)

44 
	#MAXBITS
 (
LUAI_BITSINT
-2)

	)

47 
	#MAXASIZE
 (1 << 
MAXBITS
)

	)

50 
	#hashpow2
(
t
,
n
Ë(
	`gnode
—, 
	`lmod
(“), 
	`sizíode
—))))

	)

52 
	#hash°r
(
t
,
°r
Ë
	`hashpow2
—, (°r)->
tsv
.
hash
)

	)

53 
	#hashboﬁón
(
t
,
p
Ë
	`hashpow2
—,Ö)

	)

60 
	#hashmod
(
t
,
n
Ë(
	`gnode
—, (“Ë% ((
	`sizíode
—)-1)|1))))

	)

67 
	#hashpoöãr
(
t
,
p
Ë
	`hashmod
—, 
	`I¡Poöt
’))

	)

73 
	#numöts
 
	`ˇ°_öt
((
lua_Numbî
)/())

	)

77 
	#dummynode
 (&
dummynode_
)

	)

79 c⁄° 
Node
 
	gdummynode_
 = {

80 {{
NULL
}, 
LUA_TNIL
},

81 {{{
NULL
}, 
LUA_TNIL
, NULL}}

96 
Node
 *
	$hashnum
 (c⁄° 
TabÀ
 *
t
, 
lua_Numbî
 
n
) {

97 
a
[
numöts
];

98 
i
;

99 i‡(
	`luai_numeq
(
n
, 0))

100  
	`gnode
(
t
, 0);

101 
	`mem˝y
(
a
, &
n
, (a));

102 
i
 = 1; i < 
numöts
; i++Ë
a
[0] +=á[i];

103  
	`hashmod
(
t
, 
a
[0]);

107 
	}
}

129 
Node
 *
	$maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

130 
	`ây≥
(
key
)) {

131 
LUA_TNUMBER
:

132  
	`hashnum
(
t
, 
	`nvÆue
(
key
));

133 
LUA_TSTRING
:

134  
	`hash°r
(
t
, 
	`øwtsvÆue
(
key
));

135 
LUA_TBOOLEAN
:

136  
	`hashboﬁón
(
t
, 
	`bvÆue
(
key
));

137 
LUA_TLIGHTUSERDATA
:

138  
	`hashpoöãr
(
t
, 
	`pvÆue
(
key
));

140  
	`hashpoöãr
(
t
, 
	`gcvÆue
(
key
));

149 
	}
}

160 
	$¨øyödex
 (c⁄° 
TVÆue
 *
key
) {

161 i‡(
	`âi¢umbî
(
key
)) {

162 
lua_Numbî
 
n
 = 
	`nvÆue
(
key
);

163 
k
;

164 
	`lua_numbî2öt
(
k
, 
n
);

165 i‡(
	`luai_numeq
(
	`ˇ°_num
(
k
), 
n
))

166  
k
;

169 
	}
}

177 
	$födödex
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

178 
i
;

179 i‡(
	`âi¢û
(
key
))  -1;

180 
i
 = 
	`¨øyödex
(
key
);

181 i‡(0 < 
i
 && i <
t
->
sizóºay
)

182  
i
-1;

184 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

187 i‡(
	`luaO_øwequÆObj
(
	`key2tvÆ
(
n
), 
key
) ||

188 (
	`ây≥
(
	`gkey
(
n
)Ë=
LUA_TDEADKEY
 && 
	`iscﬁÀ˘abÀ
(
key
) &&

189 
	`gcvÆue
(
	`gkey
(
n
)Ë=gcvÆue(
key
))) {

190 
i
 = 
	`ˇ°_öt
(
n
 - 
	`gnode
(
t
, 0));

192  
i
 + 
t
->
sizóºay
;

194 
n
 = 
	`g√xt
(n);

195 } 
n
);

196 
	`luaG_ru√º‹
(
L
, "övÆid keyÅÿ" 
	`LUA_QL
("next"));

199 
	}
}

202 
	$luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
) {

203 
i
 = 
	`födödex
(
L
, 
t
, 
key
);

204 
i
++; i < 
t
->
sizóºay
; i++) {

205 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
])) {

206 
	`£ävÆue
(
key
, 
	`ˇ°_num
(
i
+1));

207 
	`£tobj2s
(
L
, 
key
+1, &
t
->
¨øy
[
i
]);

211 
i
 -
t
->
sizóºay
; i < 
	`sizíode
(t); i++) {

212 i‡(!
	`âi¢û
(
	`gvÆ
(
	`gnode
(
t
, 
i
)))) {

213 
	`£tobj2s
(
L
, 
key
, 
	`key2tvÆ
(
	`gnode
(
t
, 
i
)));

214 
	`£tobj2s
(
L
, 
key
+1, 
	`gvÆ
(
	`gnode
(
t
, 
i
)));

219 
	}
}

244 
	$compuãsizes
 (
nums
[], *
«ºay
) {

245 
i
;

246 
twŸoi
;

247 
a
 = 0;

248 
«
 = 0;

249 
n
 = 0;

250 
i
 = 0, 
twŸoi
 = 1;ÅwŸoi/2 < *
«ºay
; i++,Åwotoi *= 2) {

251 i‡(
nums
[
i
] > 0) {

252 
a
 +
nums
[
i
];

253 i‡(
a
 > 
twŸoi
/2) {

254 
n
 = 
twŸoi
;

255 
«
 = 
a
;

258 i‡(
a
 =*
«ºay
) ;

260 *
«ºay
 = 
n
;

261 
	`lua_as£π
(*
«ºay
/2 <
«
 &&Ça <= *narray);

262  
«
;

263 
	}
}

269 
	$cou¡öt
 (c⁄° 
TVÆue
 *
key
, *
nums
) {

270 
k
 = 
	`¨øyödex
(
key
);

271 i‡(0 < 
k
 && k <
MAXASIZE
) {

272 
nums
[
	`˚ûlog2
(
k
)]++;

277 
	}
}

306 
	$numu£¨øy
 (c⁄° 
TabÀ
 *
t
, *
nums
) {

307 
lg
;

308 
âlg
;

309 
au£
 = 0;

310 
i
 = 1;

311 
lg
=0, 
âlg
=1;Üg<=
MAXBITS
;Üg++,Åtlg*=2) {

312 
lc
 = 0;

313 
lim
 = 
âlg
;

314 i‡(
lim
 > 
t
->
sizóºay
) {

315 
lim
 = 
t
->
sizóºay
;

316 i‡(
i
 > 
lim
)

320 ; 
i
 <
lim
; i++) {

321 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
-1]))

322 
lc
++;

324 
nums
[
lg
] +
lc
;

325 
au£
 +
lc
;

327  
au£
;

328 
	}
}

335 
	$numu£hash
 (c⁄° 
TabÀ
 *
t
, *
nums
, *
≤asize
) {

336 
tŸÆu£
 = 0;

337 
au£
 = 0;

338 
i
 = 
	`sizíode
(
t
);

339 
i
--) {

340 
Node
 *
n
 = &
t
->
node
[
i
];

341 i‡(!
	`âi¢û
(
	`gvÆ
(
n
))) {

342 
au£
 +
	`cou¡öt
(
	`key2tvÆ
(
n
), 
nums
);

343 
tŸÆu£
++;

346 *
≤asize
 +
au£
;

347  
tŸÆu£
;

348 
	}
}

354 
	$£èºayve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
 ) {

355 
i
;

356 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
size
, 
TVÆue
);

357 
i
=
t
->
sizóºay
; i<
size
; i++)

358 
	`£äûvÆue
(&
t
->
¨øy
[
i
]);

359 
t
->
sizóºay
 = 
size
;

360 
	}
}

368 
	$£äodeve˘‹
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
size
 ) {

369 
lsize
;

370 i‡(
size
 == 0) {

371 
t
->
node
 = 
	`ˇ°
(
Node
 *, 
dummynode
);

372 
lsize
 = 0;

375 
i
;

376 
lsize
 = 
	`˚ûlog2
(
size
);

377 i‡(
lsize
 > 
MAXBITS
)

378 
	`luaG_ru√º‹
(
L
, "table overflow");

379 
size
 = 
	`twŸo
(
lsize
);

380 
t
->
node
 = 
	`luaM_√wve˘‹
(
L
, 
size
, 
Node
);

381 
i
=0; i<
size
; i++) {

382 
Node
 *
n
 = 
	`gnode
(
t
, 
i
);

383 
	`g√xt
(
n
Ë
NULL
;

384 
	`£äûvÆue
(
	`gkey
(
n
));

385 
	`£äûvÆue
(
	`gvÆ
(
n
));

388 
t
->
lsizíode
 = 
	`ˇ°_byã
(
lsize
);

389 
t
->
œ°‰ì
 = 
	`gnode
—, 
size
);

390 
	}
}

399 
	$ªsize
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
, 
nhsize
) {

400 
i
;

401 
ﬁdasize
 = 
t
->
sizóºay
;

402 
ﬁdhsize
 = 
t
->
lsizíode
;

403 
Node
 *
nﬁd
 = 
t
->
node
;

404 i‡(
«size
 > 
ﬁdasize
)

405 
	`£èºayve˘‹
(
L
, 
t
, 
«size
);

409 
	`£äodeve˘‹
(
L
, 
t
, 
nhsize
);

411 i‡(
«size
 < 
ﬁdasize
) {

412 
t
->
sizóºay
 = 
«size
;

416 
i
=
«size
; i<
ﬁdasize
; i++) {

417 i‡(!
	`âi¢û
(&
t
->
¨øy
[
i
]))

419 
	`£tobjt2t
(
L
, 
	`luaH_£äum
(L, 
t
, 
i
+1), &t->
¨øy
[i]);

422 
	`luaM_ªÆlocve˘‹
(
L
, 
t
->
¨øy
, 
ﬁdasize
, 
«size
, 
TVÆue
);

427 
i
 = 
	`twŸo
(
ﬁdhsize
) - 1; i >= 0; i--) {

428 
Node
 *
ﬁd
 = 
nﬁd
+
i
;

429 i‡(!
	`âi¢û
(
	`gvÆ
(
ﬁd
)))

430 
	`£tobjt2t
(
L
, 
	`luaH_£t
(L, 
t
, 
	`key2tvÆ
(
ﬁd
)), 
	`gvÆ
(old));

433 i‡(
nﬁd
 !
dummynode
)

434 
	`luaM_‰ì¨øy
(
L
, 
nﬁd
, 
	`twŸo
(
ﬁdhsize
), 
Node
);

435 
	}
}

438 
	$luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
) {

439 
nsize
 = (
t
->
node
 =
dummynode
Ë? 0 : 
	`sizíode
(t);

440 
	`ªsize
(
L
, 
t
, 
«size
, 
nsize
);

441 
	}
}

449 
	$ªhash
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
ek
) {

450 
«size
, 
«
;

451 
nums
[
MAXBITS
+1];

452 
i
;

453 
tŸÆu£
;

454 
i
=0; i<=
MAXBITS
; i++Ë
nums
[i] = 0;

455 
«size
 = 
	`numu£¨øy
(
t
, 
nums
);

456 
tŸÆu£
 = 
«size
;

457 
tŸÆu£
 +
	`numu£hash
(
t
, 
nums
, &
«size
);

459 
«size
 +
	`cou¡öt
(
ek
, 
nums
);

460 
tŸÆu£
++;

462 
«
 = 
	`compuãsizes
(
nums
, &
«size
);

464 
	`ªsize
(
L
, 
t
, 
«size
, 
tŸÆu£
 - 
«
);

465 
	}
}

474 
TabÀ
 *
	$luaH_√w
 (
lua_Sèã
 *
L
, 
«ºay
, 
nhash
) {

475 
TabÀ
 *
t
 = 
	`luaM_√w
(
L
, Table);

476 
	`luaC_lök
(
L
, 
	`obj2gco
(
t
), 
LUA_TTABLE
);

477 
t
->
më©abÀ
 = 
NULL
;

478 
t
->
Êags
 = 
	`ˇ°_byã
(~0);

480 
t
->
¨øy
 = 
NULL
;

481 
t
->
sizóºay
 = 0;

482 
t
->
lsizíode
 = 0;

483 
t
->
node
 = 
	`ˇ°
(
Node
 *, 
dummynode
);

484 
	`£èºayve˘‹
(
L
, 
t
, 
«ºay
);

485 
	`£äodeve˘‹
(
L
, 
t
, 
nhash
);

486  
t
;

487 
	}
}

490 
	$luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
) {

491 i‡(
t
->
node
 !
dummynode
)

492 
	`luaM_‰ì¨øy
(
L
, 
t
->
node
, 
	`sizíode
—), 
Node
);

493 
	`luaM_‰ì¨øy
(
L
, 
t
->
¨øy
,Å->
sizóºay
, 
TVÆue
);

494 
	`luaM_‰ì
(
L
, 
t
);

495 
	}
}

501 
Node
 *
	$gë‰ìpos
 (
TabÀ
 *
t
) {

502 
t
->
œ°‰ì
-- >Å->
node
) {

503 i‡(
	`âi¢û
(
	`gkey
(
t
->
œ°‰ì
)))

504  
t
->
œ°‰ì
;

506  
NULL
;

507 
	}
}

522 
TVÆue
 *
	$√wkey
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

523 
Node
 *
mp
 = 
	`maöposôi⁄
(
t
, 
key
);

525 i‡(!
	`âi¢û
(
	`gvÆ
(
mp
)Ë|| m∞=
dummynode
) {

526 
Node
 *
Ÿhîn
;

527 
Node
 *
n
 = 
	`gë‰ìpos
(
t
);

528 i‡(
n
 =
NULL
) {

529 
	`ªhash
(
L
, 
t
, 
key
);

530  
	`luaH_£t
(
L
, 
t
, 
key
);

532 
	`lua_as£π
(
n
 !
dummynode
);

533 
Ÿhîn
 = 
	`maöposôi⁄
(
t
, 
	`key2tvÆ
(
mp
));

534 i‡(
Ÿhîn
 !
mp
) {

536 
	`g√xt
(
Ÿhîn
Ë!
mp
) othern = gnext(othern);

537 
	`g√xt
(
Ÿhîn
Ë
n
;

538 *
n
 = *
mp
;

539 
	`g√xt
(
mp
Ë
NULL
;

540 
	`£äûvÆue
(
	`gvÆ
(
mp
));

544 
	`g√xt
(
n
Ëg√xt(
mp
);

545 
	`g√xt
(
mp
Ë
n
;

546 
mp
 = 
n
;

549 
	`gkey
(
mp
)->
vÆue
 = 
key
->vÆue; gkey(mp)->
â
 = key->tt;

550 
	`luaC_b¨rõπ
(
L
, 
t
, 
key
);

551 
	`lua_as£π
(
	`âi¢û
(
	`gvÆ
(
mp
)));

552  
	`gvÆ
(
mp
);

553 
	}
}

560 c⁄° 
TVÆue
 *
	$luaH_gënum
 (
TabÀ
 *
t
, 
key
) {

564 i‡(
	`ˇ°
(, 
key
-1Ë< ca°(, 
t
->
sizóºay
))

565  &
t
->
¨øy
[
key
-1];

572 
lua_Numbî
 
nk
 = 
	`ˇ°_num
(
key
);

573 
Node
 *
n
 = 
	`hashnum
(
t
, 
nk
);

575 i‡(
	`âi¢umbî
(
	`gkey
(
n
)Ë&& 
	`luai_numeq
(
	`nvÆue
(gkey“)), 
nk
))

576  
	`gvÆ
(
n
);

577 
n
 = 
	`g√xt
(n);

578 } 
n
);

579  
luaO_nûobje˘
;

588 
	}
}

595 c⁄° 
TVÆue
 *
	$luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
) {

596 
Node
 *
n
 = 
	`hash°r
(
t
, 
key
);

598 i‡(
	`âis°rög
(
	`gkey
(
n
)Ë&& 
	`øwtsvÆue
(gkey“)Ë=
key
)

599  
	`gvÆ
(
n
);

600 
n
 = 
	`g√xt
(n);

601 } 
n
);

602  
luaO_nûobje˘
;

603 
	}
}

610 c⁄° 
TVÆue
 *
	$luaH_gë
 (
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

611 
	`ây≥
(
key
)) {

612 
LUA_TNIL
:  
luaO_nûobje˘
;

613 
LUA_TSTRING
:  
	`luaH_gë°r
(
t
, 
	`øwtsvÆue
(
key
));

614 
LUA_TNUMBER
: {

615 
k
;

616 
lua_Numbî
 
n
 = 
	`nvÆue
(
key
);

617 
	`lua_numbî2öt
(
k
, 
n
);

618 i‡(
	`luai_numeq
(
	`ˇ°_num
(
k
), 
	`nvÆue
(
key
)))

619  
	`luaH_gënum
(
t
, 
k
);

623 
Node
 *
n
 = 
	`maöposôi⁄
(
t
, 
key
);

625 i‡(
	`luaO_øwequÆObj
(
	`key2tvÆ
(
n
), 
key
))

626  
	`gvÆ
(
n
);

627 
n
 = 
	`g√xt
(n);

628 } 
n
);

629  
luaO_nûobje˘
;

632 
	}
}

635 
TVÆue
 *
	$luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

636 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gë
(
t
, 
key
);

637 
t
->
Êags
 = 0;

638 i‡(
p
 !
luaO_nûobje˘
)

639  
	`ˇ°
(
TVÆue
 *, 
p
);

641 i‡(
	`âi¢û
(
key
)Ë
	`luaG_ru√º‹
(
L
, "table index isÇil");

642 i‡(
	`âi¢umbî
(
key
Ë&& 
	`luai_numi¢™
(
	`nvÆue
(key)))

643 
	`luaG_ru√º‹
(
L
, "table index is NaN");

644  
	`√wkey
(
L
, 
t
, 
key
);

646 
	}
}

649 
TVÆue
 *
	$luaH_£äum
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
key
) {

650 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gënum
(
t
, 
key
);

651 i‡(
p
 !
luaO_nûobje˘
)

652  
	`ˇ°
(
TVÆue
 *, 
p
);

654 
TVÆue
 
k
;

655 
	`£ävÆue
(&
k
, 
	`ˇ°_num
(
key
));

656  
	`√wkey
(
L
, 
t
, &
k
);

658 
	}
}

661 
TVÆue
 *
	$luaH_£t°r
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
TSåög
 *
key
) {

662 c⁄° 
TVÆue
 *
p
 = 
	`luaH_gë°r
(
t
, 
key
);

663 i‡(
p
 !
luaO_nûobje˘
)

664  
	`ˇ°
(
TVÆue
 *, 
p
);

666 
TVÆue
 
k
;

667 
	`£tsvÆue
(
L
, &
k
, 
key
);

668  
	`√wkey
(
L
, 
t
, &
k
);

670 
	}
}

677 
	$unbound_£¨ch
 (
TabÀ
 *
t
, 
j
) {

678 
i
 = 
j
;

679 
j
++;

681 !
	`âi¢û
(
	`luaH_gënum
(
t
, 
j
))) {

682 
i
 = 
j
;

683 
j
 *= 2;

684 i‡(
j
 > 
	`ˇ°
(, 
MAX_INT
)) {

686 
i
 = 1;

687 !
	`âi¢û
(
	`luaH_gënum
(
t
, 
i
))) i++;

688  
i
 - 1;

692 
j
 - 
i
 > 1) {

693 
m
 = (
i
+
j
)/2;

694 i‡(
	`âi¢û
(
	`luaH_gënum
(
t
, 
m
))Ë
j
 = m;

695 
i
 = 
m
;

697  
i
;

698 
	}
}

708 
	$luaH_gën
 (
TabÀ
 *
t
) {

709 
j
 = 
t
->
sizóºay
;

710 i‡(
j
 > 0 && 
	`âi¢û
(&
t
->
¨øy
[j - 1])) {

712 
i
 = 0;

713 
j
 - 
i
 > 1) {

714 
m
 = (
i
+
j
)/2;

715 i‡(
	`âi¢û
(&
t
->
¨øy
[
m
 - 1])Ë
j
 = m;

716 
i
 = 
m
;

718  
i
;

721 i‡(
t
->
node
 =
dummynode
)

722  
j
;

723  
	`unbound_£¨ch
(
t
, 
j
);

724 
	}
}

728 #i‡
deföed
(
LUA_DEBUG
)

730 
Node
 *
	$luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
) {

731  
	`maöposôi⁄
(
t
, 
key
);

732 
	}
}

734 
	$luaH_isdummy
 (
Node
 *
n
Ë{ Ç =
dummynode
; 
	}
}

	@src/ltable.h

7 #i‚de‡
…abÀ_h


8 
	#…abÀ_h


	)

10 
	~"lobje˘.h
"

13 
	#gnode
(
t
,
i
Ë(&—)->
node
[i])

	)

14 
	#gkey
(
n
Ë(&“)->
i_key
.
nk
)

	)

15 
	#gvÆ
(
n
Ë(&“)->
i_vÆ
)

	)

16 
	#g√xt
(
n
Ë(“)->
i_key
.
nk
.
√xt
)

	)

18 
	#key2tvÆ
(
n
Ë(&“)->
i_key
.
tvk
)

	)

21 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gënum
 (
TabÀ
 *
t
, 
key
);

22 
LUAI_FUNC
 
TVÆue
 *
luaH_£äum
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
key
);

23 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë°r
 (
TabÀ
 *
t
, 
TSåög
 *
key
);

24 
LUAI_FUNC
 
TVÆue
 *
luaH_£t°r
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
TSåög
 *
key
);

25 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaH_gë
 (
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

26 
LUAI_FUNC
 
TVÆue
 *
luaH_£t
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, c⁄° TVÆuê*
key
);

27 
LUAI_FUNC
 
TabÀ
 *
luaH_√w
 (
lua_Sèã
 *
L
, 
«ºay
, 
 hash
);

28 
LUAI_FUNC
 
luaH_ªsizóºay
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
«size
);

29 
LUAI_FUNC
 
luaH_‰ì
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
);

30 
LUAI_FUNC
 
luaH_√xt
 (
lua_Sèã
 *
L
, 
TabÀ
 *
t
, 
StkId
 
key
);

31 
LUAI_FUNC
 
luaH_gën
 (
TabÀ
 *
t
);

34 #i‡
deföed
(
LUA_DEBUG
)

35 
LUAI_FUNC
 
Node
 *
luaH_maöposôi⁄
 (c⁄° 
TabÀ
 *
t
, c⁄° 
TVÆue
 *
key
);

36 
LUAI_FUNC
 
luaH_isdummy
 (
Node
 *
n
);

	@src/ltablib.c

8 
	~<°ddef.h
>

10 
	#…ablib_c


	)

11 
	#LUA_LIB


	)

13 
	~"lua.h
"

15 
	~"œuxlib.h
"

16 
	~"luÆib.h
"

19 
	#aux_gën
(
L
,
n
Ë(
	`luaL_checkty≥
(L,Ç, 
LUA_TTABLE
), 
	`luaL_gën
(L,Ç))

	)

22 
	$f‹óchi
 (
lua_Sèã
 *
L
) {

23 
i
;

24 
n
 = 
	`aux_gën
(
L
, 1);

25 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

26 
i
=1; i <
n
; i++) {

27 
	`lua_pushvÆue
(
L
, 2);

28 
	`lua_pushöãgî
(
L
, 
i
);

29 
	`lua_øwgëi
(
L
, 1, 
i
);

30 
	`lua_ˇŒ
(
L
, 2, 1);

31 i‡(!
	`lua_i¢û
(
L
, -1))

33 
	`lua_p›
(
L
, 1);

36 
	}
}

39 
	$f‹óch
 (
lua_Sèã
 *
L
) {

40 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

41 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

42 
	`lua_pushnû
(
L
);

43 
	`lua_√xt
(
L
, 1)) {

44 
	`lua_pushvÆue
(
L
, 2);

45 
	`lua_pushvÆue
(
L
, -3);

46 
	`lua_pushvÆue
(
L
, -3);

47 
	`lua_ˇŒ
(
L
, 2, 1);

48 i‡(!
	`lua_i¢û
(
L
, -1))

50 
	`lua_p›
(
L
, 2);

53 
	}
}

56 
	$maxn
 (
lua_Sèã
 *
L
) {

57 
lua_Numbî
 
max
 = 0;

58 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

59 
	`lua_pushnû
(
L
);

60 
	`lua_√xt
(
L
, 1)) {

61 
	`lua_p›
(
L
, 1);

62 i‡(
	`lua_ty≥
(
L
, -1Ë=
LUA_TNUMBER
) {

63 
lua_Numbî
 
v
 = 
	`lua_t⁄umbî
(
L
, -1);

64 i‡(
v
 > 
max
) max = v;

67 
	`lua_pushnumbî
(
L
, 
max
);

69 
	}
}

72 
	$gën
 (
lua_Sèã
 *
L
) {

73 
	`lua_pushöãgî
(
L
, 
	`aux_gën
(L, 1));

75 
	}
}

78 
	$£ä
 (
lua_Sèã
 *
L
) {

79 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

80 #i‚de‡
luaL_£ä


81 
	`luaL_£ä
(
L
, 1, 
	`luaL_checköt
(L, 2));

83 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("setn") " is obsolete");

85 
	`lua_pushvÆue
(
L
, 1);

87 
	}
}

90 
	$tö£π
 (
lua_Sèã
 *
L
) {

91 
e
 = 
	`aux_gën
(
L
, 1) + 1;

92 
pos
;

93 
	`lua_gët›
(
L
)) {

95 
pos
 = 
e
;

99 
i
;

100 
pos
 = 
	`luaL_checköt
(
L
, 2);

101 i‡(
pos
 > 
e
)É =Öos;

102 
i
 = 
e
; i > 
pos
; i--) {

103 
	`lua_øwgëi
(
L
, 1, 
i
-1);

104 
	`lua_øw£ti
(
L
, 1, 
i
);

109  
	`luaL_îr‹
(
L
, "wr⁄gÇumbî o‡¨gumít†tÿ" 
	`LUA_QL
("insert"));

112 
	`luaL_£ä
(
L
, 1, 
e
);

113 
	`lua_øw£ti
(
L
, 1, 
pos
);

115 
	}
}

118 
	$åemove
 (
lua_Sèã
 *
L
) {

119 
e
 = 
	`aux_gën
(
L
, 1);

120 
pos
 = 
	`luaL_›töt
(
L
, 2, 
e
);

121 i‡(!(1 <
pos
 &&Öo†<
e
))

123 
	`luaL_£ä
(
L
, 1, 
e
 - 1);

124 
	`lua_øwgëi
(
L
, 1, 
pos
);

125  ;
pos
<
e
;Öos++) {

126 
	`lua_øwgëi
(
L
, 1, 
pos
+1);

127 
	`lua_øw£ti
(
L
, 1, 
pos
);

129 
	`lua_pushnû
(
L
);

130 
	`lua_øw£ti
(
L
, 1, 
e
);

132 
	}
}

135 
	$addfõld
 (
lua_Sèã
 *
L
, 
luaL_Buf„r
 *
b
, 
i
) {

136 
	`lua_øwgëi
(
L
, 1, 
i
);

137 i‡(!
	`lua_is°rög
(
L
, -1))

138 
	`luaL_îr‹
(
L
, "invalid value (%s)át index %d inÅable for "

139 
	`LUA_QL
("c⁄ˇt"), 
	`luaL_ty≥«me
(
L
, -1), 
i
);

140 
	`luaL_addvÆue
(
b
);

141 
	}
}

144 
	$tc⁄ˇt
 (
lua_Sèã
 *
L
) {

145 
luaL_Buf„r
 
b
;

146 
size_t
 
l£p
;

147 
i
, 
œ°
;

148 c⁄° *
£p
 = 
	`luaL_›é°rög
(
L
, 2, "", &
l£p
);

149 
	`luaL_checkty≥
(
L
, 1, 
LUA_TTABLE
);

150 
i
 = 
	`luaL_›töt
(
L
, 3, 1);

151 
œ°
 = 
	`luaL_›t
(
L
, 
luaL_checköt
, 4, 
	`luaL_gën
(L, 1));

152 
	`luaL_bufföô
(
L
, &
b
);

153 ; 
i
 < 
œ°
; i++) {

154 
	`addfõld
(
L
, &
b
, 
i
);

155 
	`luaL_addl°rög
(&
b
, 
£p
, 
l£p
);

157 i‡(
i
 =
œ°
)

158 
	`addfõld
(
L
, &
b
, 
i
);

159 
	`luaL_pushªsu…
(&
b
);

161 
	}
}

173 
	$£t2
 (
lua_Sèã
 *
L
, 
i
, 
j
) {

174 
	`lua_øw£ti
(
L
, 1, 
i
);

175 
	`lua_øw£ti
(
L
, 1, 
j
);

176 
	}
}

178 
	$s‹t_comp
 (
lua_Sèã
 *
L
, 
a
, 
b
) {

179 i‡(!
	`lua_i¢û
(
L
, 2)) {

180 
ªs
;

181 
	`lua_pushvÆue
(
L
, 2);

182 
	`lua_pushvÆue
(
L
, 
a
-1);

183 
	`lua_pushvÆue
(
L
, 
b
-2);

184 
	`lua_ˇŒ
(
L
, 2, 1);

185 
ªs
 = 
	`lua_toboﬁón
(
L
, -1);

186 
	`lua_p›
(
L
, 1);

187  
ªs
;

190  
	`lua_Às°h™
(
L
, 
a
, 
b
);

191 
	}
}

193 
	$auxs‹t
 (
lua_Sèã
 *
L
, 
l
, 
u
) {

194 
l
 < 
u
) {

195 
i
, 
j
;

197 
	`lua_øwgëi
(
L
, 1, 
l
);

198 
	`lua_øwgëi
(
L
, 1, 
u
);

199 i‡(
	`s‹t_comp
(
L
, -1, -2))

200 
	`£t2
(
L
, 
l
, 
u
);

202 
	`lua_p›
(
L
, 2);

203 i‡(
u
-
l
 == 1) ;

204 
i
 = (
l
+
u
)/2;

205 
	`lua_øwgëi
(
L
, 1, 
i
);

206 
	`lua_øwgëi
(
L
, 1, 
l
);

207 i‡(
	`s‹t_comp
(
L
, -2, -1))

208 
	`£t2
(
L
, 
i
, 
l
);

210 
	`lua_p›
(
L
, 1);

211 
	`lua_øwgëi
(
L
, 1, 
u
);

212 i‡(
	`s‹t_comp
(
L
, -1, -2))

213 
	`£t2
(
L
, 
i
, 
u
);

215 
	`lua_p›
(
L
, 2);

217 i‡(
u
-
l
 == 2) ;

218 
	`lua_øwgëi
(
L
, 1, 
i
);

219 
	`lua_pushvÆue
(
L
, -1);

220 
	`lua_øwgëi
(
L
, 1, 
u
-1);

221 
	`£t2
(
L
, 
i
, 
u
-1);

223 
i
 = 
l
; 
j
 = 
u
-1;

226 
	`lua_øwgëi
(
L
, 1, ++
i
), 
	`s‹t_comp
(L, -1, -2)) {

227 i‡(
i
>
u
Ë
	`luaL_îr‹
(
L
, "invalid order function for sorting");

228 
	`lua_p›
(
L
, 1);

231 
	`lua_øwgëi
(
L
, 1, --
j
), 
	`s‹t_comp
(L, -3, -1)) {

232 i‡(
j
<
l
Ë
	`luaL_îr‹
(
L
, "invalid order function for sorting");

233 
	`lua_p›
(
L
, 1);

235 i‡(
j
<
i
) {

236 
	`lua_p›
(
L
, 3);

239 
	`£t2
(
L
, 
i
, 
j
);

241 
	`lua_øwgëi
(
L
, 1, 
u
-1);

242 
	`lua_øwgëi
(
L
, 1, 
i
);

243 
	`£t2
(
L
, 
u
-1, 
i
);

246 i‡(
i
-
l
 < 
u
-i) {

247 
j
=
l
; 
i
=i-1;Ü=i+2;

250 
j
=
i
+1; i=
u
; u=j-2;

252 
	`auxs‹t
(
L
, 
j
, 
i
);

254 
	}
}

256 
	$s‹t
 (
lua_Sèã
 *
L
) {

257 
n
 = 
	`aux_gën
(
L
, 1);

258 
	`luaL_check°ack
(
L
, 40, "");

259 i‡(!
	`lua_i¢⁄e‹nû
(
L
, 2))

260 
	`luaL_checkty≥
(
L
, 2, 
LUA_TFUNCTION
);

261 
	`lua_£â›
(
L
, 2);

262 
	`auxs‹t
(
L
, 1, 
n
);

264 
	}
}

269 c⁄° 
luaL_Reg
 
	gèb_funcs
[] = {

270 {"c⁄ˇt", 
tc⁄ˇt
},

271 {"f‹óch", 
f‹óch
},

272 {"f‹óchi", 
f‹óchi
},

273 {"gën", 
gën
},

274 {"maxn", 
maxn
},

275 {"ö£π", 
tö£π
},

276 {"ªmove", 
åemove
},

277 {"£ä", 
£ä
},

278 {"s‹t", 
s‹t
},

279 {
NULL
, NULL}

283 
LUALIB_API
 
	$lua›í_èbÀ
 (
lua_Sèã
 *
L
) {

284 
	`¥ötf
("debug: 3.luaopen_table\n");

285 
	`luaL_ªgi°î
(
L
, 
LUA_TABLIBNAME
, 
èb_funcs
);

287 
	}
}

	@src/ltm.c

8 
	~<°rög.h
>

10 
	#…m_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"lobje˘.h
"

16 
	~"l°©e.h
"

17 
	~"l°rög.h
"

18 
	~"…abÀ.h
"

19 
	~"…m.h
"

23 c⁄° *c⁄° 
	gluaT_ty≥«mes
[] = {

49 
	$luaT_öô
 (
lua_Sèã
 *
L
) {

50 c⁄° *c⁄° 
luaT_evíäame
[] = {

57 
i
;

58 
i
=0; i<
TM_N
; i++) {

59 
	`G
(
L
)->
tm«me
[
i
] = 
	`luaS_√w
(L, 
luaT_evíäame
[i]);

60 
	`luaS_fix
(
	`G
(
L
)->
tm«me
[
i
]);

62 
	}
}

69 c⁄° 
TVÆue
 *
	$luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
) {

70 c⁄° 
TVÆue
 *
tm
 = 
	`luaH_gë°r
(
evíts
, 
íame
);

71 
	`lua_as£π
(
evít
 <
TM_EQ
);

72 i‡(
	`âi¢û
(
tm
)) {

73 
evíts
->
Êags
 |
	`ˇ°_byã
(1u<<
evít
);

74  
NULL
;

76  
tm
;

77 
	}
}

80 c⁄° 
TVÆue
 *
	$luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
o
, 
TMS
 
evít
) {

81 
TabÀ
 *
mt
;

82 
	`ây≥
(
o
)) {

83 
LUA_TTABLE
:

84 
mt
 = 
	`hvÆue
(
o
)->
më©abÀ
;

86 
LUA_TUSERDATA
:

87 
mt
 = 
	`uvÆue
(
o
)->
më©abÀ
;

90 
mt
 = 
	`G
(
L
)->mt[
	`ây≥
(
o
)];

92  (
mt
 ? 
	`luaH_gë°r
(mt, 
	`G
(
L
)->
tm«me
[
evít
]Ë: 
luaO_nûobje˘
);

93 
	}
}

	@src/ltm.h

7 #i‚de‡
…m_h


8 
	#…m_h


	)

11 
	~"lobje˘.h
"

19 
	mTM_INDEX
,

20 
	mTM_NEWINDEX
,

21 
	mTM_GC
,

22 
	mTM_MODE
,

23 
	mTM_EQ
,

24 
	mTM_ADD
,

25 
	mTM_SUB
,

26 
	mTM_MUL
,

27 
	mTM_DIV
,

28 
	mTM_MOD
,

29 
	mTM_POW
,

30 
	mTM_UNM
,

31 
	mTM_LEN
,

32 
	mTM_LT
,

33 
	mTM_LE
,

34 
	mTM_CONCAT
,

35 
	mTM_CALL
,

36 
	mTM_N


37 } 
	tTMS
;

41 
	#gÁ°tm
(
g
,
ë
,
e
Ë(”tË=
NULL
 ? NULL : \

42 ((
ë
)->
Êags
 & (1u<<(
e
))Ë? 
NULL
 : 
	`luaT_gëtm
”t,É, (
g
)->
tm«me
[e]))

	)

44 
	#Á°tm
(
l
,
ë
,
e
Ë
	`gÁ°tm
(
	`G
÷),Ét,É)

	)

46 
LUAI_DATA
 c⁄° *c⁄° 
	gluaT_ty≥«mes
[];

49 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtm
 (
TabÀ
 *
evíts
, 
TMS
 
evít
, 
TSåög
 *
íame
);

50 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaT_gëtmbyobj
 (
lua_Sèã
 *
L
, c⁄° TVÆuê*
o
,

51 
TMS
 
evít
);

52 
LUAI_FUNC
 
luaT_öô
 (
lua_Sèã
 *
L
);

	@src/lua.c

8 
	~<sig«l.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	#lua_c


	)

15 
	~"lua.h
"

17 
	~"œuxlib.h
"

18 
	~"luÆib.h
"

22 
lua_Sèã
 *
	gglobÆL
 = 
NULL
;

24 c⁄° *
	g¥og«me
 = 
LUA_PROGNAME
;

28 
	$l°›
 (
lua_Sèã
 *
L
, 
lua_Debug
 *
¨
) {

29 ()
¨
;

30 
	`lua_£thook
(
L
, 
NULL
, 0, 0);

31 
	`luaL_îr‹
(
L
, "interrupted!");

32 
	}
}

35 
	$œ˘i⁄
 (
i
) {

36 
	`sig«l
(
i
, 
SIG_DFL
);

38 
	`lua_£thook
(
globÆL
, 
l°›
, 
LUA_MASKCALL
 | 
LUA_MASKRET
 | 
LUA_MASKCOUNT
, 1);

39 
	}
}

42 
	$¥öt_ußge
 () {

43 
	`Ârötf
(
°dîr
,

46 " -ê°©Éxecuã såög " 
	`LUA_QL
("stat") "\n"

47 " -»«mêÑequúêlibøry " 
	`LUA_QL
("name") "\n"

48 " -òÉ¡î i¡îa˘ivêmodêa·îÉxecutög " 
	`LUA_QL
("script") "\n"

53 
¥og«me
);

54 
	`fÊush
(
°dîr
);

55 
	}
}

58 
	$l_mesßge
 (c⁄° *
≤ame
, c⁄° *
msg
) {

59 i‡(
≤ame
Ë
	`Ârötf
(
°dîr
, "%s: ",Öname);

60 
	`Ârötf
(
°dîr
, "%s\n", 
msg
);

61 
	`fÊush
(
°dîr
);

62 
	}
}

65 
	$ªp‹t
 (
lua_Sèã
 *
L
, 
°©us
) {

66 i‡(
°©us
 && !
	`lua_i¢û
(
L
, -1)) {

67 c⁄° *
msg
 = 
	`lua_to°rög
(
L
, -1);

68 i‡(
msg
 =
NULL
) msg = "(error object isÇotá string)";

69 
	`l_mesßge
(
¥og«me
, 
msg
);

70 
	`lua_p›
(
L
, 1);

72  
°©us
;

73 
	}
}

76 
	$åa˚back
 (
lua_Sèã
 *
L
) {

77 i‡(!
	`lua_is°rög
(
L
, 1))

79 
	`lua_gëfõld
(
L
, 
LUA_GLOBALSINDEX
, "debug");

80 i‡(!
	`lua_i°abÀ
(
L
, -1)) {

81 
	`lua_p›
(
L
, 1);

84 
	`lua_gëfõld
(
L
, -1, "traceback");

85 i‡(!
	`lua_isfun˘i⁄
(
L
, -1)) {

86 
	`lua_p›
(
L
, 2);

89 
	`lua_pushvÆue
(
L
, 1);

90 
	`lua_pushöãgî
(
L
, 2);

91 
	`lua_ˇŒ
(
L
, 2, 1);

93 
	}
}

96 
	$doˇŒ
 (
lua_Sèã
 *
L
, 
«rg
, 
˛ór
) {

97 
	`¥ötf
("debug: in docall\n");

98 
°©us
;

99 
ba£
 = 
	`lua_gët›
(
L
Ë- 
«rg
;

100 
	`lua_pushcfun˘i⁄
(
L
, 
åa˚back
);

101 
	`lua_ö£π
(
L
, 
ba£
);

102 
	`sig«l
(
SIGINT
, 
œ˘i⁄
);

103 
°©us
 = 
	`lua_pˇŒ
(
L
, 
«rg
, (
˛ór
 ? 0 : 
LUA_MULTRET
), 
ba£
);

104 
	`sig«l
(
SIGINT
, 
SIG_DFL
);

105 
	`lua_ªmove
(
L
, 
ba£
);

107 i‡(
°©us
 !0Ë
	`lua_gc
(
L
, 
LUA_GCCOLLECT
, 0);

108  
°©us
;

109 
	}
}

112 
	$¥öt_vîsi⁄
 () {

113 
	`l_mesßge
(
NULL
, 
LUA_RELEASE
 " " 
LUA_COPYRIGHT
);

114 
	}
}

117 
	$gë¨gs
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

118 
«rg
;

119 
i
;

120 
¨gc
 = 0;

121 
¨gv
[
¨gc
])árgc++;

122 
«rg
 = 
¨gc
 - (
n
 + 1);

123 
	`luaL_check°ack
(
L
, 
«rg
 + 3, "too manyárgumentsÅo script");

124 
i
=
n
+1; i < 
¨gc
; i++)

125 
	`lua_push°rög
(
L
, 
¨gv
[
i
]);

126 
	`lua_¸óãèbÀ
(
L
, 
«rg
, 
n
 + 1);

127 
i
=0; i < 
¨gc
; i++) {

128 
	`lua_push°rög
(
L
, 
¨gv
[
i
]);

129 
	`lua_øw£ti
(
L
, -2, 
i
 - 
n
);

131  
«rg
;

132 
	}
}

135 
	$dofûe
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

136 
	`¥ötf
("debug: in dofile\n");

137 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
«me
Ë|| 
	`doˇŒ
(L, 0, 1);

138  
	`ªp‹t
(
L
, 
°©us
);

139 
	}
}

142 
	$do°rög
 (
lua_Sèã
 *
L
, c⁄° *
s
, c⁄° *
«me
) {

143 
	`¥ötf
("debug: in dostring\n");

144 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
s
, 
	`°æí
(s), 
«me
Ë|| 
	`doˇŒ
(L, 0, 1);

145  
	`ªp‹t
(
L
, 
°©us
);

146 
	}
}

149 
	$dﬁibøry
 (
lua_Sèã
 *
L
, c⁄° *
«me
) {

150 
	`lua_gëglobÆ
(
L
, "require");

151 
	`lua_push°rög
(
L
, 
«me
);

152  
	`ªp‹t
(
L
, 
	`doˇŒ
(L, 1, 1));

153 
	}
}

156 c⁄° *
	$gë_¥om±
 (
lua_Sèã
 *
L
, 
fú°löe
) {

157 c⁄° *
p
;

158 
	`lua_gëfõld
(
L
, 
LUA_GLOBALSINDEX
, 
fú°löe
 ? "_PROMPT" : "_PROMPT2");

159 
p
 = 
	`lua_to°rög
(
L
, -1);

160 i‡(
p
 =
NULL
Ë∞(
fú°löe
 ? 
LUA_PROMPT
 : 
LUA_PROMPT2
);

161 
	`lua_p›
(
L
, 1);

162  
p
;

163 
	}
}

166 
	$öcom∂ëe
 (
lua_Sèã
 *
L
, 
°©us
) {

167 i‡(
°©us
 =
LUA_ERRSYNTAX
) {

168 
size_t
 
lmsg
;

169 c⁄° *
msg
 = 
	`lua_tﬁ°rög
(
L
, -1, &
lmsg
);

170 c⁄° *
ç
 = 
msg
 + 
lmsg
 - ((
	`LUA_QL
("<eof>")) - 1);

171 i‡(
	`°r°r
(
msg
, 
	`LUA_QL
("<eof>")Ë=
ç
) {

172 
	`lua_p›
(
L
, 1);

177 
	}
}

180 
	$pushlöe
 (
lua_Sèã
 *
L
, 
fú°löe
) {

181 
buf„r
[
LUA_MAXINPUT
];

182 *
b
 = 
buf„r
;

183 
size_t
 
l
;

184 c⁄° *
¥mt
 = 
	`gë_¥om±
(
L
, 
fú°löe
);

185 i‡(
	`lua_ªadlöe
(
L
, 
b
, 
¥mt
) == 0)

187 
l
 = 
	`°æí
(
b
);

188 i‡(
l
 > 0 && 
b
[l-1] == '\n')

189 
b
[
l
-1] = '\0';

190 i‡(
fú°löe
 && 
b
[0] == '=')

191 
	`lua_pushf°rög
(
L
, "ªtu∫ %s", 
b
+1);

193 
	`lua_push°rög
(
L
, 
b
);

194 
	`lua_‰ìlöe
(
L
, 
b
);

196 
	}
}

199 
	$lﬂdlöe
 (
lua_Sèã
 *
L
) {

200 
°©us
;

201 
	`lua_£â›
(
L
, 0);

202 i‡(!
	`pushlöe
(
L
, 1))

205 
°©us
 = 
	`luaL_lﬂdbuf„r
(
L
, 
	`lua_to°rög
(L, 1), 
	`lua_°æí
(L, 1), "=stdin");

206 i‡(!
	`öcom∂ëe
(
L
, 
°©us
)) ;

207 i‡(!
	`pushlöe
(
L
, 0))

209 
	`lua_pushlôîÆ
(
L
, "\n");

210 
	`lua_ö£π
(
L
, -2);

211 
	`lua_c⁄ˇt
(
L
, 3);

213 
	`lua_ßvñöe
(
L
, 1);

214 
	`lua_ªmove
(
L
, 1);

215  
°©us
;

216 
	}
}

219 
	$dŸty
 (
lua_Sèã
 *
L
) {

220 
°©us
;

221 c⁄° *
ﬁd¥og«me
 = 
¥og«me
;

222 
¥og«me
 = 
NULL
;

223 (
°©us
 = 
	`lﬂdlöe
(
L
)) != -1) {

224 i‡(
°©us
 =0Ë°©u†
	`doˇŒ
(
L
, 0, 0);

225 
	`ªp‹t
(
L
, 
°©us
);

226 i‡(
°©us
 =0 && 
	`lua_gët›
(
L
) > 0) {

227 
	`lua_gëglobÆ
(
L
, "print");

228 
	`lua_ö£π
(
L
, 1);

229 i‡(
	`lua_pˇŒ
(
L
, 
	`lua_gët›
(L)-1, 0, 0) != 0)

230 
	`l_mesßge
(
¥og«me
, 
	`lua_pushf°rög
(
L
,

231 "îr‹ cÆlög " 
	`LUA_QL
("print") " (%s)",

232 
	`lua_to°rög
(
L
, -1)));

235 
	`lua_£â›
(
L
, 0);

236 
	`Âuts
("\n", 
°dout
);

237 
	`fÊush
(
°dout
);

238 
¥og«me
 = 
ﬁd¥og«me
;

239 
	}
}

242 
	$h™dÀ_s¸ùt
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

243 
°©us
;

244 c⁄° *
‚ame
;

245 
«rg
 = 
	`gë¨gs
(
L
, 
¨gv
, 
n
);

246 
	`lua_£tglobÆ
(
L
, "arg");

247 
‚ame
 = 
¨gv
[
n
];

248 i‡(
	`°rcmp
(
‚ame
, "-"Ë=0 && såcmp(
¨gv
[
n
-1], "--") != 0)

249 
‚ame
 = 
NULL
;

250 
°©us
 = 
	`luaL_lﬂdfûe
(
L
, 
‚ame
);

251 
	`lua_ö£π
(
L
, -(
«rg
+1));

252 i‡(
°©us
 == 0)

253 
°©us
 = 
	`doˇŒ
(
L
, 
«rg
, 0);

255 
	`lua_p›
(
L
, 
«rg
);

256  
	`ªp‹t
(
L
, 
°©us
);

257 
	}
}

261 
	#nŸaû
(
x
Ë{i‡((x)[2] !'\0'Ë -1;}

	)

264 
	$cﬁÀ˘¨gs
 (**
¨gv
, *
pi
, *
pv
, *
≥
) {

265 
i
;

266 
i
 = 1; 
¨gv
[i] !
NULL
; i++) {

267 i‡(
¨gv
[
i
][0] != '-')

268  
i
;

269 
¨gv
[
i
][1]) {

271 
	`nŸaû
(
¨gv
[
i
]);

272  (
¨gv
[
i
+1] !
NULL
 ? i+1 : 0);

274  
i
;

276 
	`nŸaû
(
¨gv
[
i
]);

277 *
pi
 = 1;

279 
	`nŸaû
(
¨gv
[
i
]);

280 *
pv
 = 1;

283 *
≥
 = 1;

285 i‡(
¨gv
[
i
][2] == '\0') {

286 
i
++;

287 i‡(
¨gv
[
i
] =
NULL
)  -1;

294 
	}
}

297 
	$ru«rgs
 (
lua_Sèã
 *
L
, **
¨gv
, 
n
) {

298 
i
;

299 
i
 = 1; i < 
n
; i++) {

300 i‡(
¨gv
[
i
] =
NULL
) ;

301 
	`lua_as£π
(
¨gv
[
i
][0] == '-');

302 
¨gv
[
i
][1]) {

304 c⁄° *
chunk
 = 
¨gv
[
i
] + 2;

305 i‡(*
chunk
 ='\0'Ëchunk = 
¨gv
[++
i
];

306 
	`lua_as£π
(
chunk
 !
NULL
);

307 i‡(
	`do°rög
(
L
, 
chunk
, "=(commandÜine)") != 0)

312 c⁄° *
fûíame
 = 
¨gv
[
i
] + 2;

313 i‡(*
fûíame
 ='\0'Ëfûíamê
¨gv
[++
i
];

314 
	`lua_as£π
(
fûíame
 !
NULL
);

315 i‡(
	`dﬁibøry
(
L
, 
fûíame
))

323 
	}
}

326 
	$h™dÀ_luaöô
 (
lua_Sèã
 *
L
) {

327 
	`¥ötf
("debug: in handle_luainit\n");

328 c⁄° *
öô
 = 
	`gëív
(
LUA_INIT
);

329 
	`¥ötf
("debug: inô = %s\n", 
öô
);

330 i‡(
öô
 =
NULL
)  0;

331 i‡(
öô
[0] == '@')

332  
	`dofûe
(
L
, 
öô
+1);

334  
	`do°rög
(
L
, 
öô
, "=" 
LUA_INIT
);

335 
	}
}

338 
	sSmaö
 {

339 
	m¨gc
;

340 **
	m¨gv
;

341 
	m°©us
;

345 
	$pmaö
 (
lua_Sèã
 *
L
) {

346 
	`¥ötf
("debug: inÖmain\n");

347 
Smaö
 *
s
 = (Smaö *)
	`lua_tou£rd©a
(
L
, 1);

348 **
¨gv
 = 
s
->argv;

349 
s¸ùt
;

350 
has_i
 = 0, 
has_v
 = 0, 
has_e
 = 0;

351 
globÆL
 = 
L
;

352 i‡(
¨gv
[0] &&árgv[0][0]Ë
¥og«me
 =árgv[0];

353 
	`lua_gc
(
L
, 
LUA_GCSTOP
, 0);

354 
	`luaL_›ílibs
(
L
);

355 
	`lua_gc
(
L
, 
LUA_GCRESTART
, 0);

356 
s
->
°©us
 = 
	`h™dÀ_luaöô
(
L
);

357 i‡(
s
->
°©us
 != 0)  0;

358 
s¸ùt
 = 
	`cﬁÀ˘¨gs
(
¨gv
, &
has_i
, &
has_v
, &
has_e
);

359 i‡(
s¸ùt
 < 0) {

360 
	`¥öt_ußge
();

361 
s
->
°©us
 = 1;

364 i‡(
has_v
Ë
	`¥öt_vîsi⁄
();

365 
s
->
°©us
 = 
	`ru«rgs
(
L
, 
¨gv
, (
s¸ùt
 > 0Ë? s¸ùà: s->
¨gc
);

366 i‡(
s
->
°©us
 != 0)  0;

367 i‡(
s¸ùt
)

368 
s
->
°©us
 = 
	`h™dÀ_s¸ùt
(
L
, 
¨gv
, 
s¸ùt
);

369 i‡(
s
->
°©us
 != 0)  0;

370 i‡(
has_i
)

371 
	`dŸty
(
L
);

372 i‡(
s¸ùt
 =0 && !
has_e
 && !
has_v
) {

373 i‡(
	`lua_°dö_is_ây
()) {

374 
	`¥öt_vîsi⁄
();

375 
	`dŸty
(
L
);

377 
	`dofûe
(
L
, 
NULL
);

380 
	}
}

383 
	$maö
 (
¨gc
, **
¨gv
) {

384 
	`¥ötf
("debug:árg¯%d\n", 
¨gc
);

385 
i
 = 0; i < 
¨gc
; ++i)

387 
	`¥ötf
("debug:árgv[%d] = %s\n", 
i
, 
¨gv
[i]);

389 
°©us
;

390 
Smaö
 
s
;

391 
lua_Sèã
 *
L
 = 
	`lua_›í
();

392 i‡(
L
 =
NULL
) {

393 
	`l_mesßge
(
¨gv
[0], "cannot create state:ÇotÉnough memory");

394  
EXIT_FAILURE
;

396 
s
.
¨gc
 =árgc;

397 
s
.
¨gv
 =árgv;

398 
°©us
 = 
	`lua_˝ˇŒ
(
L
, &
pmaö
, &
s
);

399 
	`ªp‹t
(
L
, 
°©us
);

400 
	`lua_˛o£
(
L
);

401  (
°©us
 || 
s
.°©usË? 
EXIT_FAILURE
 : 
EXIT_SUCCESS
;

402 
	}
}

	@src/lua.h

9 #i‚de‡
lua_h


10 
	#lua_h


	)

12 
	~<°d¨g.h
>

13 
	~<°ddef.h
>

16 
	~"luac⁄f.h
"

19 
	#LUA_VERSION
 "Lu®5.1"

	)

20 
	#LUA_RELEASE
 "Lu®5.1.5"

	)

21 
	#LUA_VERSION_NUM
 501

	)

22 
	#LUA_COPYRIGHT
 "C›yrighà(CË1994-2012 Lua.‹g, PUC-Rio"

	)

23 
	#LUA_AUTHORS
 "R. Iîußlimschy, L. H. dêFigueúedÿ& W. Cñes"

	)

27 
	#LUA_SIGNATURE
 "\033Lua"

	)

30 
	#LUA_MULTRET
 (-1)

	)

36 
	#LUA_REGISTRYINDEX
 (-10000)

	)

37 
	#LUA_ENVIRONINDEX
 (-10001)

	)

38 
	#LUA_GLOBALSINDEX
 (-10002)

	)

39 
	#lua_upvÆueödex
(
i
Ë(
LUA_GLOBALSINDEX
-(i))

	)

43 
	#LUA_YIELD
 1

	)

44 
	#LUA_ERRRUN
 2

	)

45 
	#LUA_ERRSYNTAX
 3

	)

46 
	#LUA_ERRMEM
 4

	)

47 
	#LUA_ERRERR
 5

	)

50 
lua_Sèã
 
	tlua_Sèã
;

52 (*
	tlua_CFun˘i⁄
Ë(
	tlua_Sèã
 *
	tL
);

58 c⁄° * (*
	tlua_Ródî
Ë(
	tlua_Sèã
 *
	tL
, *
	tud
, 
	tsize_t
 *
	tsz
);

60 (*
	tlua_Wrôî
Ë(
	tlua_Sèã
 *
	tL
, c⁄° * 
	tp
, 
	tsize_t
 
	tsz
, * 
	tud
);

67 * (*
	tlua_AŒoc
Ë(*
	tud
, *
	t±r
, 
	tsize_t
 
	tosize
, size_à
	tnsize
);

73 
	#LUA_TNONE
 (-1)

	)

75 
	#LUA_TNIL
 0

	)

76 
	#LUA_TBOOLEAN
 1

	)

77 
	#LUA_TLIGHTUSERDATA
 2

	)

78 
	#LUA_TNUMBER
 3

	)

79 
	#LUA_TSTRING
 4

	)

80 
	#LUA_TTABLE
 5

	)

81 
	#LUA_TFUNCTION
 6

	)

82 
	#LUA_TUSERDATA
 7

	)

83 
	#LUA_TTHREAD
 8

	)

88 
	#LUA_MINSTACK
 20

	)

94 #i‡
	`deföed
(
LUA_USER_H
)

95 #ö˛udê
LUA_USER_H


100 
LUA_NUMBER
 
	tlua_Numbî
;

104 
LUA_INTEGER
 
	tlua_I¡egî
;

111 
LUA_API
 
lua_Sèã
 *(
lua_√w°©e
Ë(
lua_AŒoc
 
f
, *
ud
);

112 
LUA_API
 (
lua_˛o£
Ë(
lua_Sèã
 *
L
);

113 
LUA_API
 
lua_Sèã
 *(
lua_√wthªad
Ë÷ua_Sèã *
L
);

115 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_©∑nic
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
∑nicf
);

121 
LUA_API
 (
lua_gët›
Ë(
lua_Sèã
 *
L
);

122 
LUA_API
 (
lua_£â›
Ë(
lua_Sèã
 *
L
, 
idx
);

123 
LUA_API
 (
lua_pushvÆue
Ë(
lua_Sèã
 *
L
, 
idx
);

124 
LUA_API
 (
lua_ªmove
Ë(
lua_Sèã
 *
L
, 
idx
);

125 
LUA_API
 (
lua_ö£π
Ë(
lua_Sèã
 *
L
, 
idx
);

126 
LUA_API
 (
lua_ª∂a˚
Ë(
lua_Sèã
 *
L
, 
idx
);

127 
LUA_API
 (
lua_check°ack
Ë(
lua_Sèã
 *
L
, 
sz
);

129 
LUA_API
 (
lua_xmove
Ë(
lua_Sèã
 *
‰om
,Üua_Sèã *
to
, 
n
);

136 
LUA_API
 (
lua_i¢umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

137 
LUA_API
 (
lua_is°rög
Ë(
lua_Sèã
 *
L
, 
idx
);

138 
LUA_API
 (
lua_iscfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

139 
LUA_API
 (
lua_isu£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

140 
LUA_API
 (
lua_ty≥
Ë(
lua_Sèã
 *
L
, 
idx
);

141 
LUA_API
 c⁄° *(
lua_ty≥«me
Ë(
lua_Sèã
 *
L
, 
ç
);

143 
LUA_API
 (
lua_equÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

144 
LUA_API
 (
lua_øwequÆ
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

145 
LUA_API
 (
lua_Às°h™
Ë(
lua_Sèã
 *
L
, 
idx1
, 
idx2
);

147 
LUA_API
 
	$lua_Numbî
 (
lua_t⁄umbî
Ë(
lua_Sèã
 *
L
, 
idx
);

148 
LUA_API
 
	$lua_I¡egî
 (
lua_toöãgî
Ë(
lua_Sèã
 *
L
, 
idx
);

149 
LUA_API
 (
lua_toboﬁón
Ë(
lua_Sèã
 *
L
, 
idx
);

150 
LUA_API
 c⁄° *(
lua_tﬁ°rög
Ë(
lua_Sèã
 *
L
, 
idx
, 
size_t
 *
Àn
);

151 
LUA_API
 
	$size_t
 (
lua_objÀn
Ë(
lua_Sèã
 *
L
, 
idx
);

152 
LUA_API
 
	$lua_CFun˘i⁄
 (
lua_tocfun˘i⁄
Ë(
lua_Sèã
 *
L
, 
idx
);

153 
LUA_API
 *(
lua_tou£rd©a
Ë(
lua_Sèã
 *
L
, 
idx
);

154 
LUA_API
 
lua_Sèã
 *(
lua_tŸhªad
Ë÷ua_Sèã *
L
, 
idx
);

155 
LUA_API
 c⁄° *(
lua_t›oöãr
Ë(
lua_Sèã
 *
L
, 
idx
);

161 
LUA_API
 (
lua_pushnû
Ë(
lua_Sèã
 *
L
);

162 
LUA_API
 (
lua_pushnumbî
Ë(
lua_Sèã
 *
L
, 
lua_Numbî
 
n
);

163 
LUA_API
 (
lua_pushöãgî
Ë(
lua_Sèã
 *
L
, 
lua_I¡egî
 
n
);

164 
LUA_API
 (
lua_pushl°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
, 
size_t
 
l
);

165 
LUA_API
 (
lua_push°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
s
);

166 
LUA_API
 c⁄° *(
lua_pushvf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
,

167 
va_li°
 
¨gp
);

168 
LUA_API
 c⁄° *(
lua_pushf°rög
Ë(
lua_Sèã
 *
L
, c⁄° *
fmt
, ...);

169 
LUA_API
 (
lua_pushc˛osuª
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
‚
, 
n
);

170 
LUA_API
 (
lua_pushboﬁón
Ë(
lua_Sèã
 *
L
, 
b
);

171 
LUA_API
 (
lua_pushlightu£rd©a
Ë(
lua_Sèã
 *
L
, *
p
);

172 
LUA_API
 (
lua_pushthªad
Ë(
lua_Sèã
 *
L
);

178 
LUA_API
 (
lua_gëèbÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

179 
LUA_API
 (
lua_gëfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

180 
LUA_API
 (
lua_øwgë
Ë(
lua_Sèã
 *
L
, 
idx
);

181 
LUA_API
 (
lua_øwgëi
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

182 
LUA_API
 (
lua_¸óãèbÀ
Ë(
lua_Sèã
 *
L
, 
«º
, 
ƒec
);

183 
LUA_API
 *(
lua_√wu£rd©a
Ë(
lua_Sèã
 *
L
, 
size_t
 
sz
);

184 
LUA_API
 (
lua_gëmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

185 
LUA_API
 (
lua_gë„nv
Ë(
lua_Sèã
 *
L
, 
idx
);

191 
LUA_API
 (
lua_£âabÀ
Ë(
lua_Sèã
 *
L
, 
idx
);

192 
LUA_API
 (
lua_£tfõld
Ë(
lua_Sèã
 *
L
, 
idx
, c⁄° *
k
);

193 
LUA_API
 (
lua_øw£t
Ë(
lua_Sèã
 *
L
, 
idx
);

194 
LUA_API
 (
lua_øw£ti
Ë(
lua_Sèã
 *
L
, 
idx
, 
n
);

195 
LUA_API
 (
lua_£tmë©abÀ
Ë(
lua_Sèã
 *
L
, 
objödex
);

196 
LUA_API
 (
lua_£t„nv
Ë(
lua_Sèã
 *
L
, 
idx
);

202 
LUA_API
 (
lua_ˇŒ
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
);

203 
LUA_API
 (
lua_pˇŒ
Ë(
lua_Sèã
 *
L
, 
«rgs
, 
ƒesu…s
, 
îrfunc
);

204 
LUA_API
 (
lua_˝ˇŒ
Ë(
lua_Sèã
 *
L
, 
lua_CFun˘i⁄
 
func
, *
ud
);

205 
LUA_API
 (
lua_lﬂd
Ë(
lua_Sèã
 *
L
, 
lua_Ródî
 
ªadî
, *
dt
,

206 c⁄° *
chunk«me
);

208 
LUA_API
 (
lua_dump
Ë(
lua_Sèã
 *
L
, 
lua_Wrôî
 
wrôî
, *
d©a
);

214 
LUA_API
 (
lua_yõld
Ë(
lua_Sèã
 *
L
, 
ƒesu…s
);

215 
LUA_API
 (
lua_ªsume
Ë(
lua_Sèã
 *
L
, 
«rg
);

216 
LUA_API
 (
lua_°©us
Ë(
lua_Sèã
 *
L
);

222 
	#LUA_GCSTOP
 0

	)

223 
	#LUA_GCRESTART
 1

	)

224 
	#LUA_GCCOLLECT
 2

	)

225 
	#LUA_GCCOUNT
 3

	)

226 
	#LUA_GCCOUNTB
 4

	)

227 
	#LUA_GCSTEP
 5

	)

228 
	#LUA_GCSETPAUSE
 6

	)

229 
	#LUA_GCSETSTEPMUL
 7

	)

231 
LUA_API
 (
lua_gc
Ë(
lua_Sèã
 *
L
, 
wh©
, 
d©a
);

238 
LUA_API
 (
lua_îr‹
Ë(
lua_Sèã
 *
L
);

240 
LUA_API
 (
lua_√xt
Ë(
lua_Sèã
 *
L
, 
idx
);

242 
LUA_API
 (
lua_c⁄ˇt
Ë(
lua_Sèã
 *
L
, 
n
);

244 
LUA_API
 
	$lua_AŒoc
 (
lua_gëÆlocf
Ë(
lua_Sèã
 *
L
, **
ud
);

245 
LUA_API
 
	`lua_£èŒocf
 (
lua_Sèã
 *
L
, 
lua_AŒoc
 
f
, *
ud
);

255 
	#lua_p›
(
L
,
n
Ë
	`lua_£â›
(L, -“)-1)

	)

257 
	#lua_√wèbÀ
(
L
Ë
	`lua_¸óãèbÀ
(L, 0, 0)

	)

259 
	#lua_ªgi°î
(
L
,
n
,
f
Ë(
	`lua_pushcfun˘i⁄
(L, (f)), 
	`lua_£tglobÆ
(L, (n)))

	)

261 
	#lua_pushcfun˘i⁄
(
L
,
f
Ë
	`lua_pushc˛osuª
(L, (f), 0)

	)

263 
	#lua_°æí
(
L
,
i
Ë
	`lua_objÀn
(L, (i))

	)

265 
	#lua_isfun˘i⁄
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TFUNCTION
)

	)

266 
	#lua_i°abÀ
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTABLE
)

	)

267 
	#lua_i¶ightu£rd©a
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TLIGHTUSERDATA
)

	)

268 
	#lua_i¢û
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNIL
)

	)

269 
	#lua_isboﬁón
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TBOOLEAN
)

	)

270 
	#lua_i°hªad
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TTHREAD
)

	)

271 
	#lua_i¢⁄e
(
L
,
n
Ë(
	`lua_ty≥
(L, (n)Ë=
LUA_TNONE
)

	)

272 
	#lua_i¢⁄e‹nû
(
L
, 
n
Ë(
	`lua_ty≥
(L, (n)Ë<0)

	)

274 
	#lua_pushlôîÆ
(
L
, 
s
) \

275 
	`lua_pushl°rög
(
L
, "" 
s
, ((s)/())-1)

	)

277 
	#lua_£tglobÆ
(
L
,
s
Ë
	`lua_£tfõld
(L, 
LUA_GLOBALSINDEX
, (s))

	)

278 
	#lua_gëglobÆ
(
L
,
s
Ë
	`lua_gëfõld
(L, 
LUA_GLOBALSINDEX
, (s))

	)

280 
	#lua_to°rög
(
L
,
i
Ë
	`lua_tﬁ°rög
(L, (i), 
NULL
)

	)

288 
	#lua_›í
(Ë
	`luaL_√w°©e
()

	)

290 
	#lua_gëªgi°ry
(
L
Ë
	`lua_pushvÆue
(L, 
LUA_REGISTRYINDEX
)

	)

292 
	#lua_gëgccou¡
(
L
Ë
	`lua_gc
(L, 
LUA_GCCOUNT
, 0)

	)

294 
	#lua_Chunkªadî
 
lua_Ródî


	)

295 
	#lua_Chunkwrôî
 
lua_Wrôî


	)

299 
LUA_API
 
	`lua_£éevñ
 (
lua_Sèã
 *
‰om
,Üua_Sèã *
to
);

312 
	#LUA_HOOKCALL
 0

	)

313 
	#LUA_HOOKRET
 1

	)

314 
	#LUA_HOOKLINE
 2

	)

315 
	#LUA_HOOKCOUNT
 3

	)

316 
	#LUA_HOOKTAILRET
 4

	)

322 
	#LUA_MASKCALL
 (1 << 
LUA_HOOKCALL
)

	)

323 
	#LUA_MASKRET
 (1 << 
LUA_HOOKRET
)

	)

324 
	#LUA_MASKLINE
 (1 << 
LUA_HOOKLINE
)

	)

325 
	#LUA_MASKCOUNT
 (1 << 
LUA_HOOKCOUNT
)

	)

327 
lua_Debug
 
	tlua_Debug
;

331 (*
	tlua_Hook
Ë(
	tlua_Sèã
 *
	tL
, 
	tlua_Debug
 *
	t¨
);

334 
LUA_API
 
	`lua_gë°ack
 (
lua_Sèã
 *
L
, 
Àvñ
, 
lua_Debug
 *
¨
);

335 
LUA_API
 
	`lua_gëöfo
 (
lua_Sèã
 *
L
, c⁄° *
wh©
, 
lua_Debug
 *
¨
);

336 
LUA_API
 c⁄° *
	`lua_gëloˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

337 
LUA_API
 c⁄° *
	`lua_£éoˇl
 (
lua_Sèã
 *
L
, c⁄° 
lua_Debug
 *
¨
, 
n
);

338 
LUA_API
 c⁄° *
	`lua_gëupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
);

339 
LUA_API
 c⁄° *
	`lua_£tupvÆue
 (
lua_Sèã
 *
L
, 
funcödex
, 
n
);

341 
LUA_API
 
	`lua_£thook
 (
lua_Sèã
 *
L
, 
lua_Hook
 
func
, 
mask
, 
cou¡
);

342 
LUA_API
 
lua_Hook
 
	`lua_gëhook
 (
lua_Sèã
 *
L
);

343 
LUA_API
 
	`lua_gëhookmask
 (
lua_Sèã
 *
L
);

344 
LUA_API
 
	`lua_gëhookcou¡
 (
lua_Sèã
 *
L
);

347 
	slua_Debug
 {

348 
evít
;

349 c⁄° *
«me
;

350 c⁄° *
«mewh©
;

351 c⁄° *
wh©
;

352 c⁄° *
sour˚
;

353 
cuºíéöe
;

354 
nups
;

355 
löedeföed
;

356 
œ°löedeföed
;

357 
sh‹t_§c
[
LUA_IDSIZE
];

359 
i_ci
;

	@src/luac.c

7 
	~<î∫o.h
>

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#luac_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

16 
	~"œuxlib.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lmem.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"l°rög.h
"

24 
	~"lundump.h
"

26 
	#PROGNAME
 "luac"

	)

27 
	#OUTPUT
 
PROGNAME
 ".out"

	)

29 
	gli°ög
=0;

30 
	gdumpög
=1;

31 
	g°rùpög
=0;

32 
	gOuçut
[]={ 
OUTPUT
 };

33 c⁄° * 
	gouçut
=
Ouçut
;

34 c⁄° * 
	g¥og«me
=
PROGNAME
;

36 
	$Áèl
(c⁄° * 
mesßge
)

38 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

39 
	`exô
(
EXIT_FAILURE
);

40 
	}
}

42 
	$ˇ¬Ÿ
(c⁄° * 
wh©
)

44 
	`Ârötf
(
°dîr
,"%s: c™nŸ %†%s: %s\n",
¥og«me
,
wh©
,
ouçut
,
	`°ªº‹
(
î∫o
));

45 
	`exô
(
EXIT_FAILURE
);

46 
	}
}

48 
	$ußge
(c⁄° * 
mesßge
)

50 i‡(*
mesßge
=='-')

51 
	`Ârötf
(
°dîr
,"%s: uƒecognized o±i⁄ " 
LUA_QS
 "\n",
¥og«me
,
mesßge
);

53 
	`Ârötf
(
°dîr
,"%s: %s\n",
¥og«me
,
mesßge
);

54 
	`Ârötf
(
°dîr
,

59 " -ÿ«mê ouçuàtÿfûê" 
	`LUA_QL
("name") " (default is \"%s\")\n"

64 
¥og«me
,
Ouçut
);

65 
	`exô
(
EXIT_FAILURE
);

66 
	}
}

68 
	#IS
(
s
Ë(
	`°rcmp
(
¨gv
[
i
],s)==0)

	)

70 
	$dﬂrgs
(
¨gc
, * 
¨gv
[])

72 
i
;

73 
vîsi⁄
=0;

74 i‡(
¨gv
[0]!=
NULL
 && *¨gv[0]!=0Ë
¥og«me
=argv[0];

75 
i
=1; i<
¨gc
; i++)

77 i‡(*
¨gv
[
i
]!='-')

79 i‡(
	`IS
("--"))

81 ++
i
;

82 i‡(
vîsi⁄
) ++version;

85 i‡(
	`IS
("-"))

87 i‡(
	`IS
("-l"))

88 ++
li°ög
;

89 i‡(
	`IS
("-o"))

91 
ouçut
=
¨gv
[++
i
];

92 i‡(
ouçut
==
NULL
 || *ouçut==0Ë
	`ußge
(
	`LUA_QL
("-o") "Çeedsárgument");

93 i‡(
	`IS
("-")Ë
ouçut
=
NULL
;

95 i‡(
	`IS
("-p"))

96 
dumpög
=0;

97 i‡(
	`IS
("-s"))

98 
°rùpög
=1;

99 i‡(
	`IS
("-v"))

100 ++
vîsi⁄
;

102 
	`ußge
(
¨gv
[
i
]);

104 i‡(
i
==
¨gc
 && (
li°ög
 || !
dumpög
))

106 
dumpög
=0;

107 
¨gv
[--
i
]=
Ouçut
;

109 i‡(
vîsi⁄
)

111 
	`¥ötf
("%† %s\n",
LUA_RELEASE
,
LUA_COPYRIGHT
);

112 i‡(
vîsi⁄
==
¨gc
-1Ë
	`exô
(
EXIT_SUCCESS
);

114  
i
;

115 
	}
}

117 
	#t›rŸo
(
L
,
i
Ë(
	`˛vÆue
(L->
t›
+(i))->
l
.
p
)

	)

119 c⁄° 
PrŸo
* 
	$comböe
(
lua_Sèã
* 
L
, 
n
)

121 i‡(
n
==1)

122  
	`t›rŸo
(
L
,-1);

125 
i
,
pc
;

126 
PrŸo
* 
f
=
	`luaF_√w¥Ÿo
(
L
);

127 
	`£çtvÆue2s
(
L
,L->
t›
,
f
); 
	`ö¸_t›
(L);

128 
f
->
sour˚
=
	`luaS_√wlôîÆ
(
L
,"=(" 
PROGNAME
 ")");

129 
f
->
max°acksize
=1;

130 
pc
=2*
n
+1;

131 
f
->
code
=
	`luaM_√wve˘‹
(
L
,
pc
,
In°ru˘i⁄
);

132 
f
->
sizecode
=
pc
;

133 
f
->
p
=
	`luaM_√wve˘‹
(
L
,
n
,
PrŸo
*);

134 
f
->
sizï
=
n
;

135 
pc
=0;

136 
i
=0; i<
n
; i++)

138 
f
->
p
[
i
]=
	`t›rŸo
(
L
,i-
n
-1);

139 
f
->
code
[
pc
++]=
	`CREATE_ABx
(
OP_CLOSURE
,0,
i
);

140 
f
->
code
[
pc
++]=
	`CREATE_ABC
(
OP_CALL
,0,1,1);

142 
f
->
code
[
pc
++]=
	`CREATE_ABC
(
OP_RETURN
,0,1,0);

143  
f
;

145 
	}
}

147 
	$wrôî
(
lua_Sèã
* 
L
, c⁄° * 
p
, 
size_t
 
size
, * 
u
)

149 
	`UNUSED
(
L
);

150  (
	`fwrôe
(
p
,
size
,1,(
FILE
*)
u
)!=1) && (size!=0);

151 
	}
}

153 
	sSmaö
 {

154 
	m¨gc
;

155 ** 
	m¨gv
;

158 
	$pmaö
(
lua_Sèã
* 
L
)

160 
Smaö
* 
s
 = (Smaö*)
	`lua_tou£rd©a
(
L
, 1);

161 
¨gc
=
s
->argc;

162 ** 
¨gv
=
s
->argv;

163 c⁄° 
PrŸo
* 
f
;

164 
i
;

165 i‡(!
	`lua_check°ack
(
L
,
¨gc
)Ë
	`Áèl
("too many input files");

166 
i
=0; i<
¨gc
; i++)

168 c⁄° * 
fûíame
=
	`IS
("-"Ë? 
NULL
 : 
¨gv
[
i
];

169 i‡(
	`luaL_lﬂdfûe
(
L
,
fûíame
)!=0Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

171 
f
=
	`comböe
(
L
,
¨gc
);

172 i‡(
li°ög
Ë
	`luaU_¥öt
(
f
,listing>1);

173 i‡(
dumpög
)

175 
FILE
* 
D
(
ouçut
==
NULL
Ë? 
°dout
 : 
	`f›í
(output,"wb");

176 i‡(
D
==
NULL
Ë
	`ˇ¬Ÿ
("open");

177 
	`lua_lock
(
L
);

178 
	`luaU_dump
(
L
,
f
,
wrôî
,
D
,
°rùpög
);

179 
	`lua_u∆ock
(
L
);

180 i‡(
	`„º‹
(
D
)Ë
	`ˇ¬Ÿ
("write");

181 i‡(
	`f˛o£
(
D
)Ë
	`ˇ¬Ÿ
("close");

184 
	}
}

186 
	$maö
(
¨gc
, * 
¨gv
[])

188 
lua_Sèã
* 
L
;

189 
Smaö
 
s
;

190 
i
=
	`dﬂrgs
(
¨gc
,
¨gv
);

191 
¨gc
-=
i
; 
¨gv
+=i;

192 i‡(
¨gc
<=0Ë
	`ußge
("no input files given");

193 
L
=
	`lua_›í
();

194 i‡(
L
==
NULL
Ë
	`Áèl
("notÉnough memory for state");

195 
s
.
¨gc
=argc;

196 
s
.
¨gv
=argv;

197 i‡(
	`lua_˝ˇŒ
(
L
,
pmaö
,&
s
)!=0Ë
	`Áèl
(
	`lua_to°rög
(L,-1));

198 
	`lua_˛o£
(
L
);

199  
EXIT_SUCCESS
;

200 
	}
}

	@src/luaconf.h

8 #i‚de‡
lc⁄fig_h


9 
	#lc⁄fig_h


	)

11 
	~<limôs.h
>

12 
	~<°ddef.h
>

27 #i‡
deföed
(
__STRICT_ANSI__
)

28 
	#LUA_ANSI


	)

32 #i‡!
deföed
(
LUA_ANSI
Ë&& deföed(
_WIN32
)

33 
	#LUA_WIN


	)

36 #i‡
deföed
(
LUA_USE_LINUX
)

37 
	#LUA_USE_POSIX


	)

38 
	#LUA_USE_DLOPEN


	)

39 
	#LUA_USE_READLINE


	)

42 #i‡
deföed
(
LUA_USE_MACOSX
)

43 
	#LUA_USE_POSIX


	)

44 
	#LUA_DL_DYLD


	)

54 #i‡
deföed
(
LUA_USE_POSIX
)

55 
	#LUA_USE_MKSTEMP


	)

56 
	#LUA_USE_ISATTY


	)

57 
	#LUA_USE_POPEN


	)

58 
	#LUA_USE_ULONGJMP


	)

69 
	#LUA_PATH
 "LUA_PATH"

	)

70 
	#LUA_CPATH
 "LUA_CPATH"

	)

71 
	#LUA_INIT
 "LUA_INIT"

	)

83 #i‡
deföed
(
_WIN32
)

88 
	#LUA_LDIR
 "!\\lua\\"

	)

89 
	#LUA_CDIR
 "!\\"

	)

90 
	#LUA_PATH_DEFAULT
 \

91 ".\\?.lua;" 
LUA_LDIR
"?.lua;" LUA_LDIR"?\\init.lua;" \

92 
LUA_CDIR
"?.lua;" LUA_CDIR"?\\öô.lua"

	)

93 
	#LUA_CPATH_DEFAULT
 \

94 ".\\?.dŒ;" 
LUA_CDIR
"?.dŒ;" LUA_CDIR"lﬂdÆl.dŒ"

	)

97 
	#LUA_ROOT
 "/u§/loˇl/"

	)

98 
	#LUA_LDIR
 
LUA_ROOT
 "sh¨e/lua/5.1/"

	)

99 
	#LUA_CDIR
 
LUA_ROOT
 "lib/lua/5.1/"

	)

100 
	#LUA_PATH_DEFAULT
 \

101 "./?.lua;" 
LUA_LDIR
"?.lua;" LUA_LDIR"?/init.lua;" \

102 
LUA_CDIR
"?.lua;" LUA_CDIR"?/öô.lua"

	)

103 
	#LUA_CPATH_DEFAULT
 \

104 "./?.so;" 
LUA_CDIR
"?.so;" LUA_CDIR"lﬂdÆl.so"

	)

113 #i‡
deföed
(
_WIN32
)

114 
	#LUA_DIRSEP
 "\\"

	)

116 
	#LUA_DIRSEP
 "/"

	)

132 
	#LUA_PATHSEP
 ";"

	)

133 
	#LUA_PATH_MARK
 "?"

	)

134 
	#LUA_EXECDIR
 "!"

	)

135 
	#LUA_IGMARK
 "-"

	)

143 
	#LUA_INTEGER
 
±rdiff_t


	)

154 #i‡
deföed
(
LUA_BUILD_AS_DLL
)

156 #i‡
deföed
(
LUA_CORE
Ë|| deföed(
LUA_LIB
)

157 
	#LUA_API
 
	`__de˛•ec
(
dŒexp‹t
)

	)

159 
	#LUA_API
 
	`__de˛•ec
(
dŒimp‹t
)

	)

164 
	#LUA_API
 

	)

169 
	#LUALIB_API
 
LUA_API


	)

181 #i‡
deföed
(
luØŒ_c
)

182 
	#LUAI_FUNC
 

	)

183 
	#LUAI_DATA


	)

185 #ñi‡
deföed
(
__GNUC__
Ë&& ((__GNUC__*100 + 
__GNUC_MINOR__
) >= 302) && \

186 
	$deföed
(
__ELF__
)

187 
	#LUAI_FUNC
 
	`__©åibuã__
((
	`visibûôy
("hiddí"))Ë

	)

188 
	#LUAI_DATA
 
LUAI_FUNC


	)

191 
	#LUAI_FUNC
 

	)

192 
	#LUAI_DATA
 

	)

201 
	#LUA_QL
(
x
Ë"'" x "'"

	)

202 
	#LUA_QS
 
	`LUA_QL
("%s")

	)

210 
	#LUA_IDSIZE
 60

	)

219 #i‡
	`deföed
(
lua_c
Ë|| deföed(
luØŒ_c
)

227 #i‡
	`deföed
(
LUA_USE_ISATTY
)

228 
	~<uni°d.h
>

229 
	#lua_°dö_is_ây
(Ë
	`ißây
(0)

	)

230 #ñi‡
	`deföed
(
LUA_WIN
)

231 
	~<io.h
>

232 
	~<°dio.h
>

233 
	#lua_°dö_is_ây
(Ë
	`_ißây
(
	`_fûío
(
°dö
))

	)

235 
	#lua_°dö_is_ây
(Ë1

	)

245 
	#LUA_PROMPT
 "> "

	)

246 
	#LUA_PROMPT2
 ">> "

	)

254 
	#LUA_PROGNAME
 "lua"

	)

262 
	#LUA_MAXINPUT
 512

	)

273 #i‡
	`deföed
(
LUA_USE_READLINE
)

274 
	~<°dio.h
>

275 
	~<ªadlöe/ªadlöe.h
>

276 
	~<ªadlöe/hi°‹y.h
>

277 
	#lua_ªadlöe
(
L
,
b
,
p
Ë(()L, ((b)=
	`ªadlöe
’)Ë!
NULL
)

	)

278 
	#lua_ßvñöe
(
L
,
idx
) \

279 i‡(
	`lua_°æí
(
L
,
idx
) > 0) \

280 
	`add_hi°‹y
(
	`lua_to°rög
(
L
, 
idx
));

	)

281 
	#lua_‰ìlöe
(
L
,
b
Ë(()L, 
	`‰ì
(b))

	)

283 
	#lua_ªadlöe
(
L
,
b
,
p
) \

284 (()
L
, 
	`Âuts
(
p
, 
°dout
), 
	`fÊush
(stdout), \

285 
	`fgës
(
b
, 
LUA_MAXINPUT
, 
°dö
Ë!
NULL
Ë

	)

286 
	#lua_ßvñöe
(
L
,
idx
Ë{ ()L; ()idx; 
	}

	)
}

287 
	#lua_‰ìlöe
(
L
,
b
Ë{ ()L; ()b; }

	)

302 
	#LUAI_GCPAUSE
 200

	)

313 
	#LUAI_GCMUL
 200

	)

322 #unde‡
LUA_COMPAT_GETN


329 #unde‡
LUA_COMPAT_LOADLIB


336 
	#LUA_COMPAT_VARARG


	)

343 
	#LUA_COMPAT_MOD


	)

351 
	#LUA_COMPAT_LSTR
 1

	)

358 
	#LUA_COMPAT_GFIND


	)

366 
	#LUA_COMPAT_OPENLIB


	)

377 #i‡
deföed
(
LUA_USE_APICHECK
)

378 
	~<as£π.h
>

379 
	#luai_≠icheck
(
L
,
o
Ë{ ()L; 
	`as£π
(o); }

	)

381 
	#luai_≠icheck
(
L
,
o
Ë{ ()L; }

	)

391 #i‡
INT_MAX
-20 < 32760

392 
	#LUAI_BITSINT
 16

	)

393 #ñi‡
INT_MAX
 > 2147483640L

395 
	#LUAI_BITSINT
 32

	)

413 #i‡
LUAI_BITSINT
 >= 32

414 
	#LUAI_UINT32
 

	)

415 
	#LUAI_INT32
 

	)

416 
	#LUAI_MAXINT32
 
INT_MAX


	)

417 
	#LUAI_UMEM
 
size_t


	)

418 
	#LUAI_MEM
 
±rdiff_t


	)

421 
	#LUAI_UINT32
 

	)

422 
	#LUAI_INT32
 

	)

423 
	#LUAI_MAXINT32
 
LONG_MAX


	)

424 
	#LUAI_UMEM
 

	)

425 
	#LUAI_MEM
 

	)

435 
	#LUAI_MAXCALLS
 20000

	)

446 
	#LUAI_MAXCSTACK
 8000

	)

468 
	#LUAI_MAXCCALLS
 200

	)

475 
	#LUAI_MAXVARS
 200

	)

482 
	#LUAI_MAXUPVALUES
 60

	)

488 
	#LUAL_BUFFERSIZE
 
BUFSIZ


	)

504 
	#LUA_NUMBER_DOUBLE


	)

505 
	#LUA_NUMBER
 

	)

511 
	#LUAI_UACNUMBER
 

	)

521 
	#LUA_NUMBER_SCAN
 "%lf"

	)

522 
	#LUA_NUMBER_FMT
 "%.14g"

	)

523 
	#lua_numbî2°r
(
s
,
n
Ë
	`•rötf
((s), 
LUA_NUMBER_FMT
, (n))

	)

524 
	#LUAI_MAXNUMBER2STR
 32

	)

525 
	#lua_°r2numbî
(
s
,
p
Ë
	`°πod
((s), (p)Ë

	)

531 #i‡
deföed
(
LUA_CORE
)

532 
	~<m©h.h
>

533 
	#luai_numadd
(
a
,
b
Ë(◊)+(b))

	)

534 
	#luai_numsub
(
a
,
b
Ë(◊)-(b))

	)

535 
	#luai_nummul
(
a
,
b
Ë(◊)*(b))

	)

536 
	#luai_numdiv
(
a
,
b
Ë(◊)/(b))

	)

537 
	#luai_nummod
(
a
,
b
Ë(◊Ë- 
	`Êo‹
(◊)/(b))*(b))

	)

538 
	#luai_numpow
(
a
,
b
Ë(
	`pow
◊,b))

	)

539 
	#luai_numunm
(
a
Ë(-◊))

	)

540 
	#luai_numeq
(
a
,
b
Ë(◊)==(b))

	)

541 
	#luai_num…
(
a
,
b
Ë(◊)<(b))

	)

542 
	#luai_numÀ
(
a
,
b
Ë(◊)<=(b))

	)

543 
	#luai_numi¢™
(
a
Ë(!
	`luai_numeq
(◊), (a)))

	)

557 #i‡
deföed
(
LUA_NUMBER_DOUBLE
Ë&& !deföed(
LUA_ANSI
Ë&& !deföed(
__SSE2__
) && \

558 (
deföed
(
__i386
Ë|| deföed (
_M_IX86
Ë|| 
	$deföed
(
__i386__
))

561 #i‡
	`deföed
(
_MSC_VER
)

563 
	#lua_numbî2öt
(
i
,
d
Ë
__asm
 
Êd
 d __asm 
fi°p
 
	)
i

564 
	#lua_numbî2öãgî
(
i
,
n
Ë
	`lua_numbî2öt
(i,Ç)

	)

570 
	uluai_Ca°
 { 
l_d
; 
l_l
; };

571 
	#lua_numbî2öt
(
i
,
d
) \

572 { vﬁ©ûê
luai_Ca°
 
u
; u.
l_d
 = (
d
Ë+ 6755399441055744.0; (
i
Ëu.
l_l
; 
	}

	)
}

573 
	#lua_numbî2öãgî
(
i
,
n
Ë
	`lua_numbî2öt
(i,Ç)

	)

580 
	#lua_numbî2öt
(
i
,
d
Ë((i)=()(d))

	)

581 
	#lua_numbî2öãgî
(
i
,
d
Ë((i)=(
lua_I¡egî
)(d))

	)

595 
	#LUAI_USER_ALIGNMENT_T
 uni⁄ { 
u
; *
s
; 
l
; }

	)

606 #i‡
deföed
(
__˝lu•lus
)

608 
	#LUAI_THROW
(
L
,
c
Ë
	`throw
(c)

	)

609 
	#LUAI_TRY
(
L
,
c
,
a
Ë
åy
 {á } 
	`ˇtch
(...) \

610 { i‡((
c
)->
°©us
 =0Ë(c)->°©u†-1; }

	)

611 
	#luai_jmpbuf
 

	)

613 #ñi‡
deföed
(
LUA_USE_ULONGJMP
)

615 
	#LUAI_THROW
(
L
,
c
Ë
	`_l⁄gjmp
((c)->
b
, 1)

	)

616 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`_£tjmp
((c)->
b
Ë=0Ë{á }

	)

617 
	#luai_jmpbuf
 
jmp_buf


	)

621 
	#LUAI_THROW
(
L
,
c
Ë
	`l⁄gjmp
((c)->
b
, 1)

	)

622 
	#LUAI_TRY
(
L
,
c
,
a
Ëi‡(
	`£tjmp
((c)->
b
Ë=0Ë{á }

	)

623 
	#luai_jmpbuf
 
jmp_buf


	)

633 
	#LUA_MAXCAPTURES
 32

	)

644 #i‡
deföed
(
lo¶ib_c
Ë|| deföed(
luØŒ_c
)

646 #i‡
deföed
(
LUA_USE_MKSTEMP
)

647 
	~<uni°d.h
>

648 
	#LUA_TMPNAMBUFSIZE
 32

	)

649 
	#lua_tm≤am
(
b
,
e
) { \

650 
	`°r˝y
(
b
, "/tmp/lua_XXXXXX"); \

651 
e
 = 
	`mk°emp
(
b
); \

652 i‡(
e
 !-1Ë
	`˛o£
(e); \

653 
e
 = (ê=-1); }

	)

656 
	#LUA_TMPNAMBUFSIZE
 
L_tm≤am


	)

657 
	#lua_tm≤am
(
b
,
e
Ë{É = (
	`tm≤am
(bË=
NULL
); }

	)

668 #i‡
deföed
(
LUA_USE_POPEN
)

670 
	#lua_p›í
(
L
,
c
,
m
Ë(()L, 
	`fÊush
(
NULL
), 
	`p›í
(c,m))

	)

671 
	#lua_p˛o£
(
L
,
fûe
Ë(()L, (
	`p˛o£
(fûeË!-1))

	)

673 #ñi‡
deföed
(
LUA_WIN
)

675 
	#lua_p›í
(
L
,
c
,
m
Ë(()L, 
	`_p›í
(c,m))

	)

676 
	#lua_p˛o£
(
L
,
fûe
Ë(()L, (
	`_p˛o£
(fûeË!-1))

	)

680 
	#lua_p›í
(
L
,
c
,
m
) (()(()c, m), \

681 
	`luaL_îr‹
(
L
, 
	`LUA_QL
("p›í"Ë"ÇŸ suµ‹ãd"), (
FILE
*)0)

	)

682 
	#lua_p˛o£
(
L
,
fûe
Ë(()(()L, fûe), 0)

	)

700 #i‡
deföed
(
LUA_USE_DLOPEN
)

701 
	#LUA_DL_DLOPEN


	)

704 #i‡
deföed
(
LUA_WIN
)

705 
	#LUA_DL_DLL


	)

715 
	#LUAI_EXTRASPACE
 0

	)

723 
	#luai_u£r°©e›í
(
L
Ë(()L)

	)

724 
	#luai_u£r°©e˛o£
(
L
Ë(()L)

	)

725 
	#luai_u£r°©ëhªad
(
L
,
L1
Ë(()L)

	)

726 
	#luai_u£r°©e‰ì
(
L
Ë(()L)

	)

727 
	#luai_u£r°©îesume
(
L
,
n
Ë(()L)

	)

728 
	#luai_u£r°©eyõld
(
L
,
n
Ë(()L)

	)

739 #i‡
deföed
(
LUA_USELONGLONG
)

741 
	#LUA_INTFRMLEN
 "Œ"

	)

742 
	#LUA_INTFRM_T
 

	)

746 
	#LUA_INTFRMLEN
 "l"

	)

747 
	#LUA_INTFRM_T
 

	)

	@src/lualib.h

8 #i‚de‡
luÆib_h


9 
	#luÆib_h


	)

11 
	~"lua.h
"

15 
	#LUA_FILEHANDLE
 "FILE*"

	)

18 
	#LUA_COLIBNAME
 "c‹outöe"

	)

19 
LUALIB_API
 (
lua›í_ba£
Ë(
lua_Sèã
 *
L
);

21 
	#LUA_TABLIBNAME
 "èbÀ"

	)

22 
LUALIB_API
 (
lua›í_èbÀ
Ë(
lua_Sèã
 *
L
);

24 
	#LUA_IOLIBNAME
 "io"

	)

25 
LUALIB_API
 (
lua›í_io
Ë(
lua_Sèã
 *
L
);

27 
	#LUA_OSLIBNAME
 "os"

	)

28 
LUALIB_API
 (
lua›í_os
Ë(
lua_Sèã
 *
L
);

30 
	#LUA_STRLIBNAME
 "°rög"

	)

31 
LUALIB_API
 (
lua›í_°rög
Ë(
lua_Sèã
 *
L
);

33 
	#LUA_MATHLIBNAME
 "m©h"

	)

34 
LUALIB_API
 (
lua›í_m©h
Ë(
lua_Sèã
 *
L
);

36 
	#LUA_DBLIBNAME
 "debug"

	)

37 
LUALIB_API
 (
lua›í_debug
Ë(
lua_Sèã
 *
L
);

39 
	#LUA_LOADLIBNAME
 "∑ckage"

	)

40 
LUALIB_API
 (
lua›í_∑ckage
Ë(
lua_Sèã
 *
L
);

44 
LUALIB_API
 (
luaL_›ílibs
Ë(
lua_Sèã
 *
L
);

48 #i‚de‡
lua_as£π


49 
	#lua_as£π
(
x
Ë(()0)

	)

	@src/lundump.c

7 
	~<°rög.h
>

9 
	#lundump_c


	)

10 
	#LUA_CORE


	)

12 
	~"lua.h
"

14 
	~"ldebug.h
"

15 
	~"ldo.h
"

16 
	~"lfunc.h
"

17 
	~"lmem.h
"

18 
	~"lobje˘.h
"

19 
	~"l°rög.h
"

20 
	~"lundump.h
"

21 
	~"lzio.h
"

24 
lua_Sèã
* 
	mL
;

25 
ZIO
* 
	mZ
;

26 
Mbuf„r
* 
	mb
;

27 c⁄° * 
	m«me
;

28 } 
	tLﬂdSèã
;

30 #ifde‡
LUAC_TRUST_BINARIES


31 
	#IF
(
c
,
s
)

	)

32 
	#îr‹
(
S
,
s
)

	)

34 
	#IF
(
c
,
s
Ëi‡(cË
	`îr‹
(
S
,s)

	)

36 
	$îr‹
(
LﬂdSèã
* 
S
, c⁄° * 
why
)

38 
	`luaO_pushf°rög
(
S
->
L
,"%s: %†öÖªcompûed chunk",S->
«me
,
why
);

39 
	`luaD_throw
(
S
->
L
,
LUA_ERRSYNTAX
);

40 
	}
}

43 
	#LﬂdMem
(
S
,
b
,
n
,
size
Ë
	`LﬂdBlock
(S,b,“)*(size))

	)

44 
	#LﬂdByã
(
S
Ë(
lu_byã
)
	`LﬂdCh¨
(S)

	)

45 
	#LﬂdV¨
(
S
,
x
Ë
	`LﬂdMem
(S,&x,1,(x))

	)

46 
	#LﬂdVe˘‹
(
S
,
b
,
n
,
size
Ë
	`LﬂdMem
(S,b,n,size)

	)

48 
	$LﬂdBlock
(
LﬂdSèã
* 
S
, * 
b
, 
size_t
 
size
)

50 
size_t
 
r
=
	`luaZ_ªad
(
S
->
Z
,
b
,
size
);

51 
	`IF
 (
r
!=0, "unexpectedÉnd");

52 
	}
}

54 
	$LﬂdCh¨
(
LﬂdSèã
* 
S
)

56 
x
;

57 
	`LﬂdV¨
(
S
,
x
);

58  
x
;

59 
	}
}

61 
	$LﬂdI¡
(
LﬂdSèã
* 
S
)

63 
x
;

64 
	`LﬂdV¨
(
S
,
x
);

65 
	`IF
 (
x
<0, "bad integer");

66  
x
;

67 
	}
}

69 
lua_Numbî
 
	$LﬂdNumbî
(
LﬂdSèã
* 
S
)

71 
lua_Numbî
 
x
;

72 
	`LﬂdV¨
(
S
,
x
);

73  
x
;

74 
	}
}

76 
TSåög
* 
	$LﬂdSåög
(
LﬂdSèã
* 
S
)

78 
size_t
 
size
;

79 
	`LﬂdV¨
(
S
,
size
);

80 i‡(
size
==0)

81  
NULL
;

84 * 
s
=
	`luaZ_›í•a˚
(
S
->
L
,S->
b
,
size
);

85 
	`LﬂdBlock
(
S
,
s
,
size
);

86  
	`luaS_√wl°r
(
S
->
L
,
s
,
size
-1);

88 
	}
}

90 
	$LﬂdCode
(
LﬂdSèã
* 
S
, 
PrŸo
* 
f
)

92 
n
=
	`LﬂdI¡
(
S
);

93 
f
->
code
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
In°ru˘i⁄
);

94 
f
->
sizecode
=
n
;

95 
	`LﬂdVe˘‹
(
S
,
f
->
code
,
n
,(
In°ru˘i⁄
));

96 
	}
}

98 
PrŸo
* 
LﬂdFun˘i⁄
(
LﬂdSèã
* 
S
, 
TSåög
* 
p
);

100 
	$LﬂdC⁄°™ts
(
LﬂdSèã
* 
S
, 
PrŸo
* 
f
)

102 
i
,
n
;

103 
n
=
	`LﬂdI¡
(
S
);

104 
f
->
k
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
TVÆue
);

105 
f
->
sizek
=
n
;

106 
i
=0; i<
n
; i++Ë
	`£äûvÆue
(&
f
->
k
[i]);

107 
i
=0; i<
n
; i++)

109 
TVÆue
* 
o
=&
f
->
k
[
i
];

110 
t
=
	`LﬂdCh¨
(
S
);

111 
t
)

113 
LUA_TNIL
:

114 
	`£äûvÆue
(
o
);

116 
LUA_TBOOLEAN
:

117 
	`£tbvÆue
(
o
,
	`LﬂdCh¨
(
S
)!=0);

119 
LUA_TNUMBER
:

120 
	`£ävÆue
(
o
,
	`LﬂdNumbî
(
S
));

122 
LUA_TSTRING
:

123 
	`£tsvÆue2n
(
S
->
L
,
o
,
	`LﬂdSåög
(S));

126 
	`îr‹
(
S
,"bad constant");

130 
n
=
	`LﬂdI¡
(
S
);

131 
f
->
p
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
PrŸo
*);

132 
f
->
sizï
=
n
;

133 
i
=0; i<
n
; i++Ë
f
->
p
[i]=
NULL
;

134 
i
=0; i<
n
; i++Ë
f
->
p
[i]=
	`LﬂdFun˘i⁄
(
S
,f->
sour˚
);

135 
	}
}

137 
	$LﬂdDebug
(
LﬂdSèã
* 
S
, 
PrŸo
* 
f
)

139 
i
,
n
;

140 
n
=
	`LﬂdI¡
(
S
);

141 
f
->
löeöfo
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,);

142 
f
->
sizñöeöfo
=
n
;

143 
	`LﬂdVe˘‹
(
S
,
f
->
löeöfo
,
n
,());

144 
n
=
	`LﬂdI¡
(
S
);

145 
f
->
locv¨s
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
LocV¨
);

146 
f
->
sizñocv¨s
=
n
;

147 
i
=0; i<
n
; i++Ë
f
->
locv¨s
[i].
v¨«me
=
NULL
;

148 
i
=0; i<
n
; i++)

150 
f
->
locv¨s
[
i
].
v¨«me
=
	`LﬂdSåög
(
S
);

151 
f
->
locv¨s
[
i
].
°¨çc
=
	`LﬂdI¡
(
S
);

152 
f
->
locv¨s
[
i
].
ídpc
=
	`LﬂdI¡
(
S
);

154 
n
=
	`LﬂdI¡
(
S
);

155 
f
->
upvÆues
=
	`luaM_√wve˘‹
(
S
->
L
,
n
,
TSåög
*);

156 
f
->
sizeupvÆues
=
n
;

157 
i
=0; i<
n
; i++Ë
f
->
upvÆues
[i]=
NULL
;

158 
i
=0; i<
n
; i++Ë
f
->
upvÆues
[i]=
	`LﬂdSåög
(
S
);

159 
	}
}

161 
PrŸo
* 
	$LﬂdFun˘i⁄
(
LﬂdSèã
* 
S
, 
TSåög
* 
p
)

163 
PrŸo
* 
f
;

164 i‡(++
S
->
L
->
nCˇŒs
 > 
LUAI_MAXCCALLS
Ë
	`îr‹
(S,"codeÅoo deep");

165 
f
=
	`luaF_√w¥Ÿo
(
S
->
L
);

166 
	`£çtvÆue2s
(
S
->
L
,S->L->
t›
,
f
); 
	`ö¸_t›
(S->L);

167 
f
->
sour˚
=
	`LﬂdSåög
(
S
); i‡(f->sour˚==
NULL
Ëf->sour˚=
p
;

168 
f
->
löedeföed
=
	`LﬂdI¡
(
S
);

169 
f
->
œ°löedeföed
=
	`LﬂdI¡
(
S
);

170 
f
->
nups
=
	`LﬂdByã
(
S
);

171 
f
->
num∑øms
=
	`LﬂdByã
(
S
);

172 
f
->
is_v¨¨g
=
	`LﬂdByã
(
S
);

173 
f
->
max°acksize
=
	`LﬂdByã
(
S
);

174 
	`LﬂdCode
(
S
,
f
);

175 
	`LﬂdC⁄°™ts
(
S
,
f
);

176 
	`LﬂdDebug
(
S
,
f
);

177 
	`IF
 (!
	`luaG_checkcode
(
f
), "bad code");

178 
S
->
L
->
t›
--;

179 
S
->
L
->
nCˇŒs
--;

180  
f
;

181 
	}
}

183 
	$LﬂdHódî
(
LﬂdSèã
* 
S
)

185 
h
[
LUAC_HEADERSIZE
];

186 
s
[
LUAC_HEADERSIZE
];

187 
	`luaU_hódî
(
h
);

188 
	`LﬂdBlock
(
S
,
s
,
LUAC_HEADERSIZE
);

189 
	`IF
 (
	`memcmp
(
h
,
s
,
LUAC_HEADERSIZE
)!=0, "bad header");

190 
	}
}

195 
PrŸo
* 
	$luaU_undump
 (
lua_Sèã
* 
L
, 
ZIO
* 
Z
, 
Mbuf„r
* 
buff
, c⁄° * 
«me
)

197 
LﬂdSèã
 
S
;

198 i‡(*
«me
=='@' || *name=='=')

199 
S
.
«me
=name+1;

200 i‡(*
«me
==
LUA_SIGNATURE
[0])

201 
S
.
«me
="binary string";

203 
S
.
«me
=name;

204 
S
.
L
=L;

205 
S
.
Z
=Z;

206 
S
.
b
=
buff
;

207 
	`LﬂdHódî
(&
S
);

208  
	`LﬂdFun˘i⁄
(&
S
,
	`luaS_√wlôîÆ
(
L
,"=?"));

209 
	}
}

214 
	$luaU_hódî
 (* 
h
)

216 
x
=1;

217 
	`mem˝y
(
h
,
LUA_SIGNATURE
,(LUA_SIGNATURE)-1);

218 
h
+=(
LUA_SIGNATURE
)-1;

219 *
h
++=()
LUAC_VERSION
;

220 *
h
++=()
LUAC_FORMAT
;

221 *
h
++=()*(*)&
x
;

222 *
h
++=()();

223 *
h
++=()(
size_t
);

224 *
h
++=()(
In°ru˘i⁄
);

225 *
h
++=()(
lua_Numbî
);

226 *
h
++=()(((
lua_Numbî
)0.5)==0);

227 
	}
}

	@src/lundump.h

7 #i‚de‡
lundump_h


8 
	#lundump_h


	)

10 
	~"lobje˘.h
"

11 
	~"lzio.h
"

14 
LUAI_FUNC
 
PrŸo
* 
luaU_undump
 (
lua_Sèã
* 
L
, 
ZIO
* 
Z
, 
Mbuf„r
* 
buff
, c⁄° * 
«me
);

17 
LUAI_FUNC
 
luaU_hódî
 (* 
h
);

20 
LUAI_FUNC
 
luaU_dump
 (
lua_Sèã
* 
L
, c⁄° 
PrŸo
* 
f
, 
lua_Wrôî
 
w
, * 
d©a
, 
°rù
);

22 #ifde‡
luac_c


24 
LUAI_FUNC
 
luaU_¥öt
 (c⁄° 
PrŸo
* 
f
, 
fuŒ
);

28 
	#LUAC_VERSION
 0x51

	)

31 
	#LUAC_FORMAT
 0

	)

34 
	#LUAC_HEADERSIZE
 12

	)

	@src/lvm.c

8 
	~<°dio.h
>

9 
	~<°dlib.h
>

10 
	~<°rög.h
>

12 
	#lvm_c


	)

13 
	#LUA_CORE


	)

15 
	~"lua.h
"

17 
	~"ldebug.h
"

18 
	~"ldo.h
"

19 
	~"lfunc.h
"

20 
	~"lgc.h
"

21 
	~"lobje˘.h
"

22 
	~"l›codes.h
"

23 
	~"l°©e.h
"

24 
	~"l°rög.h
"

25 
	~"…abÀ.h
"

26 
	~"…m.h
"

27 
	~"lvm.h
"

30 
	#MAXTAGLOOP
 100

	)

33 c⁄° 
TVÆue
 *
	$luaV_t⁄umbî
 (c⁄° 
TVÆue
 *
obj
, TVÆuê*
n
) {

34 
lua_Numbî
 
num
;

35 i‡(
	`âi¢umbî
(
obj
))  obj;

36 i‡(
	`âis°rög
(
obj
Ë&& 
	`luaO_°r2d
(
	`svÆue
(obj), &
num
)) {

37 
	`£ävÆue
(
n
, 
num
);

38  
n
;

41  
NULL
;

42 
	}
}

45 
	$luaV_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
) {

46 i‡(!
	`âi¢umbî
(
obj
))

49 
s
[
LUAI_MAXNUMBER2STR
];

50 
lua_Numbî
 
n
 = 
	`nvÆue
(
obj
);

51 
	`lua_numbî2°r
(
s
, 
n
);

52 
	`£tsvÆue2s
(
L
, 
obj
, 
	`luaS_√w
(L, 
s
));

55 
	}
}

58 
	$åa˚exec
 (
lua_Sèã
 *
L
, c⁄° 
In°ru˘i⁄
 *
pc
) {

59 
lu_byã
 
mask
 = 
L
->
hookmask
;

60 c⁄° 
In°ru˘i⁄
 *
ﬁdpc
 = 
L
->
ßvedpc
;

61 
L
->
ßvedpc
 = 
pc
;

62 i‡((
mask
 & 
LUA_MASKCOUNT
Ë&& 
L
->
hookcou¡
 == 0) {

63 
	`ª£thookcou¡
(
L
);

64 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKCOUNT
, -1);

66 i‡(
mask
 & 
LUA_MASKLINE
) {

67 
PrŸo
 *
p
 = 
	`ci_func
(
L
->
ci
)->
l
.p;

68 
≈c
 = 
	`pcRñ
(
pc
, 
p
);

69 
√wlöe
 = 
	`gëlöe
(
p
, 
≈c
);

72 i‡(
≈c
 =0 || 
pc
 <
ﬁdpc
 || 
√wlöe
 !
	`gëlöe
(
p
, 
	`pcRñ
(oldpc,Ö)))

73 
	`luaD_ˇŒhook
(
L
, 
LUA_HOOKLINE
, 
√wlöe
);

75 
	}
}

78 
	$ˇŒTMªs
 (
lua_Sèã
 *
L
, 
StkId
 
ªs
, c⁄° 
TVÆue
 *
f
,

79 c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
) {

80 
±rdiff_t
 
ªsu…
 = 
	`ßve°ack
(
L
, 
ªs
);

81 
	`£tobj2s
(
L
, L->
t›
, 
f
);

82 
	`£tobj2s
(
L
, L->
t›
+1, 
p1
);

83 
	`£tobj2s
(
L
, L->
t›
+2, 
p2
);

84 
	`luaD_check°ack
(
L
, 3);

85 
L
->
t›
 += 3;

86 
	`luaD_ˇŒ
(
L
, L->
t›
 - 3, 1);

87 
ªs
 = 
	`ª°‹e°ack
(
L
, 
ªsu…
);

88 
L
->
t›
--;

89 
	`£tobjs2s
(
L
, 
ªs
, L->
t›
);

90 
	}
}

94 
	$ˇŒTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
f
, c⁄° TVÆuê*
p1
,

95 c⁄° 
TVÆue
 *
p2
, c⁄° TVÆuê*
p3
) {

96 
	`£tobj2s
(
L
, L->
t›
, 
f
);

97 
	`£tobj2s
(
L
, L->
t›
+1, 
p1
);

98 
	`£tobj2s
(
L
, L->
t›
+2, 
p2
);

99 
	`£tobj2s
(
L
, L->
t›
+3, 
p3
);

100 
	`luaD_check°ack
(
L
, 4);

101 
L
->
t›
 += 4;

102 
	`luaD_ˇŒ
(
L
, L->
t›
 - 4, 0);

103 
	}
}

110 
	$luaV_gëèbÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
) {

111 
lo›
;

112 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

113 c⁄° 
TVÆue
 *
tm
;

114 i‡(
	`âi°abÀ
(
t
)) {

115 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

116 c⁄° 
TVÆue
 *
ªs
 = 
	`luaH_gë
(
h
, 
key
);

117 i‡(!
	`âi¢û
(
ªs
) ||

118 (
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_INDEX
)Ë=
NULL
) {

119 
	`£tobj2s
(
L
, 
vÆ
, 
ªs
);

124 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_INDEX
)))

125 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

126 i‡(
	`âisfun˘i⁄
(
tm
)) {

127 
	`ˇŒTMªs
(
L
, 
vÆ
, 
tm
, 
t
, 
key
);

130 
t
 = 
tm
;

132 
	`luaG_ru√º‹
(
L
, "loop in gettable");

133 
	}
}

144 
	$luaV_£âabÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
, 
StkId
 
vÆ
) {

145 
lo›
;

146 
TVÆue
 
ãmp
;

147 
lo›
 = 0;Üo› < 
MAXTAGLOOP
;Üoop++) {

148 c⁄° 
TVÆue
 *
tm
;

149 i‡(
	`âi°abÀ
(
t
)) {

150 
TabÀ
 *
h
 = 
	`hvÆue
(
t
);

151 
TVÆue
 *
ﬁdvÆ
 = 
	`luaH_£t
(
L
, 
h
, 
key
);

152 i‡(!
	`âi¢û
(
ﬁdvÆ
) ||

153 (
tm
 = 
	`Á°tm
(
L
, 
h
->
më©abÀ
, 
TM_NEWINDEX
)Ë=
NULL
) {

154 
	`£tobj2t
(
L
, 
ﬁdvÆ
, 
vÆ
);

155 
h
->
Êags
 = 0;

156 
	`luaC_b¨rõπ
(
L
, 
h
, 
vÆ
);

161 i‡(
	`âi¢û
(
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
t
, 
TM_NEWINDEX
)))

162 
	`luaG_ty≥îr‹
(
L
, 
t
, "index");

163 i‡(
	`âisfun˘i⁄
(
tm
)) {

164 
	`ˇŒTM
(
L
, 
tm
, 
t
, 
key
, 
vÆ
);

168 
	`£tobj
(
L
, &
ãmp
, 
tm
);

169 
t
 = &
ãmp
;

171 
	`luaG_ru√º‹
(
L
, "loop in settable");

172 
	}
}

175 
	$ˇŒ_böTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

176 
StkId
 
ªs
, 
TMS
 
evít
) {

177 c⁄° 
TVÆue
 *
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

178 i‡(
	`âi¢û
(
tm
))

179 
tm
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

180 i‡(
	`âi¢û
(
tm
))  0;

181 
	`ˇŒTMªs
(
L
, 
ªs
, 
tm
, 
p1
, 
p2
);

183 
	}
}

186 c⁄° 
TVÆue
 *
	$gë_compTM
 (
lua_Sèã
 *
L
, 
TabÀ
 *
mt1
, TabÀ *
mt2
,

187 
TMS
 
evít
) {

188 c⁄° 
TVÆue
 *
tm1
 = 
	`Á°tm
(
L
, 
mt1
, 
evít
);

189 c⁄° 
TVÆue
 *
tm2
;

190 i‡(
tm1
 =
NULL
)  NULL;

191 i‡(
mt1
 =
mt2
Ë 
tm1
;

192 
tm2
 = 
	`Á°tm
(
L
, 
mt2
, 
evít
);

193 i‡(
tm2
 =
NULL
)  NULL;

194 i‡(
	`luaO_øwequÆObj
(
tm1
, 
tm2
))

195  
tm1
;

196  
NULL
;

197 
	}
}

200 
	$ˇŒ_‹dîTM
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
p1
, c⁄° TVÆuê*
p2
,

201 
TMS
 
evít
) {

202 c⁄° 
TVÆue
 *
tm1
 = 
	`luaT_gëtmbyobj
(
L
, 
p1
, 
evít
);

203 c⁄° 
TVÆue
 *
tm2
;

204 i‡(
	`âi¢û
(
tm1
))  -1;

205 
tm2
 = 
	`luaT_gëtmbyobj
(
L
, 
p2
, 
evít
);

206 i‡(!
	`luaO_øwequÆObj
(
tm1
, 
tm2
))

208 
	`ˇŒTMªs
(
L
, L->
t›
, 
tm1
, 
p1
, 
p2
);

209  !
	`l_isÁl£
(
L
->
t›
);

210 
	}
}

213 
	$l_°rcmp
 (c⁄° 
TSåög
 *
ls
, c⁄° TSåög *
rs
) {

214 c⁄° *
l
 = 
	`gë°r
(
ls
);

215 
size_t
 
Œ
 = 
ls
->
tsv
.
Àn
;

216 c⁄° *
r
 = 
	`gë°r
(
rs
);

217 
size_t
 
Ã
 = 
rs
->
tsv
.
Àn
;

219 
ãmp
 = 
	`°rcﬁl
(
l
, 
r
);

220 i‡(
ãmp
 != 0) Åemp;

222 
size_t
 
Àn
 = 
	`°æí
(
l
);

223 i‡(
Àn
 =
Ã
)

224  (
Àn
 =
Œ
) ? 0 : 1;

225 i‡(
Àn
 =
Œ
)

228 
Àn
++;

229 
l
 +
Àn
; 
Œ
 -Àn; 
r
 +Àn; 
Ã
 -=Üen;

232 
	}
}

235 
	$luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

236 
ªs
;

237 i‡(
	`ây≥
(
l
Ë!ây≥(
r
))

238  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

239 i‡(
	`âi¢umbî
(
l
))

240  
	`luai_num…
(
	`nvÆue
(
l
),ÇvÆue(
r
));

241 i‡(
	`âis°rög
(
l
))

242  
	`l_°rcmp
(
	`øwtsvÆue
(
l
),ÑawtsvÆue(
r
)) < 0;

243 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
l
, 
r
, 
TM_LT
)) != -1)

244  
ªs
;

245  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

246 
	}
}

249 
	$Às£quÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
) {

250 
ªs
;

251 i‡(
	`ây≥
(
l
Ë!ây≥(
r
))

252  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

253 i‡(
	`âi¢umbî
(
l
))

254  
	`luai_numÀ
(
	`nvÆue
(
l
),ÇvÆue(
r
));

255 i‡(
	`âis°rög
(
l
))

256  
	`l_°rcmp
(
	`øwtsvÆue
(
l
),ÑawtsvÆue(
r
)) <= 0;

257 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
l
, 
r
, 
TM_LE
)) != -1)

258  
ªs
;

259 i‡((
ªs
 = 
	`ˇŒ_‹dîTM
(
L
, 
r
, 
l
, 
TM_LT
)) != -1)

260  !
ªs
;

261  
	`luaG_‹dîîr‹
(
L
, 
l
, 
r
);

262 
	}
}

265 
	$luaV_equÆvÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
) {

266 c⁄° 
TVÆue
 *
tm
;

267 
	`lua_as£π
(
	`ây≥
(
t1
Ë=ây≥(
t2
));

268 
	`ây≥
(
t1
)) {

269 
LUA_TNIL
:  1;

270 
LUA_TNUMBER
:  
	`luai_numeq
(
	`nvÆue
(
t1
),ÇvÆue(
t2
));

271 
LUA_TBOOLEAN
:  
	`bvÆue
(
t1
Ë=bvÆue(
t2
);

272 
LUA_TLIGHTUSERDATA
:  
	`pvÆue
(
t1
Ë=pvÆue(
t2
);

273 
LUA_TUSERDATA
: {

274 i‡(
	`uvÆue
(
t1
Ë=uvÆue(
t2
))  1;

275 
tm
 = 
	`gë_compTM
(
L
, 
	`uvÆue
(
t1
)->
më©abÀ
, uvÆue(
t2
)->metatable,

276 
TM_EQ
);

279 
LUA_TTABLE
: {

280 i‡(
	`hvÆue
(
t1
Ë=hvÆue(
t2
))  1;

281 
tm
 = 
	`gë_compTM
(
L
, 
	`hvÆue
(
t1
)->
më©abÀ
, hvÆue(
t2
)->më©abÀ, 
TM_EQ
);

284 :  
	`gcvÆue
(
t1
Ë=gcvÆue(
t2
);

286 i‡(
tm
 =
NULL
)  0;

287 
	`ˇŒTMªs
(
L
, L->
t›
, 
tm
, 
t1
, 
t2
);

288  !
	`l_isÁl£
(
L
->
t›
);

289 
	}
}

292 
	$luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
, 
œ°
) {

294 
StkId
 
t›
 = 
L
->
ba£
 + 
œ°
 + 1;

295 
n
 = 2;

296 i‡(!(
	`âis°rög
(
t›
-2Ë|| 
	`âi¢umbî
—›-2)Ë|| !
	`to°rög
(
L
,Åop-1)) {

297 i‡(!
	`ˇŒ_böTM
(
L
, 
t›
-2,Å›-1,Å›-2, 
TM_CONCAT
))

298 
	`luaG_c⁄ˇãº‹
(
L
, 
t›
-2,Åop-1);

299 } i‡(
	`tsvÆue
(
t›
-1)->
Àn
 == 0)

300 ()
	`to°rög
(
L
, 
t›
 - 2);

303 
size_t
 
é
 = 
	`tsvÆue
(
t›
-1)->
Àn
;

304 *
buf„r
;

305 
i
;

307 
n
 = 1;Ç < 
tŸÆ
 && 
	`to°rög
(
L
, 
t›
-n-1);Ç++) {

308 
size_t
 
l
 = 
	`tsvÆue
(
t›
-
n
-1)->
Àn
;

309 i‡(
l
 >
MAX_SIZET
 - 
é
Ë
	`luaG_ru√º‹
(
L
, "stringÜength overflow");

310 
é
 +
l
;

312 
buf„r
 = 
	`luaZ_›í•a˚
(
L
, &
	`G
(L)->
buff
, 
é
);

313 
é
 = 0;

314 
i
=
n
; i>0; i--) {

315 
size_t
 
l
 = 
	`tsvÆue
(
t›
-
i
)->
Àn
;

316 
	`mem˝y
(
buf„r
+
é
, 
	`svÆue
(
t›
-
i
), 
l
);

317 
é
 +
l
;

319 
	`£tsvÆue2s
(
L
, 
t›
-
n
, 
	`luaS_√wl°r
(L, 
buf„r
, 
é
));

321 
tŸÆ
 -
n
-1;

322 
œ°
 -
n
-1;

323 } 
tŸÆ
 > 1);

324 
	}
}

327 
	$Arôh
 (
lua_Sèã
 *
L
, 
StkId
 
ø
, c⁄° 
TVÆue
 *
rb
,

328 c⁄° 
TVÆue
 *
rc
, 
TMS
 
›
) {

329 
TVÆue
 
ãmpb
, 
ãmpc
;

330 c⁄° 
TVÆue
 *
b
, *
c
;

331 i‡((
b
 = 
	`luaV_t⁄umbî
(
rb
, &
ãmpb
)Ë!
NULL
 &&

332 (
c
 = 
	`luaV_t⁄umbî
(
rc
, &
ãmpc
)Ë!
NULL
) {

333 
lua_Numbî
 
nb
 = 
	`nvÆue
(
b
), 
nc
 =ÇvÆue(
c
);

334 
›
) {

335 
TM_ADD
: 
	`£ävÆue
(
ø
, 
	`luai_numadd
(
nb
, 
nc
)); ;

336 
TM_SUB
: 
	`£ävÆue
(
ø
, 
	`luai_numsub
(
nb
, 
nc
)); ;

337 
TM_MUL
: 
	`£ävÆue
(
ø
, 
	`luai_nummul
(
nb
, 
nc
)); ;

338 
TM_DIV
: 
	`£ävÆue
(
ø
, 
	`luai_numdiv
(
nb
, 
nc
)); ;

339 
TM_MOD
: 
	`£ävÆue
(
ø
, 
	`luai_nummod
(
nb
, 
nc
)); ;

340 
TM_POW
: 
	`£ävÆue
(
ø
, 
	`luai_numpow
(
nb
, 
nc
)); ;

341 
TM_UNM
: 
	`£ävÆue
(
ø
, 
	`luai_numunm
(
nb
)); ;

342 : 
	`lua_as£π
(0); ;

345 i‡(!
	`ˇŒ_böTM
(
L
, 
rb
, 
rc
, 
ø
, 
›
))

346 
	`luaG_¨ôhîr‹
(
L
, 
rb
, 
rc
);

347 
	}
}

355 
	#ru¡ime_check
(
L
, 
c
Ë{ i‡(!(c)Ë; }

	)

357 
	#RA
(
i
Ë(
ba£
+
	`GETARG_A
(i))

	)

359 
	#RB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_B
(i))

	)

360 
	#RC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgR
, 
ba£
+
	`GETARG_C
(i))

	)

361 
	#RKB
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

362 
	`ISK
(
	`GETARG_B
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_B(i)Ë: 
ba£
+GETARG_B(i))

	)

363 
	#RKC
(
i
Ë
	`check_exp
(
	`gëCMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, \

364 
	`ISK
(
	`GETARG_C
(
i
)Ë? 
k
+
	`INDEXK
(GETARG_C(i)Ë: 
ba£
+GETARG_C(i))

	)

365 
	#KBx
(
i
Ë
	`check_exp
(
	`gëBMode
(
	`GET_OPCODE
(i)Ë=
OpArgK
, 
k
+
	`GETARG_Bx
(i))

	)

368 
	#dojump
(
L
,
pc
,
i
Ë{’cË+(i); 
	`luai_thªadyõld
(L);}

	)

371 
	#PrŸe˘
(
x
Ë{ 
L
->
ßvedpc
 = 
pc
; {x;}; 
ba£
 = L->ba£; }

	)

374 
	#¨ôh_›
(
›
,
tm
) { \

375 
TVÆue
 *
rb
 = 
	`RKB
(
i
); \

376 
TVÆue
 *
rc
 = 
	`RKC
(
i
); \

377 i‡(
	`âi¢umbî
(
rb
Ë&&Åti¢umbî(
rc
)) { \

378 
lua_Numbî
 
nb
 = 
	`nvÆue
(
rb
), 
nc
 =ÇvÆue(
rc
); \

379 
	`£ävÆue
(
ø
, 
	`›
(
nb
, 
nc
)); \

382 
	`PrŸe˘
(
	`Arôh
(
L
, 
ø
, 
rb
, 
rc
, 
tm
)); \

383 }

	)

385 c⁄° 
	gö°ru˘i⁄_mode
[][16] = {

426 c⁄° 
	g¨g_mask
[][8] = {

433 
	$¥öt_ö°ru˘i⁄
(c⁄° 
In°ru˘i⁄
 
i
)

435 
OpCode
 
›code
 = 
	`GET_OPCODE
(
i
);

436 
OpMode
 
›mode
 = 
	`gëOpMode
(
›code
);

437 
›mode
)

439 
iABC
:

440 
	`¥ötf
("debug: ÂΩìÂâçÊâßË°åÊåá‰ª§ i = %x, opcode = %s(B:%s, C:%s),árgA = %d,árgB = %d,árgC = %d\n",

441 
i
,

442 
ö°ru˘i⁄_mode
[
›code
],

443 
¨g_mask
[
	`gëBMode
(
›code
)],

444 
¨g_mask
[
	`gëCMode
(
›code
)],

445 
	`GETARG_A
(
i
),

446 
	`GETARG_B
(
i
),

447 
	`GETARG_C
(
i
));

449 
iABx
:

450 
	`¥ötf
("debug: ÂΩìÂâçÊâßË°åÊåá‰ª§ i = %x, opcode = %s(Bx:%s),árgA = %d,árgBx = %d\n",

451 
i
,

452 
ö°ru˘i⁄_mode
[
	`GET_OPCODE
(
i
)],

453 
¨g_mask
[
	`gëBMode
(
›code
)],

454 
	`GETARG_A
(
i
),

455 
	`GETARG_Bx
(
i
));

457 
iAsBx
:

458 
	`¥ötf
("debug: ÂΩìÂâçÊâßË°åÊåá‰ª§ i = %x, opcode = %s(sBx:%s),árgA = %d,árgsBx = %d\n",

459 
i
,

460 
ö°ru˘i⁄_mode
[
	`GET_OPCODE
(
i
)],

461 
¨g_mask
[
	`gëBMode
(
›code
)],

462 
	`GETARG_A
(
i
),

463 
	`GETARG_sBx
(
i
));

466 
	}
}

469 
	$luaV_execuã
 (
lua_Sèã
 *
L
, 
√xecˇŒs
) {

470 
	`¥ötf
("debug: inÜuaV_execute, Âæ™ÁéØÊâßË°åÊåá‰ª§\n");

471 
LClosuª
 *
˛
;

472 
StkId
 
ba£
;

473 
TVÆue
 *
k
;

474 c⁄° 
In°ru˘i⁄
 *
pc
;

475 
ªíåy
:

476 
	`lua_as£π
(
	`isLua
(
L
->
ci
));

477 
pc
 = 
L
->
ßvedpc
;

478 
˛
 = &
	`˛vÆue
(
L
->
ci
->
func
)->
l
;

479 
ba£
 = 
L
->base;

480 
k
 = 
˛
->
p
->k;

482 
	`¥ötf
("debug: L->t› = %p\n", 
L
->
t›
);

483 
	`¥ötf
("debug: L->ba£ = %p\n", 
L
->
ba£
);

484 
	`¥ötf
("debug: L->°ack = %p\n", 
L
->
°ack
);

485 
	`¥ötf
("debug: L->°ack_œ° = %p\n", 
L
->
°ack_œ°
);

486 
	`¥ötf
("debug: L->°acksizê%d\n", 
L
->
°acksize
);

488 
	`¥ötf
("debug: L->íd_cò%p\n", 
L
->
íd_ci
);

489 
	`¥ötf
("debug: L->ba£_cò%p\n", 
L
->
ba£_ci
);

490 
	`¥ötf
("debug: L->size_cò%d\n", 
L
->
size_ci
);

492 c⁄° 
In°ru˘i⁄
 
i
 = *
pc
++;

493 
StkId
 
ø
;

494 i‡((
L
->
hookmask
 & (
LUA_MASKLINE
 | 
LUA_MASKCOUNT
)) &&

495 (--
L
->
hookcou¡
 =0 || L->
hookmask
 & 
LUA_MASKLINE
)) {

496 
	`åa˚exec
(
L
, 
pc
);

497 i‡(
L
->
°©us
 =
LUA_YIELD
) {

498 
L
->
ßvedpc
 = 
pc
 - 1;

501 
ba£
 = 
L
->base;

505 
ø
 = 
	`RA
(
i
);

506 
	`¥öt_ö°ru˘i⁄
(
i
);

507 
	`lua_as£π
(
ba£
 =
L
->ba£ && L->ba£ =L->
ci
->base);

508 
	`lua_as£π
(
ba£
 <
L
->
t›
 && L->t› <L->
°ack
 + L->
°acksize
);

509 
	`lua_as£π
(
L
->
t›
 =L->
ci
->t› || 
	`luaG_check›í›
(
i
));

510 
	`GET_OPCODE
(
i
)) {

511 
OP_MOVE
: {

512 
	`£tobjs2s
(
L
, 
ø
, 
	`RB
(
i
));

515 
OP_LOADK
: {

517 
	`£tobj2s
(
L
, 
ø
, 
	`KBx
(
i
));

520 
OP_LOADBOOL
: {

521 
	`£tbvÆue
(
ø
, 
	`GETARG_B
(
i
));

522 i‡(
	`GETARG_C
(
i
)Ë
pc
++;

525 
OP_LOADNIL
: {

526 
TVÆue
 *
rb
 = 
	`RB
(
i
);

528 
	`£äûvÆue
(
rb
--);

529 } 
rb
 >
ø
);

532 
OP_GETUPVAL
: {

533 
b
 = 
	`GETARG_B
(
i
);

534 
	`£tobj2s
(
L
, 
ø
, 
˛
->
upvÆs
[
b
]->
v
);

537 
OP_GETGLOBAL
: {

538 
TVÆue
 
g
;

539 
TVÆue
 *
rb
 = 
	`KBx
(
i
);

540 
	`£thvÆue
(
L
, &
g
, 
˛
->
ív
);

541 
	`lua_as£π
(
	`âis°rög
(
rb
));

542 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, &
g
, 
rb
, 
ø
));

545 
OP_GETTABLE
: {

546 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
	`RB
(
i
), 
	`RKC
(i), 
ø
));

549 
OP_SETGLOBAL
: {

550 
TVÆue
 
g
;

551 
	`£thvÆue
(
L
, &
g
, 
˛
->
ív
);

552 
	`lua_as£π
(
	`âis°rög
(
	`KBx
(
i
)));

553 
	`PrŸe˘
(
	`luaV_£âabÀ
(
L
, &
g
, 
	`KBx
(
i
), 
ø
));

556 
OP_SETUPVAL
: {

557 
UpVÆ
 *
uv
 = 
˛
->
upvÆs
[
	`GETARG_B
(
i
)];

558 
	`£tobj
(
L
, 
uv
->
v
, 
ø
);

559 
	`luaC_b¨rõr
(
L
, 
uv
, 
ø
);

562 
OP_SETTABLE
: {

563 
	`PrŸe˘
(
	`luaV_£âabÀ
(
L
, 
ø
, 
	`RKB
(
i
), 
	`RKC
(i)));

566 
OP_NEWTABLE
: {

567 
b
 = 
	`GETARG_B
(
i
);

568 
c
 = 
	`GETARG_C
(
i
);

569 
	`£thvÆue
(
L
, 
ø
, 
	`luaH_√w
(L, 
	`luaO_fb2öt
(
b
),ÜuaO_fb2öt(
c
)));

570 
	`PrŸe˘
(
	`luaC_checkGC
(
L
));

573 
OP_SELF
: {

574 
StkId
 
rb
 = 
	`RB
(
i
);

575 
	`£tobjs2s
(
L
, 
ø
+1, 
rb
);

576 
	`PrŸe˘
(
	`luaV_gëèbÀ
(
L
, 
rb
, 
	`RKC
(
i
), 
ø
));

579 
OP_ADD
: {

580 
	`¨ôh_›
(
luai_numadd
, 
TM_ADD
);

583 
OP_SUB
: {

584 
	`¨ôh_›
(
luai_numsub
, 
TM_SUB
);

587 
OP_MUL
: {

588 
	`¨ôh_›
(
luai_nummul
, 
TM_MUL
);

591 
OP_DIV
: {

592 
	`¨ôh_›
(
luai_numdiv
, 
TM_DIV
);

595 
OP_MOD
: {

596 
	`¨ôh_›
(
luai_nummod
, 
TM_MOD
);

599 
OP_POW
: {

600 
	`¨ôh_›
(
luai_numpow
, 
TM_POW
);

603 
OP_UNM
: {

604 
TVÆue
 *
rb
 = 
	`RB
(
i
);

605 i‡(
	`âi¢umbî
(
rb
)) {

606 
lua_Numbî
 
nb
 = 
	`nvÆue
(
rb
);

607 
	`£ävÆue
(
ø
, 
	`luai_numunm
(
nb
));

610 
	`PrŸe˘
(
	`Arôh
(
L
, 
ø
, 
rb
,Ñb, 
TM_UNM
));

614 
OP_NOT
: {

615 
ªs
 = 
	`l_isÁl£
(
	`RB
(
i
));

616 
	`£tbvÆue
(
ø
, 
ªs
);

619 
OP_LEN
: {

620 c⁄° 
TVÆue
 *
rb
 = 
	`RB
(
i
);

621 
	`ây≥
(
rb
)) {

622 
LUA_TTABLE
: {

623 
	`£ävÆue
(
ø
, 
	`ˇ°_num
(
	`luaH_gën
(
	`hvÆue
(
rb
))));

626 
LUA_TSTRING
: {

627 
	`£ävÆue
(
ø
, 
	`ˇ°_num
(
	`tsvÆue
(
rb
)->
Àn
));

631 
	`PrŸe˘
(

632 i‡(!
	`ˇŒ_böTM
(
L
, 
rb
, 
luaO_nûobje˘
, 
ø
, 
TM_LEN
))

633 
	`luaG_ty≥îr‹
(
L
, 
rb
, "getÜength of");

639 
OP_CONCAT
: {

640 
b
 = 
	`GETARG_B
(
i
);

641 
c
 = 
	`GETARG_C
(
i
);

642 
	`PrŸe˘
(
	`luaV_c⁄ˇt
(
L
, 
c
-
b
+1, c); 
	`luaC_checkGC
(L));

643 
	`£tobjs2s
(
L
, 
	`RA
(
i
), 
ba£
+
b
);

646 
OP_JMP
: {

647 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(
i
));

650 
OP_EQ
: {

651 
TVÆue
 *
rb
 = 
	`RKB
(
i
);

652 
TVÆue
 *
rc
 = 
	`RKC
(
i
);

653 
	`PrŸe˘
(

654 i‡(
	`equÆobj
(
L
, 
rb
, 
rc
Ë=
	`GETARG_A
(
i
))

655 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

657 
pc
++;

660 
OP_LT
: {

661 
	`PrŸe˘
(

662 i‡(
	`luaV_Às°h™
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë=
	`GETARG_A
(i))

663 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

665 
pc
++;

668 
OP_LE
: {

669 
	`PrŸe˘
(

670 i‡(
	`Às£quÆ
(
L
, 
	`RKB
(
i
), 
	`RKC
(i)Ë=
	`GETARG_A
(i))

671 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

673 
pc
++;

676 
OP_TEST
: {

677 i‡(
	`l_isÁl£
(
ø
Ë!
	`GETARG_C
(
i
))

678 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

679 
pc
++;

682 
OP_TESTSET
: {

683 
TVÆue
 *
rb
 = 
	`RB
(
i
);

684 i‡(
	`l_isÁl£
(
rb
Ë!
	`GETARG_C
(
i
)) {

685 
	`£tobjs2s
(
L
, 
ø
, 
rb
);

686 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

688 
pc
++;

691 
OP_CALL
: {

692 
b
 = 
	`GETARG_B
(
i
);

693 
ƒesu…s
 = 
	`GETARG_C
(
i
) - 1;

694 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

695 
L
->
ßvedpc
 = 
pc
;

696 
	`luaD_¥eˇŒ
(
L
, 
ø
, 
ƒesu…s
)) {

697 
PCRLUA
: {

698 
√xecˇŒs
++;

699 
ªíåy
;

701 
PCRC
: {

703 i‡(
ƒesu…s
 >0Ë
L
->
t›
 = L->
ci
->top;

704 
ba£
 = 
L
->base;

712 
OP_TAILCALL
: {

713 
b
 = 
	`GETARG_B
(
i
);

714 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b;

715 
L
->
ßvedpc
 = 
pc
;

716 
	`lua_as£π
(
	`GETARG_C
(
i
Ë- 1 =
LUA_MULTRET
);

717 
	`luaD_¥eˇŒ
(
L
, 
ø
, 
LUA_MULTRET
)) {

718 
PCRLUA
: {

720 
CÆlInfo
 *
ci
 = 
L
->ci - 1;

721 
aux
;

722 
StkId
 
func
 = 
ci
->func;

723 
StkId
 
pfunc
 = (
ci
+1)->
func
;

724 i‡(
L
->
›íupvÆ
Ë
	`luaF_˛o£
(L, 
ci
->
ba£
);

725 
L
->
ba£
 = 
ci
->ba£ = ci->
func
 + ((ci+1)->ba£ - 
pfunc
);

726 
aux
 = 0; 
pfunc
+aux < 
L
->
t›
;áux++)

727 
	`£tobjs2s
(
L
, 
func
+
aux
, 
pfunc
+aux);

728 
ci
->
t›
 = 
L
->t› = 
func
+
aux
;

729 
	`lua_as£π
(
L
->
t›
 =L->
ba£
 + 
	`˛vÆue
(
func
)->
l
.
p
->
max°acksize
);

730 
ci
->
ßvedpc
 = 
L
->savedpc;

731 
ci
->
èûˇŒs
++;

732 
L
->
ci
--;

733 
ªíåy
;

735 
PCRC
: {

736 
ba£
 = 
L
->base;

744 
OP_RETURN
: {

745 
b
 = 
	`GETARG_B
(
i
);

746 i‡(
b
 !0Ë
L
->
t›
 = 
ø
+b-1;

747 i‡(
L
->
›íupvÆ
Ë
	`luaF_˛o£
(L, 
ba£
);

748 
L
->
ßvedpc
 = 
pc
;

749 
b
 = 
	`luaD_posˇŒ
(
L
, 
ø
);

750 i‡(--
√xecˇŒs
 == 0)

753 i‡(
b
Ë
L
->
t›
 = L->
ci
->top;

754 
	`lua_as£π
(
	`isLua
(
L
->
ci
));

755 
	`lua_as£π
(
	`GET_OPCODE
(*((
L
->
ci
)->
ßvedpc
 - 1)Ë=
OP_CALL
);

756 
ªíåy
;

759 
OP_FORLOOP
: {

760 
lua_Numbî
 
°ï
 = 
	`nvÆue
(
ø
+2);

761 
lua_Numbî
 
idx
 = 
	`luai_numadd
(
	`nvÆue
(
ø
), 
°ï
);

762 
lua_Numbî
 
limô
 = 
	`nvÆue
(
ø
+1);

763 i‡(
	`luai_num…
(0, 
°ï
Ë? 
	`luai_numÀ
(
idx
, 
limô
)

764 : 
	`luai_numÀ
(
limô
, 
idx
)) {

765 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(
i
));

766 
	`£ävÆue
(
ø
, 
idx
);

767 
	`£ävÆue
(
ø
+3, 
idx
);

771 
OP_FORPREP
: {

772 c⁄° 
TVÆue
 *
öô
 = 
ø
;

773 c⁄° 
TVÆue
 *
∂imô
 = 
ø
+1;

774 c⁄° 
TVÆue
 *
p°ï
 = 
ø
+2;

775 
L
->
ßvedpc
 = 
pc
;

776 i‡(!
	`t⁄umbî
(
öô
, 
ø
))

777 
	`luaG_ru√º‹
(
L
, 
	`LUA_QL
("for") " initial value must beáÇumber");

778 i‡(!
	`t⁄umbî
(
∂imô
, 
ø
+1))

779 
	`luaG_ru√º‹
(
L
, 
	`LUA_QL
("for") "Üimit must beáÇumber");

780 i‡(!
	`t⁄umbî
(
p°ï
, 
ø
+2))

781 
	`luaG_ru√º‹
(
L
, 
	`LUA_QL
("for") " step must beáÇumber");

782 
	`£ävÆue
(
ø
, 
	`luai_numsub
(
	`nvÆue
‘a),ÇvÆue(
p°ï
)));

783 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(
i
));

786 
OP_TFORLOOP
: {

787 
StkId
 
cb
 = 
ø
 + 3;

788 
	`£tobjs2s
(
L
, 
cb
+2, 
ø
+2);

789 
	`£tobjs2s
(
L
, 
cb
+1, 
ø
+1);

790 
	`£tobjs2s
(
L
, 
cb
, 
ø
);

791 
L
->
t›
 = 
cb
+3;

792 
	`PrŸe˘
(
	`luaD_ˇŒ
(
L
, 
cb
, 
	`GETARG_C
(
i
)));

793 
L
->
t›
 = L->
ci
->top;

794 
cb
 = 
	`RA
(
i
) + 3;

795 i‡(!
	`âi¢û
(
cb
)) {

796 
	`£tobjs2s
(
L
, 
cb
-1, cb);

797 
	`dojump
(
L
, 
pc
, 
	`GETARG_sBx
(*pc));

799 
pc
++;

802 
OP_SETLIST
: {

803 
n
 = 
	`GETARG_B
(
i
);

804 
c
 = 
	`GETARG_C
(
i
);

805 
œ°
;

806 
TabÀ
 *
h
;

807 i‡(
n
 == 0) {

808 
n
 = 
	`ˇ°_öt
(
L
->
t›
 - 
ø
) - 1;

809 
L
->
t›
 = L->
ci
->top;

811 i‡(
c
 =0Ë¯
	`ˇ°_öt
(*
pc
++);

812 
	`ru¡ime_check
(
L
, 
	`âi°abÀ
(
ø
));

813 
h
 = 
	`hvÆue
(
ø
);

814 
œ°
 = ((
c
-1)*
LFIELDS_PER_FLUSH
Ë+ 
n
;

815 i‡(
œ°
 > 
h
->
sizóºay
)

816 
	`luaH_ªsizóºay
(
L
, 
h
, 
œ°
);

817 ; 
n
 > 0;Ç--) {

818 
TVÆue
 *
vÆ
 = 
ø
+
n
;

819 
	`£tobj2t
(
L
, 
	`luaH_£äum
(L, 
h
, 
œ°
--), 
vÆ
);

820 
	`luaC_b¨rõπ
(
L
, 
h
, 
vÆ
);

824 
OP_CLOSE
: {

825 
	`luaF_˛o£
(
L
, 
ø
);

828 
OP_CLOSURE
: {

829 
PrŸo
 *
p
;

830 
Closuª
 *
n˛
;

831 
nup
, 
j
;

832 
p
 = 
˛
->p->p[
	`GETARG_Bx
(
i
)];

833 
nup
 = 
p
->
nups
;

834 
n˛
 = 
	`luaF_√wL˛osuª
(
L
, 
nup
, 
˛
->
ív
);

835 
n˛
->
l
.
p
 =Ö;

836 
j
=0; j<
nup
; j++, 
pc
++) {

837 i‡(
	`GET_OPCODE
(*
pc
Ë=
OP_GETUPVAL
)

838 
n˛
->
l
.
upvÆs
[
j
] = 
˛
->upvÆs[
	`GETARG_B
(*
pc
)];

840 
	`lua_as£π
(
	`GET_OPCODE
(*
pc
Ë=
OP_MOVE
);

841 
n˛
->
l
.
upvÆs
[
j
] = 
	`luaF_födupvÆ
(
L
, 
ba£
 + 
	`GETARG_B
(*
pc
));

844 
	`£t˛vÆue
(
L
, 
ø
, 
n˛
);

845 
	`PrŸe˘
(
	`luaC_checkGC
(
L
));

848 
OP_VARARG
: {

849 
b
 = 
	`GETARG_B
(
i
) - 1;

850 
j
;

851 
CÆlInfo
 *
ci
 = 
L
->ci;

852 
n
 = 
	`ˇ°_öt
(
ci
->
ba£
 - ci->
func
Ë- 
˛
->
p
->
num∑øms
 - 1;

853 i‡(
b
 =
LUA_MULTRET
) {

854 
	`PrŸe˘
(
	`luaD_check°ack
(
L
, 
n
));

855 
ø
 = 
	`RA
(
i
);

856 
b
 = 
n
;

857 
L
->
t›
 = 
ø
 + 
n
;

859 
j
 = 0; j < 
b
; j++) {

860 i‡(
j
 < 
n
) {

861 
	`£tobjs2s
(
L
, 
ø
 + 
j
, 
ci
->
ba£
 - 
n
 + j);

864 
	`£äûvÆue
(
ø
 + 
j
);

871 
	}
}

	@src/lvm.h

8 #i‚de‡
lvm_h


9 
	#lvm_h


	)

12 
	~"ldo.h
"

13 
	~"lobje˘.h
"

14 
	~"…m.h
"

17 
	#to°rög
(
L
,
o
Ë((
	`ây≥
(oË=
LUA_TSTRING
Ë|| (
	`luaV_to°rög
(L, o)))

	)

19 
	#t⁄umbî
(
o
,
n
Ë(
	`ây≥
(oË=
LUA_TNUMBER
 || \

20 (((
o
Ë
	`luaV_t⁄umbî
(o,
n
)Ë!
NULL
))

	)

22 
	#equÆobj
(
L
,
o1
,
o2
) \

23 (
	`ây≥
(
o1
Ë=ây≥(
o2
Ë&& 
	`luaV_equÆvÆ
(
L
, o1, o2))

	)

26 
LUAI_FUNC
 
luaV_Às°h™
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
l
, c⁄° TVÆuê*
r
);

27 
LUAI_FUNC
 
luaV_equÆvÆ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t1
, c⁄° TVÆuê*
t2
);

28 
LUAI_FUNC
 c⁄° 
TVÆue
 *
luaV_t⁄umbî
 (c⁄° TVÆuê*
obj
, TVÆuê*
n
);

29 
LUAI_FUNC
 
luaV_to°rög
 (
lua_Sèã
 *
L
, 
StkId
 
obj
);

30 
LUAI_FUNC
 
luaV_gëèbÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

31 
StkId
 
vÆ
);

32 
LUAI_FUNC
 
luaV_£âabÀ
 (
lua_Sèã
 *
L
, c⁄° 
TVÆue
 *
t
, TVÆuê*
key
,

33 
StkId
 
vÆ
);

34 
LUAI_FUNC
 
luaV_execuã
 (
lua_Sèã
 *
L
, 
√xecˇŒs
);

35 
LUAI_FUNC
 
luaV_c⁄ˇt
 (
lua_Sèã
 *
L
, 
tŸÆ
, 
œ°
);

	@src/lzio.c

8 
	~<°rög.h
>

10 
	#lzio_c


	)

11 
	#LUA_CORE


	)

13 
	~"lua.h
"

15 
	~"Œimôs.h
"

16 
	~"lmem.h
"

17 
	~"l°©e.h
"

18 
	~"lzio.h
"

21 
	$luaZ_fûl
 (
ZIO
 *
z
) {

22 
size_t
 
size
;

23 
lua_Sèã
 *
L
 = 
z
->L;

24 c⁄° *
buff
;

25 
	`lua_u∆ock
(
L
);

26 
buff
 = 
z
->
	`ªadî
(
L
, z->
d©a
, &
size
);

27 
	`lua_lock
(
L
);

28 i‡(
buff
 =
NULL
 || 
size
 =0Ë 
EOZ
;

29 
z
->
n
 = 
size
 - 1;

30 
z
->
p
 = 
buff
;

31  
	`ch¨2öt
(*(
z
->
p
++));

32 
	}
}

35 
	$luaZ_lookahód
 (
ZIO
 *
z
) {

36 i‡(
z
->
n
 == 0) {

37 i‡(
	`luaZ_fûl
(
z
Ë=
EOZ
)

38  
EOZ
;

40 
z
->
n
++;

41 
z
->
p
--;

44  
	`ch¨2öt
(*
z
->
p
);

45 
	}
}

48 
	$luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
, *
d©a
) {

49 
z
->
L
 = L;

50 
z
->
ªadî
 =Ñeader;

51 
z
->
d©a
 = data;

52 
z
->
n
 = 0;

53 
z
->
p
 = 
NULL
;

54 
	}
}

58 
size_t
 
	$luaZ_ªad
 (
ZIO
 *
z
, *
b
, 
size_t
 
n
) {

59 
n
) {

60 
size_t
 
m
;

61 i‡(
	`luaZ_lookahód
(
z
Ë=
EOZ
)

62  
n
;

63 
m
 = (
n
 <
z
->n) ?Ç : z->n;

64 
	`mem˝y
(
b
, 
z
->
p
, 
m
);

65 
z
->
n
 -
m
;

66 
z
->
p
 +
m
;

67 
b
 = (*)b + 
m
;

68 
n
 -
m
;

71 
	}
}

74 *
	$luaZ_›í•a˚
 (
lua_Sèã
 *
L
, 
Mbuf„r
 *
buff
, 
size_t
 
n
) {

75 i‡(
n
 > 
buff
->
buffsize
) {

76 i‡(
n
 < 
LUA_MINBUFFER
)Ç = LUA_MINBUFFER;

77 
	`luaZ_ªsizebuf„r
(
L
, 
buff
, 
n
);

79  
buff
->
buf„r
;

80 
	}
}

	@src/lzio.h

8 #i‚de‡
lzio_h


9 
	#lzio_h


	)

11 
	~"lua.h
"

13 
	~"lmem.h
"

16 
	#EOZ
 (-1Ë

	)

18 
Zio
 
	tZIO
;

20 
	#ch¨2öt
(
c
Ë
	`ˇ°
(, ca°(, (c)))

	)

22 
	#zgëc
(
z
Ë(((z)->
n
--)>0 ? 
	`ch¨2öt
(*(z)->
p
++Ë: 
	`luaZ_fûl
(z))

	)

24 
	sMbuf„r
 {

25 *
	mbuf„r
;

26 
size_t
 
	mn
;

27 
size_t
 
	mbuffsize
;

28 } 
	tMbuf„r
;

30 
	#luaZ_öôbuf„r
(
L
, 
buff
Ë((buff)->
buf„r
 = 
NULL
, (buff)->
buffsize
 = 0)

	)

32 
	#luaZ_buf„r
(
buff
Ë((buff)->
buf„r
)

	)

33 
	#luaZ_sizebuf„r
(
buff
Ë((buff)->
buffsize
)

	)

34 
	#luaZ_bufÊí
(
buff
Ë((buff)->
n
)

	)

36 
	#luaZ_ª£tbuf„r
(
buff
Ë((buff)->
n
 = 0)

	)

39 
	#luaZ_ªsizebuf„r
(
L
, 
buff
, 
size
) \

40 (
	`luaM_ªÆlocve˘‹
(
L
, (
buff
)->
buf„r
, (buff)->
buffsize
, 
size
, ), \

41 (
buff
)->
buffsize
 = 
size
)

	)

43 
	#luaZ_‰ìbuf„r
(
L
, 
buff
Ë
	`luaZ_ªsizebuf„r
(L, buff, 0)

	)

46 
LUAI_FUNC
 *
luaZ_›í•a˚
 (
lua_Sèã
 *
L
, 
Mbuf„r
 *
buff
, 
size_t
 
n
);

47 
LUAI_FUNC
 
luaZ_öô
 (
lua_Sèã
 *
L
, 
ZIO
 *
z
, 
lua_Ródî
 
ªadî
,

48 *
d©a
);

49 
LUAI_FUNC
 
size_t
 
luaZ_ªad
 (
ZIO
* 
z
, * 
b
, size_à
n
);

50 
LUAI_FUNC
 
luaZ_lookahód
 (
ZIO
 *
z
);

56 
	sZio
 {

57 
size_t
 
	mn
;

58 c⁄° *
	mp
;

59 
lua_Ródî
 
	mªadî
;

60 * 
	md©a
;

61 
lua_Sèã
 *
	mL
;

65 
LUAI_FUNC
 
luaZ_fûl
 (
ZIO
 *
z
);

	@src/print.c

7 
	~<˘y≥.h
>

8 
	~<°dio.h
>

10 
	#luac_c


	)

11 
	#LUA_CORE


	)

13 
	~"ldebug.h
"

14 
	~"lobje˘.h
"

15 
	~"l›codes.h
"

16 
	~"lundump.h
"

18 
	#PrötFun˘i⁄
 
luaU_¥öt


	)

20 
	#Sizeof
(
x
Ë(()(x))

	)

21 
	#VOID
(
p
Ë((c⁄° *)’))

	)

23 
	$PrötSåög
(c⁄° 
TSåög
* 
ts
)

25 c⁄° * 
s
=
	`gë°r
(
ts
);

26 
size_t
 
i
,
n
=
ts
->
tsv
.
Àn
;

27 
	`putch¨
('"');

28 
i
=0; i<
n
; i++)

30 
c
=
s
[
i
];

31 
c
)

33 '"': 
	`¥ötf
("\\\""); ;

34 '\\': 
	`¥ötf
("\\\\"); ;

35 '\a': 
	`¥ötf
("\\a"); ;

36 '\b': 
	`¥ötf
("\\b"); ;

37 '\f': 
	`¥ötf
("\\f"); ;

38 '\n': 
	`¥ötf
("\\n"); ;

39 '\r': 
	`¥ötf
("\\r"); ;

40 '\t': 
	`¥ötf
("\\t"); ;

41 '\v': 
	`¥ötf
("\\v"); ;

42 : i‡(
	`i•röt
(()
c
))

43 
	`putch¨
(
c
);

45 
	`¥ötf
("\\%03u",()
c
);

48 
	`putch¨
('"');

49 
	}
}

51 
	$PrötC⁄°™t
(c⁄° 
PrŸo
* 
f
, 
i
)

53 c⁄° 
TVÆue
* 
o
=&
f
->
k
[
i
];

54 
	`ây≥
(
o
))

56 
LUA_TNIL
:

57 
	`¥ötf
("nil");

59 
LUA_TBOOLEAN
:

60 
	`¥ötf
(
	`bvÆue
(
o
) ? "true" : "false");

62 
LUA_TNUMBER
:

63 
	`¥ötf
(
LUA_NUMBER_FMT
,
	`nvÆue
(
o
));

65 
LUA_TSTRING
:

66 
	`PrötSåög
(
	`øwtsvÆue
(
o
));

69 
	`¥ötf
("?Åy≥=%d",
	`ây≥
(
o
));

72 
	}
}

74 
	$PrötCode
(c⁄° 
PrŸo
* 
f
)

76 c⁄° 
In°ru˘i⁄
* 
code
=
f
->code;

77 
pc
,
n
=
f
->
sizecode
;

78 
pc
=0;Öc<
n
;Öc++)

80 
In°ru˘i⁄
 
i
=
code
[
pc
];

81 
OpCode
 
o
=
	`GET_OPCODE
(
i
);

82 
a
=
	`GETARG_A
(
i
);

83 
b
=
	`GETARG_B
(
i
);

84 
c
=
	`GETARG_C
(
i
);

85 
bx
=
	`GETARG_Bx
(
i
);

86 
sbx
=
	`GETARG_sBx
(
i
);

87 
löe
=
	`gëlöe
(
f
,
pc
);

88 
	`¥ötf
("\t%d\t",
pc
+1);

89 i‡(
löe
>0Ë
	`¥ötf
("[%d]\t",line); printf("[-]\t");

90 
	`¥ötf
("%-9s\t",
luaP_›«mes
[
o
]);

91 
	`gëOpMode
(
o
))

93 
iABC
:

94 
	`¥ötf
("%d",
a
);

95 i‡(
	`gëBMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
b
Ë? (-1-
	`INDEXK
(b)) : b);

96 i‡(
	`gëCMode
(
o
)!=
OpArgN
Ë
	`¥ötf
(" %d",
	`ISK
(
c
Ë? (-1-
	`INDEXK
(c)) : c);

98 
iABx
:

99 i‡(
	`gëBMode
(
o
)==
OpArgK
Ë
	`¥ötf
("%d %d",
a
,-1-
bx
); printf("%d %d",a,bx);

101 
iAsBx
:

102 i‡(
o
==
OP_JMP
Ë
	`¥ötf
("%d",
sbx
); ¥ötf("%d %d",
a
,sbx);

105 
o
)

107 
OP_LOADK
:

108 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
bx
);

110 
OP_GETUPVAL
:

111 
OP_SETUPVAL
:

112 
	`¥ötf
("\t; %s", (
f
->
sizeupvÆues
>0Ë? 
	`gë°r
(f->
upvÆues
[
b
]) : "-");

114 
OP_GETGLOBAL
:

115 
OP_SETGLOBAL
:

116 
	`¥ötf
("\t; %s",
	`svÆue
(&
f
->
k
[
bx
]));

118 
OP_GETTABLE
:

119 
OP_SELF
:

120 i‡(
	`ISK
(
c
)Ë{ 
	`¥ötf
("\t; "); 
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); }

122 
OP_SETTABLE
:

123 
OP_ADD
:

124 
OP_SUB
:

125 
OP_MUL
:

126 
OP_DIV
:

127 
OP_POW
:

128 
OP_EQ
:

129 
OP_LT
:

130 
OP_LE
:

131 i‡(
	`ISK
(
b
Ë|| ISK(
c
))

133 
	`¥ötf
("\t; ");

134 i‡(
	`ISK
(
b
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(b)); 
	`¥ötf
("-");

135 
	`¥ötf
(" ");

136 i‡(
	`ISK
(
c
)Ë
	`PrötC⁄°™t
(
f
,
	`INDEXK
(c)); 
	`¥ötf
("-");

139 
OP_JMP
:

140 
OP_FORLOOP
:

141 
OP_FORPREP
:

142 
	`¥ötf
("\t;Åÿ%d",
sbx
+
pc
+2);

144 
OP_CLOSURE
:

145 
	`¥ötf
("\t; %p",
	`VOID
(
f
->
p
[
bx
]));

147 
OP_SETLIST
:

148 i‡(
c
==0Ë
	`¥ötf
("\t; %d",()
code
[++
pc
]);

149 
	`¥ötf
("\t; %d",
c
);

154 
	`¥ötf
("\n");

156 
	}
}

158 
	#SS
(
x
Ë(x==1)?"":"s"

	)

159 
	#S
(
x
Ëx,
	`SS
(x)

	)

161 
	$PrötHódî
(c⁄° 
PrŸo
* 
f
)

163 c⁄° * 
s
=
	`gë°r
(
f
->
sour˚
);

164 i‡(*
s
=='@' || *s=='=')

165 
s
++;

166 i‡(*
s
==
LUA_SIGNATURE
[0])

167 
s
="(bstring)";

169 
s
="(string)";

170 
	`¥ötf
("\n%s <%s:%d,%d> (%d instruction%s, %d bytesát %p)\n",

171 (
f
->
löedeföed
==0)?"maö":"fun˘i⁄",
s
,

172 
f
->
löedeföed
,f->
œ°löedeföed
,

173 
	`S
(
f
->
sizecode
),f->sizecode*
	`Sizeof
(
In°ru˘i⁄
),
	`VOID
(f));

174 
	`¥ötf
("%d%sÖaram%s, %d slot%s, %d upvalue%s, ",

175 
f
->
num∑øms
,f->
is_v¨¨g
?"+":"",
	`SS
(f->numparams),

176 
	`S
(
f
->
max°acksize
),S(f->
nups
));

177 
	`¥ötf
("%dÜocal%s, %d constant%s, %d function%s\n",

178 
	`S
(
f
->
sizñocv¨s
),S(f->
sizek
),S(f->
sizï
));

179 
	}
}

181 
	$PrötC⁄°™ts
(c⁄° 
PrŸo
* 
f
)

183 
i
,
n
=
f
->
sizek
;

184 
	`¥ötf
("c⁄°™t†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

185 
i
=0; i<
n
; i++)

187 
	`¥ötf
("\t%d\t",
i
+1);

188 
	`PrötC⁄°™t
(
f
,
i
);

189 
	`¥ötf
("\n");

191 
	}
}

193 
	$PrötLoˇls
(c⁄° 
PrŸo
* 
f
)

195 
i
,
n
=
f
->
sizñocv¨s
;

196 
	`¥ötf
("loˇl†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

197 
i
=0; i<
n
; i++)

199 
	`¥ötf
("\t%d\t%s\t%d\t%d\n",

200 
i
,
	`gë°r
(
f
->
locv¨s
[i].
v¨«me
),f->locv¨s[i].
°¨çc
+1,f->locv¨s[i].
ídpc
+1);

202 
	}
}

204 
	$PrötUpvÆues
(c⁄° 
PrŸo
* 
f
)

206 
i
,
n
=
f
->
sizeupvÆues
;

207 
	`¥ötf
("upvÆue†(%dËf‹ %p:\n",
n
,
	`VOID
(
f
));

208 i‡(
f
->
upvÆues
==
NULL
) ;

209 
i
=0; i<
n
; i++)

211 
	`¥ötf
("\t%d\t%s\n",
i
,
	`gë°r
(
f
->
upvÆues
[i]));

213 
	}
}

215 
	$PrötFun˘i⁄
(c⁄° 
PrŸo
* 
f
, 
fuŒ
)

217 
i
,
n
=
f
->
sizï
;

218 
	`PrötHódî
(
f
);

219 
	`PrötCode
(
f
);

220 i‡(
fuŒ
)

222 
	`PrötC⁄°™ts
(
f
);

223 
	`PrötLoˇls
(
f
);

224 
	`PrötUpvÆues
(
f
);

226 
i
=0; i<
n
; i++Ë
	`PrötFun˘i⁄
(
f
->
p
[i],
fuŒ
);

227 
	}
}

	@src/rsa.c

1 
	~<›ís¶/≥m.h
>

2 
	~<›ís¶/s¶.h
>

3 
	~<›ís¶/rß.h
>

4 
	~<›ís¶/evp.h
>

5 
	~<›ís¶/bio.h
>

6 
	~<›ís¶/îr.h
>

7 
	~<°dio.h
>

8 
	~<lua.h
>

9 
	~<œuxlib.h
>

10 
	~<luÆib.h
>

12 
	g∑ddög
 = 
RSA_PKCS1_PADDING
;

14 
	$¥ötLa°Eº‹
()

16 * 
îr
 = 
	`mÆloc
(130);;

17 
	`ERR_lﬂd_¸y±o_°rögs
();

18 
	`ERR_îr‹_°rög
(
	`ERR_gë_îr‹
(), 
îr
);

19 
	`¥ötf
("ERROR: %s\n", 
îr
);

20 
	`‰ì
(
îr
);

21 
	}
}

23 
RSA
 * 
	$¸óãRSA
(* 
key
,
public
)

25 
RSA
 *
rß

NULL
;

26 
BIO
 *
keybio
 ;

27 
keybio
 = 
	`BIO_√w_mem_buf
(
key
, -1);

28 i‡(
keybio
==
NULL
)

30 
	`¥ötf
( "FailedÅo create key BIO");

33 if(
public
)

35 
rß
 = 
	`PEM_ªad_bio_RSA_PUBKEY
(
keybio
, &rß,
NULL
, NULL);

39 
rß
 = 
	`PEM_ªad_bio_RSAPriv©eKey
(
keybio
, &rß,
NULL
, NULL);

41 if(
rß
 =
NULL
)

43 
	`¥ötf
( "FailedÅo create RSA");

46  
rß
;

47 
	}
}

49 
	$public_í¸y±
(
lua_Sèã
* 
L
)

51 c⁄° * 
d©a
 = 
	`lua_tﬁ°rög
(
L
, 1, 
NULL
);

52 
d©a_Àn
 = 
	`°æí
(
d©a
);

53 c⁄° * 
key
 = 
	`lua_tﬁ°rög
(
L
, 2, 
NULL
);

54 c⁄° * 
í¸y±ed
 = 
	`lua_tﬁ°rög
(
L
, 3, 
NULL
);

55 
RSA
 * 
rß
 = 
	`¸óãRSA
(
key
,1);

56 
ªsu…
 = 
	`RSA_public_í¸y±
(
d©a_Àn
, 
d©a
, 
í¸y±ed
, 
rß
, 
∑ddög
);

57 if(
ªsu…
 != -1)

59 
	`lua_pushl°rög
(
L
, 
í¸y±ed
, 
	`°æí
(encrypted));

63 
	`¥ötLa°Eº‹
();

64 
	`lua_pushnû
(
L
);

67  
ªsu…
;

68 
	}
}

70 
	$¥iv©e_de¸y±
(
lua_Sèã
* 
L
)

72 c⁄° * 
íc_d©a
 = 
	`lua_tﬁ°rög
(
L
, 1, 
NULL
);

73 
d©a_Àn
 = 
	`°æí
(
íc_d©a
);

74 c⁄° * 
key
 = 
	`lua_tﬁ°rög
(
L
, 2, 
NULL
);

75 c⁄° * 
de¸y±ed
 = 
	`lua_tﬁ°rög
(
L
, 3, 
NULL
);

76 
RSA
 * 
rß
 = 
	`¸óãRSA
(
key
,0);

77 
ªsu…
 = 
	`RSA_¥iv©e_de¸y±
(
d©a_Àn
, 
íc_d©a
, 
de¸y±ed
, 
rß
, 
∑ddög
);

78 if(
ªsu…
 != -1)

80 
	`lua_pushl°rög
(
L
, 
de¸y±ed
, 
	`°æí
(decrypted));

84 
	`¥ötLa°Eº‹
();

85 
	`lua_pushnû
(
L
);

88  
ªsu…
;

89 
	}
}

91 
	$¥iv©e_í¸y±
(
lua_Sèã
* 
L
)

93 c⁄° * 
d©a
 = 
	`lua_tﬁ°rög
(
L
, 1, 
NULL
);

94 
d©a_Àn
 = 
	`°æí
(
d©a
);

95 c⁄° * 
key
 = 
	`lua_tﬁ°rög
(
L
, 2, 
NULL
);

96 c⁄° * 
í¸y±ed
 = 
	`lua_tﬁ°rög
(
L
, 3, 
NULL
);

97 
RSA
 * 
rß
 = 
	`¸óãRSA
(
key
,0);

98 
ªsu…
 = 
	`RSA_¥iv©e_í¸y±
(
d©a_Àn
, 
d©a
, 
í¸y±ed
, 
rß
, 
∑ddög
);

99 if(
ªsu…
 != -1)

101 
	`lua_pushl°rög
(
L
, 
í¸y±ed
, 
	`°æí
(encrypted));

105 
	`¥ötLa°Eº‹
();

106 
	`lua_pushnû
(
L
);

109  
ªsu…
;

110 
	}
}

112 
	$public_de¸y±
(
lua_Sèã
* 
L
)

114 c⁄° * 
íc_d©a
 = 
	`lua_tﬁ°rög
(
L
, 1, 
NULL
);

115 
d©a_Àn
 = 
	`°æí
(
íc_d©a
);

116 c⁄° * 
key
 = 
	`lua_tﬁ°rög
(
L
, 2, 
NULL
);

117 c⁄° * 
de¸y±ed
 = 
	`lua_tﬁ°rög
(
L
, 3, 
NULL
);

118 
RSA
 * 
rß
 = 
	`¸óãRSA
(
key
,1);

119 
ªsu…
 = 
	`RSA_public_de¸y±
(
d©a_Àn
, 
íc_d©a
, 
de¸y±ed
, 
rß
, 
∑ddög
);

120 if(
ªsu…
 != -1)

122 
	`lua_pushl°rög
(
L
, 
de¸y±ed
, 
	`°æí
(decrypted));

126 
	`¥ötLa°Eº‹
();

127 
	`lua_pushnû
(
L
);

130  
ªsu…
;

131 
	}
}

133 
	$lua›í_rß
(
lua_Sèã
 *
L
) {

134 
luaL_Reg
 
luaLﬂdFun
[] = {

135 {"public_í¸y±", 
public_í¸y±
},

136 {"¥iv©e_de¸y±", 
¥iv©e_de¸y±
},

137 {"¥iv©e_í¸y±", 
¥iv©e_í¸y±
},

138 {"public_de¸y±", 
public_de¸y±
},

139 {
NULL
,NULL}

141 
	`luaL_√wlib
(
L
, 
luaLﬂdFun
);

143 
	}
}

	@
1
.
0
60
740
etc/all.c
etc/lua.hpp
etc/min.c
etc/noparser.c
src/lapi.c
src/lapi.h
src/lauxlib.c
src/lauxlib.h
src/lbaselib.c
src/lcode.c
src/lcode.h
src/ldblib.c
src/ldebug.c
src/ldebug.h
src/ldo.c
src/ldo.h
src/ldump.c
src/lfunc.c
src/lfunc.h
src/lgc.c
src/lgc.h
src/linit.c
src/liolib.c
src/llex.c
src/llex.h
src/llimits.h
src/lmathlib.c
src/lmem.c
src/lmem.h
src/loadlib.c
src/lobject.c
src/lobject.h
src/lopcodes.c
src/lopcodes.h
src/loslib.c
src/lparser.c
src/lparser.h
src/lstate.c
src/lstate.h
src/lstring.c
src/lstring.h
src/lstrlib.c
src/ltable.c
src/ltable.h
src/ltablib.c
src/ltm.c
src/ltm.h
src/lua.c
src/lua.h
src/luac.c
src/luaconf.h
src/lualib.h
src/lundump.c
src/lundump.h
src/lvm.c
src/lvm.h
src/lzio.c
src/lzio.h
src/print.c
src/rsa.c
